
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Diagnostics;

namespace CHSNS.Models
{
    /// <summary>
    /// The class representing the dbo.category table.
    /// </summary>
    [Table(Name="dbo.category")]
    public partial class Category
        : LinqEntityBase
    {
        
        #region Default Constructor
        /// <summary>
        /// Initializes a new instance of the <see cref="Category"/> class.
        /// </summary>
        [DebuggerNonUserCodeAttribute()]
        public Category()
        {
            OnCreated();
        }
        #endregion
        
        #region Column Mapped Properties
        
        private byte _type;

        /// <summary>
        /// Gets or sets the type column value.
        /// </summary>
        [Column(Name="type", Storage="_type", DbType="tinyint NOT NULL", CanBeNull=false)]
        public byte Type
        {
            get { return _type; }
            set
            {
                if (_type != value)
                {
                    OnTypeChanging(value);
                    OnPropertyChanging("Type");
                    _type = value;
                    OnPropertyChanged("Type");
                    OnTypeChanged();
                }
            }
        }
        
        private long _count;

        /// <summary>
        /// Gets or sets the Count column value.
        /// </summary>
        [Column(Name="Count", Storage="_count", DbType="bigint NOT NULL", CanBeNull=false)]
        public long Count
        {
            get { return _count; }
            set
            {
                if (_count != value)
                {
                    OnCountChanging(value);
                    OnPropertyChanging("Count");
                    _count = value;
                    OnPropertyChanged("Count");
                    OnCountChanged();
                }
            }
        }
        
        private long _trueID = default(long);

        /// <summary>
        /// Gets the TrueID column value.
        /// </summary>
        [Column(Name="TrueID", Storage="_trueID", DbType="bigint NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, CanBeNull=false)]
        public long TrueID
        {
            get { return _trueID; }
            set
            {
                if (_trueID != value)
                {
                    OnTrueIDChanging(value);
                    OnPropertyChanging("TrueID");
                    _trueID = value;
                    OnPropertyChanged("TrueID");
                    OnTrueIDChanged();
                }
            }
        }
        
        private Nullable<long> _iD;

        /// <summary>
        /// Gets or sets the ID column value.
        /// </summary>
        [Column(Name="ID", Storage="_iD", DbType="bigint")]
        public Nullable<long> ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    OnIDChanging(value);
                    OnPropertyChanging("ID");
                    _iD = value;
                    OnPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        
        private string _name;

        /// <summary>
        /// Gets or sets the Name column value.
        /// </summary>
        [Column(Name="Name", Storage="_name", DbType="nvarchar(50) NOT NULL", CanBeNull=false)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    OnNameChanging(value);
                    OnPropertyChanging("Name");
                    _name = value;
                    OnPropertyChanged("Name");
                    OnNameChanged();
                }
            }
        }
        
        private Nullable<long> _userID;

        /// <summary>
        /// Gets or sets the UserID column value.
        /// </summary>
        [Column(Name="UserID", Storage="_userID", DbType="bigint")]
        public Nullable<long> UserID
        {
            get { return _userID; }
            set
            {
                if (_userID != value)
                {
                    OnUserIDChanging(value);
                    OnPropertyChanging("UserID");
                    _userID = value;
                    OnPropertyChanged("UserID");
                    OnUserIDChanged();
                }
            }
        }
        #endregion
        
        #region Association Mapped Properties
        #endregion
        
        #region Extensibility Method Definitions
        /// <summary>Called when this instance is loaded.</summary>
        partial void OnLoaded();
        /// <summary>Called when this instance is being saved.</summary>
        partial void OnValidate(ChangeAction action);
        /// <summary>Called when this instance is created.</summary>
        partial void OnCreated();
        /// <summary>Called when Type is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnTypeChanging(byte value);
        /// <summary>Called after Type has Changed.</summary>
        partial void OnTypeChanged();
        /// <summary>Called when Count is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnCountChanging(long value);
        /// <summary>Called after Count has Changed.</summary>
        partial void OnCountChanged();
        /// <summary>Called when TrueID is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnTrueIDChanging(long value);
        /// <summary>Called after TrueID has Changed.</summary>
        partial void OnTrueIDChanged();
        /// <summary>Called when ID is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnIDChanging(Nullable<long> value);
        /// <summary>Called after ID has Changed.</summary>
        partial void OnIDChanged();
        /// <summary>Called when Name is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnNameChanging(string value);
        /// <summary>Called after Name has Changed.</summary>
        partial void OnNameChanged();
        /// <summary>Called when UserID is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnUserIDChanging(Nullable<long> value);
        /// <summary>Called after UserID has Changed.</summary>
        partial void OnUserIDChanged();
        #endregion
        
    }
}

