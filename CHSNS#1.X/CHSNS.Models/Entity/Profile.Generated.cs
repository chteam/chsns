
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Diagnostics;

namespace CHSNS.Models
{
    /// <summary>
    /// The class representing the dbo.Profile table.
    /// </summary>
    [Table(Name="dbo.Profile")]
    public partial class Profile
        : LinqEntityBase
    {
        
        #region Default Constructor
        /// <summary>
        /// Initializes a new instance of the <see cref="Profile"/> class.
        /// </summary>
        [DebuggerNonUserCodeAttribute()]
        public Profile()
        {
            OnCreated();
            _basicInformation = default(EntityRef<BasicInformation>);
            _contactInformation = default(EntityRef<ContactInformation>);
            _fieldInformation = default(EntityRef<FieldInformation>);
            _personalInformation = default(EntityRef<PersonalInformation>);
        }
        #endregion
        
        #region Column Mapped Properties
        
        private string _showText;

        /// <summary>
        /// Gets or sets the ShowText column value.
        /// </summary>
        [Column(Name="ShowText", Storage="_showText", DbType="nvarchar(20)")]
        public string ShowText
        {
            get { return _showText; }
            set
            {
                if (_showText != value)
                {
                    OnShowTextChanging(value);
                    OnPropertyChanging("ShowText");
                    _showText = value;
                    OnPropertyChanged("ShowText");
                    OnShowTextChanged();
                }
            }
        }
        
        private Nullable<System.DateTime> _showTextTime;

        /// <summary>
        /// Gets or sets the ShowTextTime column value.
        /// </summary>
        [Column(Name="ShowTextTime", Storage="_showTextTime", DbType="smalldatetime")]
        public Nullable<System.DateTime> ShowTextTime
        {
            get { return _showTextTime; }
            set
            {
                if (_showTextTime != value)
                {
                    OnShowTextTimeChanging(value);
                    OnPropertyChanging("ShowTextTime");
                    _showTextTime = value;
                    OnPropertyChanged("ShowTextTime");
                    OnShowTextTimeChanged();
                }
            }
        }
        
        private long _score;

        /// <summary>
        /// Gets or sets the Score column value.
        /// </summary>
        [Column(Name="Score", Storage="_score", DbType="bigint NOT NULL", CanBeNull=false)]
        public long Score
        {
            get { return _score; }
            set
            {
                if (_score != value)
                {
                    OnScoreChanging(value);
                    OnPropertyChanging("Score");
                    _score = value;
                    OnPropertyChanged("Score");
                    OnScoreChanged();
                }
            }
        }
        
        private long _showScore;

        /// <summary>
        /// Gets or sets the ShowScore column value.
        /// </summary>
        [Column(Name="ShowScore", Storage="_showScore", DbType="bigint NOT NULL", CanBeNull=false)]
        public long ShowScore
        {
            get { return _showScore; }
            set
            {
                if (_showScore != value)
                {
                    OnShowScoreChanging(value);
                    OnPropertyChanging("ShowScore");
                    _showScore = value;
                    OnPropertyChanged("ShowScore");
                    OnShowScoreChanged();
                }
            }
        }
        
        private long _delScore;

        /// <summary>
        /// Gets or sets the DelScore column value.
        /// </summary>
        [Column(Name="DelScore", Storage="_delScore", DbType="bigint NOT NULL", CanBeNull=false)]
        public long DelScore
        {
            get { return _delScore; }
            set
            {
                if (_delScore != value)
                {
                    OnDelScoreChanging(value);
                    OnPropertyChanging("DelScore");
                    _delScore = value;
                    OnPropertyChanged("DelScore");
                    OnDelScoreChanged();
                }
            }
        }
        
        private string _magicBox;

        /// <summary>
        /// Gets or sets the MagicBox column value.
        /// </summary>
        [Column(Name="MagicBox", Storage="_magicBox", DbType="ntext NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
        public string MagicBox
        {
            get { return _magicBox; }
            set
            {
                if (_magicBox != value)
                {
                    OnMagicBoxChanging(value);
                    OnPropertyChanging("MagicBox");
                    _magicBox = value;
                    OnPropertyChanged("MagicBox");
                    OnMagicBoxChanged();
                }
            }
        }
        
        private byte _faceShowLevel;

        /// <summary>
        /// Gets or sets the FaceShowLevel column value.
        /// </summary>
        [Column(Name="FaceShowLevel", Storage="_faceShowLevel", DbType="tinyint NOT NULL", CanBeNull=false)]
        public byte FaceShowLevel
        {
            get { return _faceShowLevel; }
            set
            {
                if (_faceShowLevel != value)
                {
                    OnFaceShowLevelChanging(value);
                    OnPropertyChanging("FaceShowLevel");
                    _faceShowLevel = value;
                    OnPropertyChanged("FaceShowLevel");
                    OnFaceShowLevelChanged();
                }
            }
        }
        
        private byte _basicInfoShowLevel;

        /// <summary>
        /// Gets or sets the BasicInfoShowLevel column value.
        /// </summary>
        [Column(Name="BasicInfoShowLevel", Storage="_basicInfoShowLevel", DbType="tinyint NOT NULL", CanBeNull=false)]
        public byte BasicInfoShowLevel
        {
            get { return _basicInfoShowLevel; }
            set
            {
                if (_basicInfoShowLevel != value)
                {
                    OnBasicInfoShowLevelChanging(value);
                    OnPropertyChanging("BasicInfoShowLevel");
                    _basicInfoShowLevel = value;
                    OnPropertyChanged("BasicInfoShowLevel");
                    OnBasicInfoShowLevelChanged();
                }
            }
        }
        
        private byte _schoolInfoShowLevel;

        /// <summary>
        /// Gets or sets the SchoolInfoShowLevel column value.
        /// </summary>
        [Column(Name="SchoolInfoShowLevel", Storage="_schoolInfoShowLevel", DbType="tinyint NOT NULL", CanBeNull=false)]
        public byte SchoolInfoShowLevel
        {
            get { return _schoolInfoShowLevel; }
            set
            {
                if (_schoolInfoShowLevel != value)
                {
                    OnSchoolInfoShowLevelChanging(value);
                    OnPropertyChanging("SchoolInfoShowLevel");
                    _schoolInfoShowLevel = value;
                    OnPropertyChanged("SchoolInfoShowLevel");
                    OnSchoolInfoShowLevelChanged();
                }
            }
        }
        
        private byte _contactInfoShowLevel;

        /// <summary>
        /// Gets or sets the ContactInfoShowLevel column value.
        /// </summary>
        [Column(Name="ContactInfoShowLevel", Storage="_contactInfoShowLevel", DbType="tinyint NOT NULL", CanBeNull=false)]
        public byte ContactInfoShowLevel
        {
            get { return _contactInfoShowLevel; }
            set
            {
                if (_contactInfoShowLevel != value)
                {
                    OnContactInfoShowLevelChanging(value);
                    OnPropertyChanging("ContactInfoShowLevel");
                    _contactInfoShowLevel = value;
                    OnPropertyChanged("ContactInfoShowLevel");
                    OnContactInfoShowLevelChanged();
                }
            }
        }
        
        private byte _personalInfoShowLevel;

        /// <summary>
        /// Gets or sets the PersonalInfoShowLevel column value.
        /// </summary>
        [Column(Name="PersonalInfoShowLevel", Storage="_personalInfoShowLevel", DbType="tinyint NOT NULL", CanBeNull=false)]
        public byte PersonalInfoShowLevel
        {
            get { return _personalInfoShowLevel; }
            set
            {
                if (_personalInfoShowLevel != value)
                {
                    OnPersonalInfoShowLevelChanging(value);
                    OnPropertyChanging("PersonalInfoShowLevel");
                    _personalInfoShowLevel = value;
                    OnPropertyChanged("PersonalInfoShowLevel");
                    OnPersonalInfoShowLevelChanged();
                }
            }
        }
        
        private byte _allShowLevel;

        /// <summary>
        /// Gets or sets the AllShowLevel column value.
        /// </summary>
        [Column(Name="AllShowLevel", Storage="_allShowLevel", DbType="tinyint NOT NULL", CanBeNull=false)]
        public byte AllShowLevel
        {
            get { return _allShowLevel; }
            set
            {
                if (_allShowLevel != value)
                {
                    OnAllShowLevelChanging(value);
                    OnPropertyChanging("AllShowLevel");
                    _allShowLevel = value;
                    OnPropertyChanged("AllShowLevel");
                    OnAllShowLevelChanged();
                }
            }
        }
        
        private long _fileSizeAll;

        /// <summary>
        /// Gets or sets the FileSizeAll column value.
        /// </summary>
        [Column(Name="FileSizeAll", Storage="_fileSizeAll", DbType="bigint NOT NULL", CanBeNull=false)]
        public long FileSizeAll
        {
            get { return _fileSizeAll; }
            set
            {
                if (_fileSizeAll != value)
                {
                    OnFileSizeAllChanging(value);
                    OnPropertyChanging("FileSizeAll");
                    _fileSizeAll = value;
                    OnPropertyChanged("FileSizeAll");
                    OnFileSizeAllChanged();
                }
            }
        }
        
        private long _fileSizeCount;

        /// <summary>
        /// Gets or sets the FileSizeCount column value.
        /// </summary>
        [Column(Name="FileSizeCount", Storage="_fileSizeCount", DbType="bigint NOT NULL", CanBeNull=false)]
        public long FileSizeCount
        {
            get { return _fileSizeCount; }
            set
            {
                if (_fileSizeCount != value)
                {
                    OnFileSizeCountChanging(value);
                    OnPropertyChanging("FileSizeCount");
                    _fileSizeCount = value;
                    OnPropertyChanged("FileSizeCount");
                    OnFileSizeCountChanged();
                }
            }
        }
        
        private long _friendAll;

        /// <summary>
        /// Gets or sets the FriendAll column value.
        /// </summary>
        [Column(Name="FriendAll", Storage="_friendAll", DbType="bigint NOT NULL", CanBeNull=false)]
        public long FriendAll
        {
            get { return _friendAll; }
            set
            {
                if (_friendAll != value)
                {
                    OnFriendAllChanging(value);
                    OnPropertyChanging("FriendAll");
                    _friendAll = value;
                    OnPropertyChanged("FriendAll");
                    OnFriendAllChanged();
                }
            }
        }
        
        private long _friendCount;

        /// <summary>
        /// Gets or sets the FriendCount column value.
        /// </summary>
        [Column(Name="FriendCount", Storage="_friendCount", DbType="bigint NOT NULL", CanBeNull=false)]
        public long FriendCount
        {
            get { return _friendCount; }
            set
            {
                if (_friendCount != value)
                {
                    OnFriendCountChanging(value);
                    OnPropertyChanging("FriendCount");
                    _friendCount = value;
                    OnPropertyChanged("FriendCount");
                    OnFriendCountChanged();
                }
            }
        }
        
        private long _logCount;

        /// <summary>
        /// Gets or sets the LogCount column value.
        /// </summary>
        [Column(Name="LogCount", Storage="_logCount", DbType="bigint NOT NULL", CanBeNull=false)]
        public long LogCount
        {
            get { return _logCount; }
            set
            {
                if (_logCount != value)
                {
                    OnLogCountChanging(value);
                    OnPropertyChanging("LogCount");
                    _logCount = value;
                    OnPropertyChanged("LogCount");
                    OnLogCountChanged();
                }
            }
        }
        
        private long _commentCount;

        /// <summary>
        /// Gets or sets the CommentCount column value.
        /// </summary>
        [Column(Name="CommentCount", Storage="_commentCount", DbType="bigint NOT NULL", CanBeNull=false)]
        public long CommentCount
        {
            get { return _commentCount; }
            set
            {
                if (_commentCount != value)
                {
                    OnCommentCountChanging(value);
                    OnPropertyChanging("CommentCount");
                    _commentCount = value;
                    OnPropertyChanged("CommentCount");
                    OnCommentCountChanged();
                }
            }
        }
        
        private int _groupCount;

        /// <summary>
        /// Gets or sets the GroupCount column value.
        /// </summary>
        [Column(Name="GroupCount", Storage="_groupCount", DbType="int NOT NULL", CanBeNull=false)]
        public int GroupCount
        {
            get { return _groupCount; }
            set
            {
                if (_groupCount != value)
                {
                    OnGroupCountChanging(value);
                    OnPropertyChanging("GroupCount");
                    _groupCount = value;
                    OnPropertyChanged("GroupCount");
                    OnGroupCountChanged();
                }
            }
        }
        
        private bool _isMagicBox;

        /// <summary>
        /// Gets or sets the IsMagicBox column value.
        /// </summary>
        [Column(Name="IsMagicBox", Storage="_isMagicBox", DbType="bit NOT NULL", CanBeNull=false)]
        public bool IsMagicBox
        {
            get { return _isMagicBox; }
            set
            {
                if (_isMagicBox != value)
                {
                    OnIsMagicBoxChanging(value);
                    OnPropertyChanging("IsMagicBox");
                    _isMagicBox = value;
                    OnPropertyChanged("IsMagicBox");
                    OnIsMagicBoxChanged();
                }
            }
        }
        
        private long _viewCount;

        /// <summary>
        /// Gets or sets the ViewCount column value.
        /// </summary>
        [Column(Name="ViewCount", Storage="_viewCount", DbType="bigint NOT NULL", CanBeNull=false)]
        public long ViewCount
        {
            get { return _viewCount; }
            set
            {
                if (_viewCount != value)
                {
                    OnViewCountChanging(value);
                    OnPropertyChanging("ViewCount");
                    _viewCount = value;
                    OnPropertyChanged("ViewCount");
                    OnViewCountChanged();
                }
            }
        }
        
        private System.DateTime _createTime;

        /// <summary>
        /// Gets or sets the CreateTime column value.
        /// </summary>
        [Column(Name="CreateTime", Storage="_createTime", DbType="smalldatetime NOT NULL", CanBeNull=false)]
        public System.DateTime CreateTime
        {
            get { return _createTime; }
            set
            {
                if (_createTime != value)
                {
                    OnCreateTimeChanging(value);
                    OnPropertyChanging("CreateTime");
                    _createTime = value;
                    OnPropertyChanged("CreateTime");
                    OnCreateTimeChanged();
                }
            }
        }
        
        private bool _isStar;

        /// <summary>
        /// Gets or sets the IsStar column value.
        /// </summary>
        [Column(Name="IsStar", Storage="_isStar", DbType="bit NOT NULL", CanBeNull=false)]
        public bool IsStar
        {
            get { return _isStar; }
            set
            {
                if (_isStar != value)
                {
                    OnIsStarChanging(value);
                    OnPropertyChanging("IsStar");
                    _isStar = value;
                    OnPropertyChanged("IsStar");
                    OnIsStarChanged();
                }
            }
        }
        
        private bool _isUpdate;

        /// <summary>
        /// Gets or sets the IsUpdate column value.
        /// </summary>
        [Column(Name="IsUpdate", Storage="_isUpdate", DbType="bit NOT NULL", CanBeNull=false)]
        public bool IsUpdate
        {
            get { return _isUpdate; }
            set
            {
                if (_isUpdate != value)
                {
                    OnIsUpdateChanging(value);
                    OnPropertyChanging("IsUpdate");
                    _isUpdate = value;
                    OnPropertyChanged("IsUpdate");
                    OnIsUpdateChanged();
                }
            }
        }
        
        private string _applications;

        /// <summary>
        /// Gets or sets the Applications column value.
        /// </summary>
        [Column(Name="Applications", Storage="_applications", DbType="varchar(4000)")]
        public string Applications
        {
            get { return _applications; }
            set
            {
                if (_applications != value)
                {
                    OnApplicationsChanging(value);
                    OnPropertyChanging("Applications");
                    _applications = value;
                    OnPropertyChanged("Applications");
                    OnApplicationsChanged();
                }
            }
        }
        
        private string _applicationlist;

        /// <summary>
        /// Gets or sets the Applicationlist column value.
        /// </summary>
        [Column(Name="Applicationlist", Storage="_applicationlist", DbType="varchar(4000)")]
        public string Applicationlist
        {
            get { return _applicationlist; }
            set
            {
                if (_applicationlist != value)
                {
                    OnApplicationlistChanging(value);
                    OnPropertyChanging("Applicationlist");
                    _applicationlist = value;
                    OnPropertyChanged("Applicationlist");
                    OnApplicationlistChanged();
                }
            }
        }
        
        private long _albumCount;

        /// <summary>
        /// Gets or sets the AlbumCount column value.
        /// </summary>
        [Column(Name="AlbumCount", Storage="_albumCount", DbType="bigint NOT NULL", CanBeNull=false)]
        public long AlbumCount
        {
            get { return _albumCount; }
            set
            {
                if (_albumCount != value)
                {
                    OnAlbumCountChanging(value);
                    OnPropertyChanging("AlbumCount");
                    _albumCount = value;
                    OnPropertyChanged("AlbumCount");
                    OnAlbumCountChanged();
                }
            }
        }
        
        private Nullable<byte> _field;

        /// <summary>
        /// Gets or sets the field column value.
        /// </summary>
        [Column(Name="field", Storage="_field", DbType="tinyint")]
        public Nullable<byte> Field
        {
            get { return _field; }
            set
            {
                if (_field != value)
                {
                    OnFieldChanging(value);
                    OnPropertyChanging("Field");
                    _field = value;
                    OnPropertyChanged("Field");
                    OnFieldChanged();
                }
            }
        }
        
        private bool _inField;

        /// <summary>
        /// Gets or sets the InField column value.
        /// </summary>
        [Column(Name="InField", Storage="_inField", DbType="bit NOT NULL", CanBeNull=false)]
        public bool InField
        {
            get { return _inField; }
            set
            {
                if (_inField != value)
                {
                    OnInFieldChanging(value);
                    OnPropertyChanging("InField");
                    _inField = value;
                    OnPropertyChanged("InField");
                    OnInFieldChanged();
                }
            }
        }
        
        private long _userID;

        /// <summary>
        /// Gets or sets the UserID column value.
        /// </summary>
        [Column(Name="UserID", Storage="_userID", DbType="bigint NOT NULL", IsPrimaryKey=true, CanBeNull=false)]
        public long UserID
        {
            get { return _userID; }
            set
            {
                if (_userID != value)
                {
                    OnUserIDChanging(value);
                    OnPropertyChanging("UserID");
                    _userID = value;
                    OnPropertyChanged("UserID");
                    OnUserIDChanged();
                }
            }
        }
        
        private string _name;

        /// <summary>
        /// Gets or sets the Name column value.
        /// </summary>
        [Column(Name="Name", Storage="_name", DbType="nvarchar(50) NOT NULL", CanBeNull=false)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    OnNameChanging(value);
                    OnPropertyChanging("Name");
                    _name = value;
                    OnPropertyChanged("Name");
                    OnNameChanged();
                }
            }
        }
        
        private int _status;

        /// <summary>
        /// Gets or sets the Status column value.
        /// </summary>
        [Column(Name="Status", Storage="_status", DbType="int NOT NULL", CanBeNull=false)]
        public int Status
        {
            get { return _status; }
            set
            {
                if (_status != value)
                {
                    OnStatusChanging(value);
                    OnPropertyChanging("Status");
                    _status = value;
                    OnPropertyChanged("Status");
                    OnStatusChanged();
                }
            }
        }
        
        private System.DateTime _regTime;

        /// <summary>
        /// Gets or sets the RegTime column value.
        /// </summary>
        [Column(Name="RegTime", Storage="_regTime", DbType="smalldatetime NOT NULL", CanBeNull=false)]
        public System.DateTime RegTime
        {
            get { return _regTime; }
            set
            {
                if (_regTime != value)
                {
                    OnRegTimeChanging(value);
                    OnPropertyChanging("RegTime");
                    _regTime = value;
                    OnPropertyChanged("RegTime");
                    OnRegTimeChanged();
                }
            }
        }
        
        private System.DateTime _loginTime;

        /// <summary>
        /// Gets or sets the LoginTime column value.
        /// </summary>
        [Column(Name="LoginTime", Storage="_loginTime", DbType="smalldatetime NOT NULL", CanBeNull=false)]
        public System.DateTime LoginTime
        {
            get { return _loginTime; }
            set
            {
                if (_loginTime != value)
                {
                    OnLoginTimeChanging(value);
                    OnPropertyChanging("LoginTime");
                    _loginTime = value;
                    OnPropertyChanged("LoginTime");
                    OnLoginTimeChanged();
                }
            }
        }
        
        private long _outboxCount;

        /// <summary>
        /// Gets or sets the OutboxCount column value.
        /// </summary>
        [Column(Name="OutboxCount", Storage="_outboxCount", DbType="bigint NOT NULL", CanBeNull=false)]
        public long OutboxCount
        {
            get { return _outboxCount; }
            set
            {
                if (_outboxCount != value)
                {
                    OnOutboxCountChanging(value);
                    OnPropertyChanging("OutboxCount");
                    _outboxCount = value;
                    OnPropertyChanged("OutboxCount");
                    OnOutboxCountChanged();
                }
            }
        }
        
        private long _inboxCount;

        /// <summary>
        /// Gets or sets the InboxCount column value.
        /// </summary>
        [Column(Name="InboxCount", Storage="_inboxCount", DbType="bigint NOT NULL", CanBeNull=false)]
        public long InboxCount
        {
            get { return _inboxCount; }
            set
            {
                if (_inboxCount != value)
                {
                    OnInboxCountChanging(value);
                    OnPropertyChanging("InboxCount");
                    _inboxCount = value;
                    OnPropertyChanged("InboxCount");
                    OnInboxCountChanged();
                }
            }
        }
        #endregion
        
        #region Association Mapped Properties
        
        private EntityRef<BasicInformation> _basicInformation;

        /// <summary>
        /// Gets or sets the BasicInformation association.
        /// </summary>
        [Association(Name="FK_BasicInformation_Profile", Storage="_basicInformation", ThisKey="UserID", OtherKey="UserID", IsUnique=true)]
        public BasicInformation BasicInformation
        {
            get { return _basicInformation.Entity; }
            set
            {
                BasicInformation previousValue = _basicInformation.Entity;
                if (previousValue != value || _basicInformation.HasLoadedOrAssignedValue == false)
                {
                    OnPropertyChanging("BasicInformation");
                    if (previousValue != null)
                    {
                        _basicInformation.Entity = null;
                        previousValue.Profile = null;
                    }
                    _basicInformation.Entity = value;
                    if (value != null)
                    {
                        value.Profile = this;
                        _userID = value.UserID;
                    }
                    else
                    {
                        _userID = default(long);
                    }
                    OnPropertyChanged("BasicInformation");
                }
            }
        }
        
        private EntityRef<ContactInformation> _contactInformation;

        /// <summary>
        /// Gets or sets the ContactInformation association.
        /// </summary>
        [Association(Name="FK_ContactInformation_Account", Storage="_contactInformation", ThisKey="UserID", OtherKey="Userid", IsUnique=true)]
        public ContactInformation ContactInformation
        {
            get { return _contactInformation.Entity; }
            set
            {
                ContactInformation previousValue = _contactInformation.Entity;
                if (previousValue != value || _contactInformation.HasLoadedOrAssignedValue == false)
                {
                    OnPropertyChanging("ContactInformation");
                    if (previousValue != null)
                    {
                        _contactInformation.Entity = null;
                        previousValue.Profile = null;
                    }
                    _contactInformation.Entity = value;
                    if (value != null)
                    {
                        value.Profile = this;
                        _userID = value.Userid;
                    }
                    else
                    {
                        _userID = default(long);
                    }
                    OnPropertyChanged("ContactInformation");
                }
            }
        }
        
        private EntityRef<FieldInformation> _fieldInformation;

        /// <summary>
        /// Gets or sets the FieldInformation association.
        /// </summary>
        [Association(Name="FK_FieldInformation_Profile", Storage="_fieldInformation", ThisKey="UserID", OtherKey="UserID", IsUnique=true)]
        public FieldInformation FieldInformation
        {
            get { return _fieldInformation.Entity; }
            set
            {
                FieldInformation previousValue = _fieldInformation.Entity;
                if (previousValue != value || _fieldInformation.HasLoadedOrAssignedValue == false)
                {
                    OnPropertyChanging("FieldInformation");
                    if (previousValue != null)
                    {
                        _fieldInformation.Entity = null;
                        previousValue.Profile = null;
                    }
                    _fieldInformation.Entity = value;
                    if (value != null)
                    {
                        value.Profile = this;
                        _userID = value.UserID;
                    }
                    else
                    {
                        _userID = default(long);
                    }
                    OnPropertyChanged("FieldInformation");
                }
            }
        }
        
        private EntityRef<PersonalInformation> _personalInformation;

        /// <summary>
        /// Gets or sets the PersonalInformation association.
        /// </summary>
        [Association(Name="FK_PersonalInformation_Profile", Storage="_personalInformation", ThisKey="UserID", OtherKey="Userid", IsUnique=true)]
        public PersonalInformation PersonalInformation
        {
            get { return _personalInformation.Entity; }
            set
            {
                PersonalInformation previousValue = _personalInformation.Entity;
                if (previousValue != value || _personalInformation.HasLoadedOrAssignedValue == false)
                {
                    OnPropertyChanging("PersonalInformation");
                    if (previousValue != null)
                    {
                        _personalInformation.Entity = null;
                        previousValue.Profile = null;
                    }
                    _personalInformation.Entity = value;
                    if (value != null)
                    {
                        value.Profile = this;
                        _userID = value.Userid;
                    }
                    else
                    {
                        _userID = default(long);
                    }
                    OnPropertyChanged("PersonalInformation");
                }
            }
        }
        #endregion
        
        #region Extensibility Method Definitions
        /// <summary>Called when this instance is loaded.</summary>
        partial void OnLoaded();
        /// <summary>Called when this instance is being saved.</summary>
        partial void OnValidate(ChangeAction action);
        /// <summary>Called when this instance is created.</summary>
        partial void OnCreated();
        /// <summary>Called when ShowText is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnShowTextChanging(string value);
        /// <summary>Called after ShowText has Changed.</summary>
        partial void OnShowTextChanged();
        /// <summary>Called when ShowTextTime is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnShowTextTimeChanging(Nullable<System.DateTime> value);
        /// <summary>Called after ShowTextTime has Changed.</summary>
        partial void OnShowTextTimeChanged();
        /// <summary>Called when Score is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnScoreChanging(long value);
        /// <summary>Called after Score has Changed.</summary>
        partial void OnScoreChanged();
        /// <summary>Called when ShowScore is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnShowScoreChanging(long value);
        /// <summary>Called after ShowScore has Changed.</summary>
        partial void OnShowScoreChanged();
        /// <summary>Called when DelScore is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnDelScoreChanging(long value);
        /// <summary>Called after DelScore has Changed.</summary>
        partial void OnDelScoreChanged();
        /// <summary>Called when MagicBox is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnMagicBoxChanging(string value);
        /// <summary>Called after MagicBox has Changed.</summary>
        partial void OnMagicBoxChanged();
        /// <summary>Called when FaceShowLevel is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnFaceShowLevelChanging(byte value);
        /// <summary>Called after FaceShowLevel has Changed.</summary>
        partial void OnFaceShowLevelChanged();
        /// <summary>Called when BasicInfoShowLevel is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnBasicInfoShowLevelChanging(byte value);
        /// <summary>Called after BasicInfoShowLevel has Changed.</summary>
        partial void OnBasicInfoShowLevelChanged();
        /// <summary>Called when SchoolInfoShowLevel is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnSchoolInfoShowLevelChanging(byte value);
        /// <summary>Called after SchoolInfoShowLevel has Changed.</summary>
        partial void OnSchoolInfoShowLevelChanged();
        /// <summary>Called when ContactInfoShowLevel is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnContactInfoShowLevelChanging(byte value);
        /// <summary>Called after ContactInfoShowLevel has Changed.</summary>
        partial void OnContactInfoShowLevelChanged();
        /// <summary>Called when PersonalInfoShowLevel is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnPersonalInfoShowLevelChanging(byte value);
        /// <summary>Called after PersonalInfoShowLevel has Changed.</summary>
        partial void OnPersonalInfoShowLevelChanged();
        /// <summary>Called when AllShowLevel is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnAllShowLevelChanging(byte value);
        /// <summary>Called after AllShowLevel has Changed.</summary>
        partial void OnAllShowLevelChanged();
        /// <summary>Called when FileSizeAll is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnFileSizeAllChanging(long value);
        /// <summary>Called after FileSizeAll has Changed.</summary>
        partial void OnFileSizeAllChanged();
        /// <summary>Called when FileSizeCount is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnFileSizeCountChanging(long value);
        /// <summary>Called after FileSizeCount has Changed.</summary>
        partial void OnFileSizeCountChanged();
        /// <summary>Called when FriendAll is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnFriendAllChanging(long value);
        /// <summary>Called after FriendAll has Changed.</summary>
        partial void OnFriendAllChanged();
        /// <summary>Called when FriendCount is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnFriendCountChanging(long value);
        /// <summary>Called after FriendCount has Changed.</summary>
        partial void OnFriendCountChanged();
        /// <summary>Called when LogCount is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnLogCountChanging(long value);
        /// <summary>Called after LogCount has Changed.</summary>
        partial void OnLogCountChanged();
        /// <summary>Called when CommentCount is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnCommentCountChanging(long value);
        /// <summary>Called after CommentCount has Changed.</summary>
        partial void OnCommentCountChanged();
        /// <summary>Called when GroupCount is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnGroupCountChanging(int value);
        /// <summary>Called after GroupCount has Changed.</summary>
        partial void OnGroupCountChanged();
        /// <summary>Called when IsMagicBox is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnIsMagicBoxChanging(bool value);
        /// <summary>Called after IsMagicBox has Changed.</summary>
        partial void OnIsMagicBoxChanged();
        /// <summary>Called when ViewCount is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnViewCountChanging(long value);
        /// <summary>Called after ViewCount has Changed.</summary>
        partial void OnViewCountChanged();
        /// <summary>Called when CreateTime is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnCreateTimeChanging(System.DateTime value);
        /// <summary>Called after CreateTime has Changed.</summary>
        partial void OnCreateTimeChanged();
        /// <summary>Called when IsStar is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnIsStarChanging(bool value);
        /// <summary>Called after IsStar has Changed.</summary>
        partial void OnIsStarChanged();
        /// <summary>Called when IsUpdate is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnIsUpdateChanging(bool value);
        /// <summary>Called after IsUpdate has Changed.</summary>
        partial void OnIsUpdateChanged();
        /// <summary>Called when Applications is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnApplicationsChanging(string value);
        /// <summary>Called after Applications has Changed.</summary>
        partial void OnApplicationsChanged();
        /// <summary>Called when Applicationlist is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnApplicationlistChanging(string value);
        /// <summary>Called after Applicationlist has Changed.</summary>
        partial void OnApplicationlistChanged();
        /// <summary>Called when AlbumCount is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnAlbumCountChanging(long value);
        /// <summary>Called after AlbumCount has Changed.</summary>
        partial void OnAlbumCountChanged();
        /// <summary>Called when Field is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnFieldChanging(Nullable<byte> value);
        /// <summary>Called after Field has Changed.</summary>
        partial void OnFieldChanged();
        /// <summary>Called when InField is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnInFieldChanging(bool value);
        /// <summary>Called after InField has Changed.</summary>
        partial void OnInFieldChanged();
        /// <summary>Called when UserID is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnUserIDChanging(long value);
        /// <summary>Called after UserID has Changed.</summary>
        partial void OnUserIDChanged();
        /// <summary>Called when Name is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnNameChanging(string value);
        /// <summary>Called after Name has Changed.</summary>
        partial void OnNameChanged();
        /// <summary>Called when Status is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnStatusChanging(int value);
        /// <summary>Called after Status has Changed.</summary>
        partial void OnStatusChanged();
        /// <summary>Called when RegTime is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnRegTimeChanging(System.DateTime value);
        /// <summary>Called after RegTime has Changed.</summary>
        partial void OnRegTimeChanged();
        /// <summary>Called when LoginTime is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnLoginTimeChanging(System.DateTime value);
        /// <summary>Called after LoginTime has Changed.</summary>
        partial void OnLoginTimeChanged();
        /// <summary>Called when OutboxCount is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnOutboxCountChanging(long value);
        /// <summary>Called after OutboxCount has Changed.</summary>
        partial void OnOutboxCountChanged();
        /// <summary>Called when InboxCount is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnInboxCountChanging(long value);
        /// <summary>Called after InboxCount has Changed.</summary>
        partial void OnInboxCountChanged();
        #endregion
        
    }
}

