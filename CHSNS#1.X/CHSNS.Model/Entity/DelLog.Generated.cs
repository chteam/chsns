
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Diagnostics;

namespace CHSNS.Models
{
    /// <summary>
    /// The class representing the dbo.DelLog table.
    /// </summary>
    [Table(Name="dbo.DelLog")]
    public partial class DelLog
        : LinqEntityBase
    {
        
        #region Default Constructor
        /// <summary>
        /// Initializes a new instance of the <see cref="DelLog"/> class.
        /// </summary>
        [DebuggerNonUserCodeAttribute()]
        public DelLog()
        {
            OnCreated();
        }
        #endregion
        
        #region Column Mapped Properties
        
        private long _id = default(long);

        /// <summary>
        /// Gets the id column value.
        /// </summary>
        [Column(Name="id", Storage="_id", DbType="bigint NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, CanBeNull=false)]
        public long Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    OnIdChanging(value);
                    OnPropertyChanging("Id");
                    _id = value;
                    OnPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        
        private long _userid;

        /// <summary>
        /// Gets or sets the userid column value.
        /// </summary>
        [Column(Name="userid", Storage="_userid", DbType="bigint NOT NULL", CanBeNull=false)]
        public long Userid
        {
            get { return _userid; }
            set
            {
                if (_userid != value)
                {
                    OnUseridChanging(value);
                    OnPropertyChanging("Userid");
                    _userid = value;
                    OnPropertyChanged("Userid");
                    OnUseridChanged();
                }
            }
        }
        
        private string _title;

        /// <summary>
        /// Gets or sets the title column value.
        /// </summary>
        [Column(Name="title", Storage="_title", DbType="nvarchar(255) NOT NULL", CanBeNull=false)]
        public string Title
        {
            get { return _title; }
            set
            {
                if (_title != value)
                {
                    OnTitleChanging(value);
                    OnPropertyChanging("Title");
                    _title = value;
                    OnPropertyChanged("Title");
                    OnTitleChanged();
                }
            }
        }
        
        private string _body;

        /// <summary>
        /// Gets or sets the body column value.
        /// </summary>
        [Column(Name="body", Storage="_body", DbType="ntext", UpdateCheck=UpdateCheck.Never)]
        public string Body
        {
            get { return _body; }
            set
            {
                if (_body != value)
                {
                    OnBodyChanging(value);
                    OnPropertyChanging("Body");
                    _body = value;
                    OnPropertyChanged("Body");
                    OnBodyChanged();
                }
            }
        }
        
        private byte _isPost;

        /// <summary>
        /// Gets or sets the IsPost column value.
        /// </summary>
        [Column(Name="IsPost", Storage="_isPost", DbType="tinyint NOT NULL", CanBeNull=false)]
        public byte IsPost
        {
            get { return _isPost; }
            set
            {
                if (_isPost != value)
                {
                    OnIsPostChanging(value);
                    OnPropertyChanging("IsPost");
                    _isPost = value;
                    OnPropertyChanged("IsPost");
                    OnIsPostChanged();
                }
            }
        }
        
        private bool _anonymous;

        /// <summary>
        /// Gets or sets the Anonymous column value.
        /// </summary>
        [Column(Name="Anonymous", Storage="_anonymous", DbType="bit NOT NULL", CanBeNull=false)]
        public bool Anonymous
        {
            get { return _anonymous; }
            set
            {
                if (_anonymous != value)
                {
                    OnAnonymousChanging(value);
                    OnPropertyChanging("Anonymous");
                    _anonymous = value;
                    OnPropertyChanged("Anonymous");
                    OnAnonymousChanged();
                }
            }
        }
        
        private System.DateTime _addTime;

        /// <summary>
        /// Gets or sets the AddTime column value.
        /// </summary>
        [Column(Name="AddTime", Storage="_addTime", DbType="smalldatetime NOT NULL", CanBeNull=false)]
        public System.DateTime AddTime
        {
            get { return _addTime; }
            set
            {
                if (_addTime != value)
                {
                    OnAddTimeChanging(value);
                    OnPropertyChanging("AddTime");
                    _addTime = value;
                    OnPropertyChanged("AddTime");
                    OnAddTimeChanged();
                }
            }
        }
        
        private System.DateTime _editTime;

        /// <summary>
        /// Gets or sets the EditTime column value.
        /// </summary>
        [Column(Name="EditTime", Storage="_editTime", DbType="smalldatetime NOT NULL", CanBeNull=false)]
        public System.DateTime EditTime
        {
            get { return _editTime; }
            set
            {
                if (_editTime != value)
                {
                    OnEditTimeChanging(value);
                    OnPropertyChanging("EditTime");
                    _editTime = value;
                    OnPropertyChanged("EditTime");
                    OnEditTimeChanged();
                }
            }
        }
        
        private long _viewCount;

        /// <summary>
        /// Gets or sets the ViewCount column value.
        /// </summary>
        [Column(Name="ViewCount", Storage="_viewCount", DbType="bigint NOT NULL", CanBeNull=false)]
        public long ViewCount
        {
            get { return _viewCount; }
            set
            {
                if (_viewCount != value)
                {
                    OnViewCountChanging(value);
                    OnPropertyChanging("ViewCount");
                    _viewCount = value;
                    OnPropertyChanged("ViewCount");
                    OnViewCountChanged();
                }
            }
        }
        
        private long _pushCount;

        /// <summary>
        /// Gets or sets the PushCount column value.
        /// </summary>
        [Column(Name="PushCount", Storage="_pushCount", DbType="bigint NOT NULL", CanBeNull=false)]
        public long PushCount
        {
            get { return _pushCount; }
            set
            {
                if (_pushCount != value)
                {
                    OnPushCountChanging(value);
                    OnPropertyChanging("PushCount");
                    _pushCount = value;
                    OnPropertyChanged("PushCount");
                    OnPushCountChanged();
                }
            }
        }
        
        private long _trackBackCount;

        /// <summary>
        /// Gets or sets the TrackBackCount column value.
        /// </summary>
        [Column(Name="TrackBackCount", Storage="_trackBackCount", DbType="bigint NOT NULL", CanBeNull=false)]
        public long TrackBackCount
        {
            get { return _trackBackCount; }
            set
            {
                if (_trackBackCount != value)
                {
                    OnTrackBackCountChanging(value);
                    OnPropertyChanging("TrackBackCount");
                    _trackBackCount = value;
                    OnPropertyChanged("TrackBackCount");
                    OnTrackBackCountChanged();
                }
            }
        }
        
        private long _commentCount;

        /// <summary>
        /// Gets or sets the CommentCount column value.
        /// </summary>
        [Column(Name="CommentCount", Storage="_commentCount", DbType="bigint NOT NULL", CanBeNull=false)]
        public long CommentCount
        {
            get { return _commentCount; }
            set
            {
                if (_commentCount != value)
                {
                    OnCommentCountChanging(value);
                    OnPropertyChanging("CommentCount");
                    _commentCount = value;
                    OnPropertyChanged("CommentCount");
                    OnCommentCountChanged();
                }
            }
        }
        
        private long _groupId;

        /// <summary>
        /// Gets or sets the GroupId column value.
        /// </summary>
        [Column(Name="GroupId", Storage="_groupId", DbType="bigint NOT NULL", CanBeNull=false)]
        public long GroupId
        {
            get { return _groupId; }
            set
            {
                if (_groupId != value)
                {
                    OnGroupIdChanging(value);
                    OnPropertyChanging("GroupId");
                    _groupId = value;
                    OnPropertyChanged("GroupId");
                    OnGroupIdChanged();
                }
            }
        }
        
        private System.DateTime _delTime;

        /// <summary>
        /// Gets or sets the DelTime column value.
        /// </summary>
        [Column(Name="DelTime", Storage="_delTime", DbType="smalldatetime NOT NULL", CanBeNull=false)]
        public System.DateTime DelTime
        {
            get { return _delTime; }
            set
            {
                if (_delTime != value)
                {
                    OnDelTimeChanging(value);
                    OnPropertyChanging("DelTime");
                    _delTime = value;
                    OnPropertyChanged("DelTime");
                    OnDelTimeChanged();
                }
            }
        }
        
        private long _executerid;

        /// <summary>
        /// Gets or sets the Executerid column value.
        /// </summary>
        [Column(Name="Executerid", Storage="_executerid", DbType="bigint NOT NULL", CanBeNull=false)]
        public long Executerid
        {
            get { return _executerid; }
            set
            {
                if (_executerid != value)
                {
                    OnExecuteridChanging(value);
                    OnPropertyChanging("Executerid");
                    _executerid = value;
                    OnPropertyChanged("Executerid");
                    OnExecuteridChanged();
                }
            }
        }
        #endregion
        
        #region Association Mapped Properties
        #endregion
        
        #region Extensibility Method Definitions
        /// <summary>Called when this instance is loaded.</summary>
        partial void OnLoaded();
        /// <summary>Called when this instance is being saved.</summary>
        partial void OnValidate(ChangeAction action);
        /// <summary>Called when this instance is created.</summary>
        partial void OnCreated();
        /// <summary>Called when Id is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnIdChanging(long value);
        /// <summary>Called after Id has Changed.</summary>
        partial void OnIdChanged();
        /// <summary>Called when Userid is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnUseridChanging(long value);
        /// <summary>Called after Userid has Changed.</summary>
        partial void OnUseridChanged();
        /// <summary>Called when Title is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnTitleChanging(string value);
        /// <summary>Called after Title has Changed.</summary>
        partial void OnTitleChanged();
        /// <summary>Called when Body is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnBodyChanging(string value);
        /// <summary>Called after Body has Changed.</summary>
        partial void OnBodyChanged();
        /// <summary>Called when IsPost is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnIsPostChanging(byte value);
        /// <summary>Called after IsPost has Changed.</summary>
        partial void OnIsPostChanged();
        /// <summary>Called when Anonymous is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnAnonymousChanging(bool value);
        /// <summary>Called after Anonymous has Changed.</summary>
        partial void OnAnonymousChanged();
        /// <summary>Called when AddTime is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnAddTimeChanging(System.DateTime value);
        /// <summary>Called after AddTime has Changed.</summary>
        partial void OnAddTimeChanged();
        /// <summary>Called when EditTime is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnEditTimeChanging(System.DateTime value);
        /// <summary>Called after EditTime has Changed.</summary>
        partial void OnEditTimeChanged();
        /// <summary>Called when ViewCount is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnViewCountChanging(long value);
        /// <summary>Called after ViewCount has Changed.</summary>
        partial void OnViewCountChanged();
        /// <summary>Called when PushCount is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnPushCountChanging(long value);
        /// <summary>Called after PushCount has Changed.</summary>
        partial void OnPushCountChanged();
        /// <summary>Called when TrackBackCount is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnTrackBackCountChanging(long value);
        /// <summary>Called after TrackBackCount has Changed.</summary>
        partial void OnTrackBackCountChanged();
        /// <summary>Called when CommentCount is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnCommentCountChanging(long value);
        /// <summary>Called after CommentCount has Changed.</summary>
        partial void OnCommentCountChanged();
        /// <summary>Called when GroupId is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnGroupIdChanging(long value);
        /// <summary>Called after GroupId has Changed.</summary>
        partial void OnGroupIdChanged();
        /// <summary>Called when DelTime is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnDelTimeChanging(System.DateTime value);
        /// <summary>Called after DelTime has Changed.</summary>
        partial void OnDelTimeChanged();
        /// <summary>Called when Executerid is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnExecuteridChanging(long value);
        /// <summary>Called after Executerid has Changed.</summary>
        partial void OnExecuteridChanged();
        #endregion
        
    }
}

