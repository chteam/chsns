#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.3521
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace CHSNS.Web
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="Wow")]
	public partial class WOWDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertQuestion(Question instance);
    partial void UpdateQuestion(Question instance);
    partial void DeleteQuestion(Question instance);
    partial void InsertCharacter(Character instance);
    partial void UpdateCharacter(Character instance);
    partial void DeleteCharacter(Character instance);
    partial void InsertCurrentUser(CurrentUser instance);
    partial void UpdateCurrentUser(CurrentUser instance);
    partial void DeleteCurrentUser(CurrentUser instance);
    partial void InsertAnswer(Answer instance);
    partial void UpdateAnswer(Answer instance);
    partial void DeleteAnswer(Answer instance);
    #endregion
		
		public WOWDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["WowConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public WOWDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WOWDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WOWDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WOWDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Question> Question
		{
			get
			{
				return this.GetTable<Question>();
			}
		}
		
		public System.Data.Linq.Table<Character> Character
		{
			get
			{
				return this.GetTable<Character>();
			}
		}
		
		public System.Data.Linq.Table<CurrentUser> CurrentUser
		{
			get
			{
				return this.GetTable<CurrentUser>();
			}
		}
		
		public System.Data.Linq.Table<Answer> Answer
		{
			get
			{
				return this.GetTable<Answer>();
			}
		}
	}
	
	[Table(Name="dbo.Question")]
	public partial class Question : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Title;
		
		private long _UID;
		
		private System.DateTime _BeginTime;
		
		private System.DateTime _AddTime;
		
		private byte _ForType;
		
		private int _TaskID;
		
		private string _TaskName;
		
		private string _Description;
		
		private string _Example;
		
		private byte _Type;
		
		private EntitySet<Answer> _Answer;
		
		private EntityRef<CurrentUser> _CurrentUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnUIDChanging(long value);
    partial void OnUIDChanged();
    partial void OnBeginTimeChanging(System.DateTime value);
    partial void OnBeginTimeChanged();
    partial void OnAddTimeChanging(System.DateTime value);
    partial void OnAddTimeChanged();
    partial void OnForTypeChanging(byte value);
    partial void OnForTypeChanged();
    partial void OnTaskIDChanging(int value);
    partial void OnTaskIDChanged();
    partial void OnTaskNameChanging(string value);
    partial void OnTaskNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnExampleChanging(string value);
    partial void OnExampleChanged();
    partial void OnTypeChanging(byte value);
    partial void OnTypeChanged();
    #endregion
		
		public Question()
		{
			this._Answer = new EntitySet<Answer>(new Action<Answer>(this.attach_Answer), new Action<Answer>(this.detach_Answer));
			this._CurrentUser = default(EntityRef<CurrentUser>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(50)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_UID", DbType="BigInt NOT NULL")]
		public long UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					if (this._CurrentUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[Column(Storage="_BeginTime", DbType="SmallDateTime NOT NULL")]
		public System.DateTime BeginTime
		{
			get
			{
				return this._BeginTime;
			}
			set
			{
				if ((this._BeginTime != value))
				{
					this.OnBeginTimeChanging(value);
					this.SendPropertyChanging();
					this._BeginTime = value;
					this.SendPropertyChanged("BeginTime");
					this.OnBeginTimeChanged();
				}
			}
		}
		
		[Column(Storage="_AddTime", DbType="SmallDateTime NOT NULL")]
		public System.DateTime AddTime
		{
			get
			{
				return this._AddTime;
			}
			set
			{
				if ((this._AddTime != value))
				{
					this.OnAddTimeChanging(value);
					this.SendPropertyChanging();
					this._AddTime = value;
					this.SendPropertyChanged("AddTime");
					this.OnAddTimeChanged();
				}
			}
		}
		
		[Column(Storage="_ForType", DbType="TinyInt NOT NULL")]
		public byte ForType
		{
			get
			{
				return this._ForType;
			}
			set
			{
				if ((this._ForType != value))
				{
					this.OnForTypeChanging(value);
					this.SendPropertyChanging();
					this._ForType = value;
					this.SendPropertyChanged("ForType");
					this.OnForTypeChanged();
				}
			}
		}
		
		[Column(Storage="_TaskID", DbType="Int NOT NULL")]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[Column(Storage="_TaskName", DbType="NVarChar(50)")]
		public string TaskName
		{
			get
			{
				return this._TaskName;
			}
			set
			{
				if ((this._TaskName != value))
				{
					this.OnTaskNameChanging(value);
					this.SendPropertyChanging();
					this._TaskName = value;
					this.SendPropertyChanged("TaskName");
					this.OnTaskNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Example", DbType="NVarChar(MAX)")]
		public string Example
		{
			get
			{
				return this._Example;
			}
			set
			{
				if ((this._Example != value))
				{
					this.OnExampleChanging(value);
					this.SendPropertyChanging();
					this._Example = value;
					this.SendPropertyChanged("Example");
					this.OnExampleChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="TinyInt NOT NULL")]
		public byte Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Association(Name="Question_Answer", Storage="_Answer", ThisKey="ID", OtherKey="QuestionID")]
		public EntitySet<Answer> Answer
		{
			get
			{
				return this._Answer;
			}
			set
			{
				this._Answer.Assign(value);
			}
		}
		
		[Association(Name="CurrentUser_Question", Storage="_CurrentUser", ThisKey="UID", OtherKey="UID", IsForeignKey=true)]
		public CurrentUser CurrentUser
		{
			get
			{
				return this._CurrentUser.Entity;
			}
			set
			{
				CurrentUser previousValue = this._CurrentUser.Entity;
				if (((previousValue != value) 
							|| (this._CurrentUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CurrentUser.Entity = null;
						previousValue.Question.Remove(this);
					}
					this._CurrentUser.Entity = value;
					if ((value != null))
					{
						value.Question.Add(this);
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(long);
					}
					this.SendPropertyChanged("CurrentUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Answer(Answer entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_Answer(Answer entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
	}
	
	[Table(Name="dbo.Character")]
	public partial class Character : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _UID;
		
		private string _Name;
		
		private string _Race;
		
		private string _RealM;
		
		private int _Level;
		
		private string _BattleGroup;
		
		private string _Class;
		
		private string _Faction;
		
		private System.Nullable<System.DateTime> _lastLoginDate;
		
		private string _Gend;
		
		private EntitySet<CurrentUser> _CurrentUser1;
		
		private EntityRef<CurrentUser> _CurrentUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnUIDChanging(long value);
    partial void OnUIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnRaceChanging(string value);
    partial void OnRaceChanged();
    partial void OnRealMChanging(string value);
    partial void OnRealMChanged();
    partial void OnLevelChanging(int value);
    partial void OnLevelChanged();
    partial void OnBattleGroupChanging(string value);
    partial void OnBattleGroupChanged();
    partial void OnClassChanging(string value);
    partial void OnClassChanged();
    partial void OnFactionChanging(string value);
    partial void OnFactionChanged();
    partial void OnlastLoginDateChanging(System.Nullable<System.DateTime> value);
    partial void OnlastLoginDateChanged();
    partial void OnGendChanging(string value);
    partial void OnGendChanged();
    #endregion
		
		public Character()
		{
			this._CurrentUser1 = new EntitySet<CurrentUser>(new Action<CurrentUser>(this.attach_CurrentUser1), new Action<CurrentUser>(this.detach_CurrentUser1));
			this._CurrentUser = default(EntityRef<CurrentUser>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_UID", DbType="BigInt NOT NULL")]
		public long UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					if (this._CurrentUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Race", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Race
		{
			get
			{
				return this._Race;
			}
			set
			{
				if ((this._Race != value))
				{
					this.OnRaceChanging(value);
					this.SendPropertyChanging();
					this._Race = value;
					this.SendPropertyChanged("Race");
					this.OnRaceChanged();
				}
			}
		}
		
		[Column(Storage="_RealM", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string RealM
		{
			get
			{
				return this._RealM;
			}
			set
			{
				if ((this._RealM != value))
				{
					this.OnRealMChanging(value);
					this.SendPropertyChanging();
					this._RealM = value;
					this.SendPropertyChanged("RealM");
					this.OnRealMChanged();
				}
			}
		}
		
		[Column(Name="[Level]", Storage="_Level", DbType="Int NOT NULL")]
		public int Level
		{
			get
			{
				return this._Level;
			}
			set
			{
				if ((this._Level != value))
				{
					this.OnLevelChanging(value);
					this.SendPropertyChanging();
					this._Level = value;
					this.SendPropertyChanged("Level");
					this.OnLevelChanged();
				}
			}
		}
		
		[Column(Storage="_BattleGroup", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string BattleGroup
		{
			get
			{
				return this._BattleGroup;
			}
			set
			{
				if ((this._BattleGroup != value))
				{
					this.OnBattleGroupChanging(value);
					this.SendPropertyChanging();
					this._BattleGroup = value;
					this.SendPropertyChanged("BattleGroup");
					this.OnBattleGroupChanged();
				}
			}
		}
		
		[Column(Storage="_Class", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Class
		{
			get
			{
				return this._Class;
			}
			set
			{
				if ((this._Class != value))
				{
					this.OnClassChanging(value);
					this.SendPropertyChanging();
					this._Class = value;
					this.SendPropertyChanged("Class");
					this.OnClassChanged();
				}
			}
		}
		
		[Column(Storage="_Faction", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Faction
		{
			get
			{
				return this._Faction;
			}
			set
			{
				if ((this._Faction != value))
				{
					this.OnFactionChanging(value);
					this.SendPropertyChanging();
					this._Faction = value;
					this.SendPropertyChanged("Faction");
					this.OnFactionChanged();
				}
			}
		}
		
		[Column(Storage="_lastLoginDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> lastLoginDate
		{
			get
			{
				return this._lastLoginDate;
			}
			set
			{
				if ((this._lastLoginDate != value))
				{
					this.OnlastLoginDateChanging(value);
					this.SendPropertyChanging();
					this._lastLoginDate = value;
					this.SendPropertyChanged("lastLoginDate");
					this.OnlastLoginDateChanged();
				}
			}
		}
		
		[Column(Storage="_Gend", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Gend
		{
			get
			{
				return this._Gend;
			}
			set
			{
				if ((this._Gend != value))
				{
					this.OnGendChanging(value);
					this.SendPropertyChanging();
					this._Gend = value;
					this.SendPropertyChanged("Gend");
					this.OnGendChanged();
				}
			}
		}
		
		[Association(Name="Character_CurrentUser", Storage="_CurrentUser1", ThisKey="ID", OtherKey="CurrentCID")]
		public EntitySet<CurrentUser> CurrentUser1
		{
			get
			{
				return this._CurrentUser1;
			}
			set
			{
				this._CurrentUser1.Assign(value);
			}
		}
		
		[Association(Name="CurrentUser_Character", Storage="_CurrentUser", ThisKey="UID", OtherKey="UID", IsForeignKey=true)]
		public CurrentUser CurrentUser
		{
			get
			{
				return this._CurrentUser.Entity;
			}
			set
			{
				CurrentUser previousValue = this._CurrentUser.Entity;
				if (((previousValue != value) 
							|| (this._CurrentUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CurrentUser.Entity = null;
						previousValue.Character.Remove(this);
					}
					this._CurrentUser.Entity = value;
					if ((value != null))
					{
						value.Character.Add(this);
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(long);
					}
					this.SendPropertyChanged("CurrentUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CurrentUser1(CurrentUser entity)
		{
			this.SendPropertyChanging();
			entity.Character1 = this;
		}
		
		private void detach_CurrentUser1(CurrentUser entity)
		{
			this.SendPropertyChanging();
			entity.Character1 = null;
		}
	}
	
	[Table(Name="dbo.CurrentUser")]
	public partial class CurrentUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _UID;
		
		private System.Nullable<long> _CurrentCID;
		
		private int _Evaluation;
		
		private int _GB;
		
		private int _ConsumerGB;
		
		private int _WorkerGB;
		
		private EntitySet<Question> _Question;
		
		private EntitySet<Character> _Character;
		
		private EntitySet<Answer> _Answer;
		
		private EntityRef<Character> _Character1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(long value);
    partial void OnUIDChanged();
    partial void OnCurrentCIDChanging(System.Nullable<long> value);
    partial void OnCurrentCIDChanged();
    partial void OnEvaluationChanging(int value);
    partial void OnEvaluationChanged();
    partial void OnGBChanging(int value);
    partial void OnGBChanged();
    partial void OnConsumerGBChanging(int value);
    partial void OnConsumerGBChanged();
    partial void OnWorkerGBChanging(int value);
    partial void OnWorkerGBChanged();
    #endregion
		
		public CurrentUser()
		{
			this._Question = new EntitySet<Question>(new Action<Question>(this.attach_Question), new Action<Question>(this.detach_Question));
			this._Character = new EntitySet<Character>(new Action<Character>(this.attach_Character), new Action<Character>(this.detach_Character));
			this._Answer = new EntitySet<Answer>(new Action<Answer>(this.attach_Answer), new Action<Answer>(this.detach_Answer));
			this._Character1 = default(EntityRef<Character>);
			OnCreated();
		}
		
		[Column(Storage="_UID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[Column(Storage="_CurrentCID", DbType="BigInt")]
		public System.Nullable<long> CurrentCID
		{
			get
			{
				return this._CurrentCID;
			}
			set
			{
				if ((this._CurrentCID != value))
				{
					if (this._Character1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCurrentCIDChanging(value);
					this.SendPropertyChanging();
					this._CurrentCID = value;
					this.SendPropertyChanged("CurrentCID");
					this.OnCurrentCIDChanged();
				}
			}
		}
		
		[Column(Storage="_Evaluation", DbType="Int NOT NULL")]
		public int Evaluation
		{
			get
			{
				return this._Evaluation;
			}
			set
			{
				if ((this._Evaluation != value))
				{
					this.OnEvaluationChanging(value);
					this.SendPropertyChanging();
					this._Evaluation = value;
					this.SendPropertyChanged("Evaluation");
					this.OnEvaluationChanged();
				}
			}
		}
		
		[Column(Storage="_GB", DbType="Int NOT NULL")]
		public int GB
		{
			get
			{
				return this._GB;
			}
			set
			{
				if ((this._GB != value))
				{
					this.OnGBChanging(value);
					this.SendPropertyChanging();
					this._GB = value;
					this.SendPropertyChanged("GB");
					this.OnGBChanged();
				}
			}
		}
		
		[Column(Storage="_ConsumerGB", DbType="Int NOT NULL")]
		public int ConsumerGB
		{
			get
			{
				return this._ConsumerGB;
			}
			set
			{
				if ((this._ConsumerGB != value))
				{
					this.OnConsumerGBChanging(value);
					this.SendPropertyChanging();
					this._ConsumerGB = value;
					this.SendPropertyChanged("ConsumerGB");
					this.OnConsumerGBChanged();
				}
			}
		}
		
		[Column(Storage="_WorkerGB", DbType="Int NOT NULL")]
		public int WorkerGB
		{
			get
			{
				return this._WorkerGB;
			}
			set
			{
				if ((this._WorkerGB != value))
				{
					this.OnWorkerGBChanging(value);
					this.SendPropertyChanging();
					this._WorkerGB = value;
					this.SendPropertyChanged("WorkerGB");
					this.OnWorkerGBChanged();
				}
			}
		}
		
		[Association(Name="CurrentUser_Question", Storage="_Question", ThisKey="UID", OtherKey="UID")]
		public EntitySet<Question> Question
		{
			get
			{
				return this._Question;
			}
			set
			{
				this._Question.Assign(value);
			}
		}
		
		[Association(Name="CurrentUser_Character", Storage="_Character", ThisKey="UID", OtherKey="UID")]
		public EntitySet<Character> Character
		{
			get
			{
				return this._Character;
			}
			set
			{
				this._Character.Assign(value);
			}
		}
		
		[Association(Name="CurrentUser_Answer", Storage="_Answer", ThisKey="UID", OtherKey="UID")]
		public EntitySet<Answer> Answer
		{
			get
			{
				return this._Answer;
			}
			set
			{
				this._Answer.Assign(value);
			}
		}
		
		[Association(Name="Character_CurrentUser", Storage="_Character1", ThisKey="CurrentCID", OtherKey="ID", IsForeignKey=true)]
		public Character Character1
		{
			get
			{
				return this._Character1.Entity;
			}
			set
			{
				Character previousValue = this._Character1.Entity;
				if (((previousValue != value) 
							|| (this._Character1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Character1.Entity = null;
						previousValue.CurrentUser1.Remove(this);
					}
					this._Character1.Entity = value;
					if ((value != null))
					{
						value.CurrentUser1.Add(this);
						this._CurrentCID = value.ID;
					}
					else
					{
						this._CurrentCID = default(Nullable<long>);
					}
					this.SendPropertyChanged("Character1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Question(Question entity)
		{
			this.SendPropertyChanging();
			entity.CurrentUser = this;
		}
		
		private void detach_Question(Question entity)
		{
			this.SendPropertyChanging();
			entity.CurrentUser = null;
		}
		
		private void attach_Character(Character entity)
		{
			this.SendPropertyChanging();
			entity.CurrentUser = this;
		}
		
		private void detach_Character(Character entity)
		{
			this.SendPropertyChanging();
			entity.CurrentUser = null;
		}
		
		private void attach_Answer(Answer entity)
		{
			this.SendPropertyChanging();
			entity.CurrentUser = this;
		}
		
		private void detach_Answer(Answer entity)
		{
			this.SendPropertyChanging();
			entity.CurrentUser = null;
		}
	}
	
	[Table(Name="dbo.Answer")]
	public partial class Answer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _QuestionID;
		
		private long _UID;
		
		private string _Content;
		
		private string _EvalText;
		
		private byte _Status;
		
		private System.DateTime _AddTime;
		
		private System.Nullable<byte> _Role;
		
		private EntityRef<CurrentUser> _CurrentUser;
		
		private EntityRef<Question> _Question;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnQuestionIDChanging(System.Guid value);
    partial void OnQuestionIDChanged();
    partial void OnUIDChanging(long value);
    partial void OnUIDChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnEvalTextChanging(string value);
    partial void OnEvalTextChanged();
    partial void OnStatusChanging(byte value);
    partial void OnStatusChanged();
    partial void OnAddTimeChanging(System.DateTime value);
    partial void OnAddTimeChanged();
    partial void OnRoleChanging(System.Nullable<byte> value);
    partial void OnRoleChanged();
    #endregion
		
		public Answer()
		{
			this._CurrentUser = default(EntityRef<CurrentUser>);
			this._Question = default(EntityRef<Question>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_QuestionID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid QuestionID
		{
			get
			{
				return this._QuestionID;
			}
			set
			{
				if ((this._QuestionID != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._QuestionID = value;
					this.SendPropertyChanged("QuestionID");
					this.OnQuestionIDChanged();
				}
			}
		}
		
		[Column(Storage="_UID", DbType="BigInt NOT NULL")]
		public long UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					if (this._CurrentUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[Column(Storage="_Content", DbType="NVarChar(250)")]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[Column(Storage="_EvalText", DbType="NVarChar(4000)")]
		public string EvalText
		{
			get
			{
				return this._EvalText;
			}
			set
			{
				if ((this._EvalText != value))
				{
					this.OnEvalTextChanging(value);
					this.SendPropertyChanging();
					this._EvalText = value;
					this.SendPropertyChanged("EvalText");
					this.OnEvalTextChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="TinyInt NOT NULL")]
		public byte Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Storage="_AddTime", DbType="SmallDateTime NOT NULL")]
		public System.DateTime AddTime
		{
			get
			{
				return this._AddTime;
			}
			set
			{
				if ((this._AddTime != value))
				{
					this.OnAddTimeChanging(value);
					this.SendPropertyChanging();
					this._AddTime = value;
					this.SendPropertyChanged("AddTime");
					this.OnAddTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Role", DbType="TinyInt")]
		public System.Nullable<byte> Role
		{
			get
			{
				return this._Role;
			}
			set
			{
				if ((this._Role != value))
				{
					this.OnRoleChanging(value);
					this.SendPropertyChanging();
					this._Role = value;
					this.SendPropertyChanged("Role");
					this.OnRoleChanged();
				}
			}
		}
		
		[Association(Name="CurrentUser_Answer", Storage="_CurrentUser", ThisKey="UID", OtherKey="UID", IsForeignKey=true)]
		public CurrentUser CurrentUser
		{
			get
			{
				return this._CurrentUser.Entity;
			}
			set
			{
				CurrentUser previousValue = this._CurrentUser.Entity;
				if (((previousValue != value) 
							|| (this._CurrentUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CurrentUser.Entity = null;
						previousValue.Answer.Remove(this);
					}
					this._CurrentUser.Entity = value;
					if ((value != null))
					{
						value.Answer.Add(this);
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(long);
					}
					this.SendPropertyChanged("CurrentUser");
				}
			}
		}
		
		[Association(Name="Question_Answer", Storage="_Question", ThisKey="QuestionID", OtherKey="ID", IsForeignKey=true)]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.Answer.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.Answer.Add(this);
						this._QuestionID = value.ID;
					}
					else
					{
						this._QuestionID = default(System.Guid);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
