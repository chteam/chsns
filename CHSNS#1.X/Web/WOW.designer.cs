#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.3521
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace CHSNS.Web
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="Wow")]
	public partial class WOWDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCharacter(Character instance);
    partial void UpdateCharacter(Character instance);
    partial void DeleteCharacter(Character instance);
    partial void InsertWorker(Worker instance);
    partial void UpdateWorker(Worker instance);
    partial void DeleteWorker(Worker instance);
    partial void InsertCurrentUser(CurrentUser instance);
    partial void UpdateCurrentUser(CurrentUser instance);
    partial void DeleteCurrentUser(CurrentUser instance);
    partial void InsertTask(Task instance);
    partial void UpdateTask(Task instance);
    partial void DeleteTask(Task instance);
    #endregion
		
		public WOWDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["WowConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public WOWDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WOWDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WOWDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WOWDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Character> Character
		{
			get
			{
				return this.GetTable<Character>();
			}
		}
		
		public System.Data.Linq.Table<Worker> Worker
		{
			get
			{
				return this.GetTable<Worker>();
			}
		}
		
		public System.Data.Linq.Table<CurrentUser> CurrentUser
		{
			get
			{
				return this.GetTable<CurrentUser>();
			}
		}
		
		public System.Data.Linq.Table<Task> Task
		{
			get
			{
				return this.GetTable<Task>();
			}
		}
	}
	
	[Table(Name="dbo.Character")]
	public partial class Character : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _UID;
		
		private string _Name;
		
		private string _Race;
		
		private string _RealM;
		
		private int _Level;
		
		private string _BattleGroup;
		
		private string _Class;
		
		private string _Faction;
		
		private System.Nullable<System.DateTime> _lastLoginDate;
		
		private string _Gend;
		
		private EntitySet<CurrentUser> _CurrentUser1;
		
		private EntityRef<CurrentUser> _CurrentUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnUIDChanging(long value);
    partial void OnUIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnRaceChanging(string value);
    partial void OnRaceChanged();
    partial void OnRealMChanging(string value);
    partial void OnRealMChanged();
    partial void OnLevelChanging(int value);
    partial void OnLevelChanged();
    partial void OnBattleGroupChanging(string value);
    partial void OnBattleGroupChanged();
    partial void OnClassChanging(string value);
    partial void OnClassChanged();
    partial void OnFactionChanging(string value);
    partial void OnFactionChanged();
    partial void OnlastLoginDateChanging(System.Nullable<System.DateTime> value);
    partial void OnlastLoginDateChanged();
    partial void OnGendChanging(string value);
    partial void OnGendChanged();
    #endregion
		
		public Character()
		{
			this._CurrentUser1 = new EntitySet<CurrentUser>(new Action<CurrentUser>(this.attach_CurrentUser1), new Action<CurrentUser>(this.detach_CurrentUser1));
			this._CurrentUser = default(EntityRef<CurrentUser>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_UID", DbType="BigInt NOT NULL")]
		public long UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					if (this._CurrentUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Race", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Race
		{
			get
			{
				return this._Race;
			}
			set
			{
				if ((this._Race != value))
				{
					this.OnRaceChanging(value);
					this.SendPropertyChanging();
					this._Race = value;
					this.SendPropertyChanged("Race");
					this.OnRaceChanged();
				}
			}
		}
		
		[Column(Storage="_RealM", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string RealM
		{
			get
			{
				return this._RealM;
			}
			set
			{
				if ((this._RealM != value))
				{
					this.OnRealMChanging(value);
					this.SendPropertyChanging();
					this._RealM = value;
					this.SendPropertyChanged("RealM");
					this.OnRealMChanged();
				}
			}
		}
		
		[Column(Name="[Level]", Storage="_Level", DbType="Int NOT NULL")]
		public int Level
		{
			get
			{
				return this._Level;
			}
			set
			{
				if ((this._Level != value))
				{
					this.OnLevelChanging(value);
					this.SendPropertyChanging();
					this._Level = value;
					this.SendPropertyChanged("Level");
					this.OnLevelChanged();
				}
			}
		}
		
		[Column(Storage="_BattleGroup", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string BattleGroup
		{
			get
			{
				return this._BattleGroup;
			}
			set
			{
				if ((this._BattleGroup != value))
				{
					this.OnBattleGroupChanging(value);
					this.SendPropertyChanging();
					this._BattleGroup = value;
					this.SendPropertyChanged("BattleGroup");
					this.OnBattleGroupChanged();
				}
			}
		}
		
		[Column(Storage="_Class", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Class
		{
			get
			{
				return this._Class;
			}
			set
			{
				if ((this._Class != value))
				{
					this.OnClassChanging(value);
					this.SendPropertyChanging();
					this._Class = value;
					this.SendPropertyChanged("Class");
					this.OnClassChanged();
				}
			}
		}
		
		[Column(Storage="_Faction", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Faction
		{
			get
			{
				return this._Faction;
			}
			set
			{
				if ((this._Faction != value))
				{
					this.OnFactionChanging(value);
					this.SendPropertyChanging();
					this._Faction = value;
					this.SendPropertyChanged("Faction");
					this.OnFactionChanged();
				}
			}
		}
		
		[Column(Storage="_lastLoginDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> lastLoginDate
		{
			get
			{
				return this._lastLoginDate;
			}
			set
			{
				if ((this._lastLoginDate != value))
				{
					this.OnlastLoginDateChanging(value);
					this.SendPropertyChanging();
					this._lastLoginDate = value;
					this.SendPropertyChanged("lastLoginDate");
					this.OnlastLoginDateChanged();
				}
			}
		}
		
		[Column(Storage="_Gend", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Gend
		{
			get
			{
				return this._Gend;
			}
			set
			{
				if ((this._Gend != value))
				{
					this.OnGendChanging(value);
					this.SendPropertyChanging();
					this._Gend = value;
					this.SendPropertyChanged("Gend");
					this.OnGendChanged();
				}
			}
		}
		
		[Association(Name="Character_CurrentUser", Storage="_CurrentUser1", ThisKey="ID", OtherKey="CurrentCID")]
		public EntitySet<CurrentUser> CurrentUser1
		{
			get
			{
				return this._CurrentUser1;
			}
			set
			{
				this._CurrentUser1.Assign(value);
			}
		}
		
		[Association(Name="CurrentUser_Character", Storage="_CurrentUser", ThisKey="UID", OtherKey="UID", IsForeignKey=true)]
		public CurrentUser CurrentUser
		{
			get
			{
				return this._CurrentUser.Entity;
			}
			set
			{
				CurrentUser previousValue = this._CurrentUser.Entity;
				if (((previousValue != value) 
							|| (this._CurrentUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CurrentUser.Entity = null;
						previousValue.Character.Remove(this);
					}
					this._CurrentUser.Entity = value;
					if ((value != null))
					{
						value.Character.Add(this);
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(long);
					}
					this.SendPropertyChanged("CurrentUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CurrentUser1(CurrentUser entity)
		{
			this.SendPropertyChanging();
			entity.Character1 = this;
		}
		
		private void detach_CurrentUser1(CurrentUser entity)
		{
			this.SendPropertyChanging();
			entity.Character1 = null;
		}
	}
	
	[Table(Name="dbo.Worker")]
	public partial class Worker : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _UID;
		
		private System.Nullable<long> _TaskID;
		
		private System.Nullable<long> _Description;
		
		private System.Nullable<int> _Evaluation;
		
		private EntityRef<CurrentUser> _CurrentUser;
		
		private EntityRef<Task> _Task;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnUIDChanging(long value);
    partial void OnUIDChanged();
    partial void OnTaskIDChanging(System.Nullable<long> value);
    partial void OnTaskIDChanged();
    partial void OnDescriptionChanging(System.Nullable<long> value);
    partial void OnDescriptionChanged();
    partial void OnEvaluationChanging(System.Nullable<int> value);
    partial void OnEvaluationChanged();
    #endregion
		
		public Worker()
		{
			this._CurrentUser = default(EntityRef<CurrentUser>);
			this._Task = default(EntityRef<Task>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_UID", DbType="BigInt NOT NULL")]
		public long UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					if (this._CurrentUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[Column(Storage="_TaskID", DbType="BigInt")]
		public System.Nullable<long> TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					if (this._Task.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="BigInt")]
		public System.Nullable<long> Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Evaluation", DbType="Int")]
		public System.Nullable<int> Evaluation
		{
			get
			{
				return this._Evaluation;
			}
			set
			{
				if ((this._Evaluation != value))
				{
					this.OnEvaluationChanging(value);
					this.SendPropertyChanging();
					this._Evaluation = value;
					this.SendPropertyChanged("Evaluation");
					this.OnEvaluationChanged();
				}
			}
		}
		
		[Association(Name="CurrentUser_Worker", Storage="_CurrentUser", ThisKey="UID", OtherKey="UID", IsForeignKey=true)]
		public CurrentUser CurrentUser
		{
			get
			{
				return this._CurrentUser.Entity;
			}
			set
			{
				CurrentUser previousValue = this._CurrentUser.Entity;
				if (((previousValue != value) 
							|| (this._CurrentUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CurrentUser.Entity = null;
						previousValue.Worker.Remove(this);
					}
					this._CurrentUser.Entity = value;
					if ((value != null))
					{
						value.Worker.Add(this);
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(long);
					}
					this.SendPropertyChanged("CurrentUser");
				}
			}
		}
		
		[Association(Name="Task_Worker", Storage="_Task", ThisKey="TaskID", OtherKey="ID", IsForeignKey=true)]
		public Task Task
		{
			get
			{
				return this._Task.Entity;
			}
			set
			{
				Task previousValue = this._Task.Entity;
				if (((previousValue != value) 
							|| (this._Task.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Task.Entity = null;
						previousValue.Worker.Remove(this);
					}
					this._Task.Entity = value;
					if ((value != null))
					{
						value.Worker.Add(this);
						this._TaskID = value.ID;
					}
					else
					{
						this._TaskID = default(Nullable<long>);
					}
					this.SendPropertyChanged("Task");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.CurrentUser")]
	public partial class CurrentUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _UID;
		
		private System.Nullable<long> _CurrentCID;
		
		private int _Evaluation;
		
		private int _GB;
		
		private int _ConsumerGB;
		
		private int _WorkerGB;
		
		private EntitySet<Character> _Character;
		
		private EntitySet<Worker> _Worker;
		
		private EntitySet<Task> _Task;
		
		private EntityRef<Character> _Character1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(long value);
    partial void OnUIDChanged();
    partial void OnCurrentCIDChanging(System.Nullable<long> value);
    partial void OnCurrentCIDChanged();
    partial void OnEvaluationChanging(int value);
    partial void OnEvaluationChanged();
    partial void OnGBChanging(int value);
    partial void OnGBChanged();
    partial void OnConsumerGBChanging(int value);
    partial void OnConsumerGBChanged();
    partial void OnWorkerGBChanging(int value);
    partial void OnWorkerGBChanged();
    #endregion
		
		public CurrentUser()
		{
			this._Character = new EntitySet<Character>(new Action<Character>(this.attach_Character), new Action<Character>(this.detach_Character));
			this._Worker = new EntitySet<Worker>(new Action<Worker>(this.attach_Worker), new Action<Worker>(this.detach_Worker));
			this._Task = new EntitySet<Task>(new Action<Task>(this.attach_Task), new Action<Task>(this.detach_Task));
			this._Character1 = default(EntityRef<Character>);
			OnCreated();
		}
		
		[Column(Storage="_UID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[Column(Storage="_CurrentCID", DbType="BigInt")]
		public System.Nullable<long> CurrentCID
		{
			get
			{
				return this._CurrentCID;
			}
			set
			{
				if ((this._CurrentCID != value))
				{
					if (this._Character1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCurrentCIDChanging(value);
					this.SendPropertyChanging();
					this._CurrentCID = value;
					this.SendPropertyChanged("CurrentCID");
					this.OnCurrentCIDChanged();
				}
			}
		}
		
		[Column(Storage="_Evaluation", DbType="Int NOT NULL")]
		public int Evaluation
		{
			get
			{
				return this._Evaluation;
			}
			set
			{
				if ((this._Evaluation != value))
				{
					this.OnEvaluationChanging(value);
					this.SendPropertyChanging();
					this._Evaluation = value;
					this.SendPropertyChanged("Evaluation");
					this.OnEvaluationChanged();
				}
			}
		}
		
		[Column(Storage="_GB", DbType="Int NOT NULL")]
		public int GB
		{
			get
			{
				return this._GB;
			}
			set
			{
				if ((this._GB != value))
				{
					this.OnGBChanging(value);
					this.SendPropertyChanging();
					this._GB = value;
					this.SendPropertyChanged("GB");
					this.OnGBChanged();
				}
			}
		}
		
		[Column(Storage="_ConsumerGB", DbType="Int NOT NULL")]
		public int ConsumerGB
		{
			get
			{
				return this._ConsumerGB;
			}
			set
			{
				if ((this._ConsumerGB != value))
				{
					this.OnConsumerGBChanging(value);
					this.SendPropertyChanging();
					this._ConsumerGB = value;
					this.SendPropertyChanged("ConsumerGB");
					this.OnConsumerGBChanged();
				}
			}
		}
		
		[Column(Storage="_WorkerGB", DbType="Int NOT NULL")]
		public int WorkerGB
		{
			get
			{
				return this._WorkerGB;
			}
			set
			{
				if ((this._WorkerGB != value))
				{
					this.OnWorkerGBChanging(value);
					this.SendPropertyChanging();
					this._WorkerGB = value;
					this.SendPropertyChanged("WorkerGB");
					this.OnWorkerGBChanged();
				}
			}
		}
		
		[Association(Name="CurrentUser_Character", Storage="_Character", ThisKey="UID", OtherKey="UID")]
		public EntitySet<Character> Character
		{
			get
			{
				return this._Character;
			}
			set
			{
				this._Character.Assign(value);
			}
		}
		
		[Association(Name="CurrentUser_Worker", Storage="_Worker", ThisKey="UID", OtherKey="UID")]
		public EntitySet<Worker> Worker
		{
			get
			{
				return this._Worker;
			}
			set
			{
				this._Worker.Assign(value);
			}
		}
		
		[Association(Name="CurrentUser_Task", Storage="_Task", ThisKey="UID", OtherKey="CreateUserID")]
		public EntitySet<Task> Task
		{
			get
			{
				return this._Task;
			}
			set
			{
				this._Task.Assign(value);
			}
		}
		
		[Association(Name="Character_CurrentUser", Storage="_Character1", ThisKey="CurrentCID", OtherKey="ID", IsForeignKey=true)]
		public Character Character1
		{
			get
			{
				return this._Character1.Entity;
			}
			set
			{
				Character previousValue = this._Character1.Entity;
				if (((previousValue != value) 
							|| (this._Character1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Character1.Entity = null;
						previousValue.CurrentUser1.Remove(this);
					}
					this._Character1.Entity = value;
					if ((value != null))
					{
						value.CurrentUser1.Add(this);
						this._CurrentCID = value.ID;
					}
					else
					{
						this._CurrentCID = default(Nullable<long>);
					}
					this.SendPropertyChanged("Character1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Character(Character entity)
		{
			this.SendPropertyChanging();
			entity.CurrentUser = this;
		}
		
		private void detach_Character(Character entity)
		{
			this.SendPropertyChanging();
			entity.CurrentUser = null;
		}
		
		private void attach_Worker(Worker entity)
		{
			this.SendPropertyChanging();
			entity.CurrentUser = this;
		}
		
		private void detach_Worker(Worker entity)
		{
			this.SendPropertyChanging();
			entity.CurrentUser = null;
		}
		
		private void attach_Task(Task entity)
		{
			this.SendPropertyChanging();
			entity.CurrentUser = this;
		}
		
		private void detach_Task(Task entity)
		{
			this.SendPropertyChanging();
			entity.CurrentUser = null;
		}
	}
	
	[Table(Name="dbo.Task")]
	public partial class Task : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Title;
		
		private int _PersonCount;
		
		private System.DateTime _BeginTime;
		
		private System.DateTime _AddTime;
		
		private string _Description;
		
		private long _CreateUserID;
		
		private int _TaskType;
		
		private int _GB;
		
		private EntitySet<Worker> _Worker;
		
		private EntityRef<CurrentUser> _CurrentUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnPersonCountChanging(int value);
    partial void OnPersonCountChanged();
    partial void OnBeginTimeChanging(System.DateTime value);
    partial void OnBeginTimeChanged();
    partial void OnAddTimeChanging(System.DateTime value);
    partial void OnAddTimeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCreateUserIDChanging(long value);
    partial void OnCreateUserIDChanged();
    partial void OnTaskTypeChanging(int value);
    partial void OnTaskTypeChanged();
    partial void OnGBChanging(int value);
    partial void OnGBChanged();
    #endregion
		
		public Task()
		{
			this._Worker = new EntitySet<Worker>(new Action<Worker>(this.attach_Worker), new Action<Worker>(this.detach_Worker));
			this._CurrentUser = default(EntityRef<CurrentUser>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_PersonCount", DbType="Int NOT NULL")]
		public int PersonCount
		{
			get
			{
				return this._PersonCount;
			}
			set
			{
				if ((this._PersonCount != value))
				{
					this.OnPersonCountChanging(value);
					this.SendPropertyChanging();
					this._PersonCount = value;
					this.SendPropertyChanged("PersonCount");
					this.OnPersonCountChanged();
				}
			}
		}
		
		[Column(Storage="_BeginTime", DbType="SmallDateTime NOT NULL")]
		public System.DateTime BeginTime
		{
			get
			{
				return this._BeginTime;
			}
			set
			{
				if ((this._BeginTime != value))
				{
					this.OnBeginTimeChanging(value);
					this.SendPropertyChanging();
					this._BeginTime = value;
					this.SendPropertyChanged("BeginTime");
					this.OnBeginTimeChanged();
				}
			}
		}
		
		[Column(Storage="_AddTime", DbType="SmallDateTime NOT NULL")]
		public System.DateTime AddTime
		{
			get
			{
				return this._AddTime;
			}
			set
			{
				if ((this._AddTime != value))
				{
					this.OnAddTimeChanging(value);
					this.SendPropertyChanging();
					this._AddTime = value;
					this.SendPropertyChanged("AddTime");
					this.OnAddTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_CreateUserID", DbType="BigInt NOT NULL")]
		public long CreateUserID
		{
			get
			{
				return this._CreateUserID;
			}
			set
			{
				if ((this._CreateUserID != value))
				{
					if (this._CurrentUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreateUserIDChanging(value);
					this.SendPropertyChanging();
					this._CreateUserID = value;
					this.SendPropertyChanged("CreateUserID");
					this.OnCreateUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_TaskType", DbType="Int NOT NULL")]
		public int TaskType
		{
			get
			{
				return this._TaskType;
			}
			set
			{
				if ((this._TaskType != value))
				{
					this.OnTaskTypeChanging(value);
					this.SendPropertyChanging();
					this._TaskType = value;
					this.SendPropertyChanged("TaskType");
					this.OnTaskTypeChanged();
				}
			}
		}
		
		[Column(Storage="_GB", DbType="Int NOT NULL")]
		public int GB
		{
			get
			{
				return this._GB;
			}
			set
			{
				if ((this._GB != value))
				{
					this.OnGBChanging(value);
					this.SendPropertyChanging();
					this._GB = value;
					this.SendPropertyChanged("GB");
					this.OnGBChanged();
				}
			}
		}
		
		[Association(Name="Task_Worker", Storage="_Worker", ThisKey="ID", OtherKey="TaskID")]
		public EntitySet<Worker> Worker
		{
			get
			{
				return this._Worker;
			}
			set
			{
				this._Worker.Assign(value);
			}
		}
		
		[Association(Name="CurrentUser_Task", Storage="_CurrentUser", ThisKey="CreateUserID", OtherKey="UID", IsForeignKey=true)]
		public CurrentUser CurrentUser
		{
			get
			{
				return this._CurrentUser.Entity;
			}
			set
			{
				CurrentUser previousValue = this._CurrentUser.Entity;
				if (((previousValue != value) 
							|| (this._CurrentUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CurrentUser.Entity = null;
						previousValue.Task.Remove(this);
					}
					this._CurrentUser.Entity = value;
					if ((value != null))
					{
						value.Task.Add(this);
						this._CreateUserID = value.UID;
					}
					else
					{
						this._CreateUserID = default(long);
					}
					this.SendPropertyChanged("CurrentUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Worker(Worker entity)
		{
			this.SendPropertyChanging();
			entity.Task = this;
		}
		
		private void detach_Worker(Worker entity)
		{
			this.SendPropertyChanging();
			entity.Task = null;
		}
	}
}
#pragma warning restore 1591
