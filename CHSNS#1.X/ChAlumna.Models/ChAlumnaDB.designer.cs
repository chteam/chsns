#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行库版本:2.0.50727.1433
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChAlumna.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="sq_menglei")]
	public partial class ChAlumnaDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertViewData(ViewData instance);
    partial void UpdateViewData(ViewData instance);
    partial void DeleteViewData(ViewData instance);
    partial void InsertAlbum(Album instance);
    partial void UpdateAlbum(Album instance);
    partial void DeleteAlbum(Album instance);
    partial void InsertApplication(Application instance);
    partial void UpdateApplication(Application instance);
    partial void DeleteApplication(Application instance);
    partial void InsertBasicInformation(BasicInformation instance);
    partial void UpdateBasicInformation(BasicInformation instance);
    partial void DeleteBasicInformation(BasicInformation instance);
    partial void InsertBlogs(Blogs instance);
    partial void UpdateBlogs(Blogs instance);
    partial void DeleteBlogs(Blogs instance);
    partial void Insertcategory(category instance);
    partial void Updatecategory(category instance);
    partial void Deletecategory(category instance);
    partial void InsertCity(City instance);
    partial void UpdateCity(City instance);
    partial void DeleteCity(City instance);
    partial void InsertComment(Comment instance);
    partial void UpdateComment(Comment instance);
    partial void DeleteComment(Comment instance);
    partial void InsertContactInformation(ContactInformation instance);
    partial void UpdateContactInformation(ContactInformation instance);
    partial void DeleteContactInformation(ContactInformation instance);
    partial void InsertDelLog(DelLog instance);
    partial void UpdateDelLog(DelLog instance);
    partial void DeleteDelLog(DelLog instance);
    partial void InsertEvent(Event instance);
    partial void UpdateEvent(Event instance);
    partial void DeleteEvent(Event instance);
    partial void InsertField(Field instance);
    partial void UpdateField(Field instance);
    partial void DeleteField(Field instance);
    partial void InsertFieldInformation(FieldInformation instance);
    partial void UpdateFieldInformation(FieldInformation instance);
    partial void DeleteFieldInformation(FieldInformation instance);
    partial void InsertFriend(Friend instance);
    partial void UpdateFriend(Friend instance);
    partial void DeleteFriend(Friend instance);
    partial void InsertGroup(Group instance);
    partial void UpdateGroup(Group instance);
    partial void DeleteGroup(Group instance);
    partial void InsertGroupUser(GroupUser instance);
    partial void UpdateGroupUser(GroupUser instance);
    partial void DeleteGroupUser(GroupUser instance);
    partial void InsertNote(Note instance);
    partial void UpdateNote(Note instance);
    partial void DeleteNote(Note instance);
    partial void InsertLogTag(LogTag instance);
    partial void UpdateLogTag(LogTag instance);
    partial void DeleteLogTag(LogTag instance);
    partial void InsertMessage(Message instance);
    partial void UpdateMessage(Message instance);
    partial void DeleteMessage(Message instance);
    partial void InsertMiniField(MiniField instance);
    partial void UpdateMiniField(MiniField instance);
    partial void DeleteMiniField(MiniField instance);
    partial void InsertPersonalInformation(PersonalInformation instance);
    partial void UpdatePersonalInformation(PersonalInformation instance);
    partial void DeletePersonalInformation(PersonalInformation instance);
    partial void InsertPhotos(Photos instance);
    partial void UpdatePhotos(Photos instance);
    partial void DeletePhotos(Photos instance);
    partial void InsertProfile(Profile instance);
    partial void UpdateProfile(Profile instance);
    partial void DeleteProfile(Profile instance);
    partial void InsertProvince(Province instance);
    partial void UpdateProvince(Province instance);
    partial void DeleteProvince(Province instance);
    partial void InsertPush(Push instance);
    partial void UpdatePush(Push instance);
    partial void DeletePush(Push instance);
    partial void InsertQinShi(QinShi instance);
    partial void UpdateQinShi(QinShi instance);
    partial void DeleteQinShi(QinShi instance);
    partial void InsertServices(Services instance);
    partial void UpdateServices(Services instance);
    partial void DeleteServices(Services instance);
    partial void InsertSuperNote(SuperNote instance);
    partial void UpdateSuperNote(SuperNote instance);
    partial void DeleteSuperNote(SuperNote instance);
    partial void InsertTags(Tags instance);
    partial void UpdateTags(Tags instance);
    partial void DeleteTags(Tags instance);
    #endregion
		
		public ChAlumnaDBDataContext() : 
				base(global::ChAlumna.Models.Properties.Settings.Default.sq_mengleiConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ChAlumnaDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ChAlumnaDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ChAlumnaDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ChAlumnaDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Account
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<ViewData> ViewData
		{
			get
			{
				return this.GetTable<ViewData>();
			}
		}
		
		public System.Data.Linq.Table<Album> Album
		{
			get
			{
				return this.GetTable<Album>();
			}
		}
		
		public System.Data.Linq.Table<Application> Application
		{
			get
			{
				return this.GetTable<Application>();
			}
		}
		
		public System.Data.Linq.Table<BasicInformation> BasicInformation
		{
			get
			{
				return this.GetTable<BasicInformation>();
			}
		}
		
		public System.Data.Linq.Table<Blogs> Blogs
		{
			get
			{
				return this.GetTable<Blogs>();
			}
		}
		
		public System.Data.Linq.Table<category> category
		{
			get
			{
				return this.GetTable<category>();
			}
		}
		
		public System.Data.Linq.Table<City> City
		{
			get
			{
				return this.GetTable<City>();
			}
		}
		
		public System.Data.Linq.Table<Comment> Comment
		{
			get
			{
				return this.GetTable<Comment>();
			}
		}
		
		public System.Data.Linq.Table<ContactInformation> ContactInformation
		{
			get
			{
				return this.GetTable<ContactInformation>();
			}
		}
		
		public System.Data.Linq.Table<DelLog> DelLog
		{
			get
			{
				return this.GetTable<DelLog>();
			}
		}
		
		public System.Data.Linq.Table<Event> Event
		{
			get
			{
				return this.GetTable<Event>();
			}
		}
		
		public System.Data.Linq.Table<Field> Field
		{
			get
			{
				return this.GetTable<Field>();
			}
		}
		
		public System.Data.Linq.Table<FieldInformation> FieldInformation
		{
			get
			{
				return this.GetTable<FieldInformation>();
			}
		}
		
		public System.Data.Linq.Table<Friend> Friend
		{
			get
			{
				return this.GetTable<Friend>();
			}
		}
		
		public System.Data.Linq.Table<Group> Group
		{
			get
			{
				return this.GetTable<Group>();
			}
		}
		
		public System.Data.Linq.Table<GroupUser> GroupUser
		{
			get
			{
				return this.GetTable<GroupUser>();
			}
		}
		
		public System.Data.Linq.Table<Note> Note
		{
			get
			{
				return this.GetTable<Note>();
			}
		}
		
		public System.Data.Linq.Table<LogTag> LogTag
		{
			get
			{
				return this.GetTable<LogTag>();
			}
		}
		
		public System.Data.Linq.Table<Message> Message
		{
			get
			{
				return this.GetTable<Message>();
			}
		}
		
		public System.Data.Linq.Table<MiniField> MiniField
		{
			get
			{
				return this.GetTable<MiniField>();
			}
		}
		
		public System.Data.Linq.Table<PersonalInformation> PersonalInformation
		{
			get
			{
				return this.GetTable<PersonalInformation>();
			}
		}
		
		public System.Data.Linq.Table<Photos> Photos
		{
			get
			{
				return this.GetTable<Photos>();
			}
		}
		
		public System.Data.Linq.Table<Profile> Profile
		{
			get
			{
				return this.GetTable<Profile>();
			}
		}
		
		public System.Data.Linq.Table<Province> Province
		{
			get
			{
				return this.GetTable<Province>();
			}
		}
		
		public System.Data.Linq.Table<Push> Push
		{
			get
			{
				return this.GetTable<Push>();
			}
		}
		
		public System.Data.Linq.Table<QinShi> QinShi
		{
			get
			{
				return this.GetTable<QinShi>();
			}
		}
		
		public System.Data.Linq.Table<Services> Services
		{
			get
			{
				return this.GetTable<Services>();
			}
		}
		
		public System.Data.Linq.Table<SuperNote> SuperNote
		{
			get
			{
				return this.GetTable<SuperNote>();
			}
		}
		
		public System.Data.Linq.Table<Tags> Tags
		{
			get
			{
				return this.GetTable<Tags>();
			}
		}
	}
	
	[Table(Name="dbo.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private System.Nullable<long> _userid;
		
		private string _name;
		
		private string _email;
		
		private string _password;
		
		private string _question;
		
		private string _answer;
		
		private System.Nullable<long> _code;
		
		private System.DateTime _logintime;
		
		private System.DateTime _regtime;
		
		private string _truepassword;
		
		private string _trueemail;
		
		private int _status;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnuseridChanging(System.Nullable<long> value);
    partial void OnuseridChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnquestionChanging(string value);
    partial void OnquestionChanged();
    partial void OnanswerChanging(string value);
    partial void OnanswerChanged();
    partial void OncodeChanging(System.Nullable<long> value);
    partial void OncodeChanged();
    partial void OnlogintimeChanging(System.DateTime value);
    partial void OnlogintimeChanged();
    partial void OnregtimeChanging(System.DateTime value);
    partial void OnregtimeChanged();
    partial void OntruepasswordChanging(string value);
    partial void OntruepasswordChanged();
    partial void OntrueemailChanging(string value);
    partial void OntrueemailChanged();
    partial void OnstatusChanging(int value);
    partial void OnstatusChanged();
    #endregion
		
		public Account()
		{
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_userid", DbType="BigInt")]
		public System.Nullable<long> userid
		{
			get
			{
				return this._userid;
			}
			set
			{
				if ((this._userid != value))
				{
					this.OnuseridChanging(value);
					this.SendPropertyChanging();
					this._userid = value;
					this.SendPropertyChanged("userid");
					this.OnuseridChanged();
				}
			}
		}
		
		[Column(Storage="_name", DbType="NVarChar(12) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[Column(Storage="_email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[Column(Storage="_password", DbType="Char(32) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[Column(Storage="_question", DbType="NVarChar(50)")]
		public string question
		{
			get
			{
				return this._question;
			}
			set
			{
				if ((this._question != value))
				{
					this.OnquestionChanging(value);
					this.SendPropertyChanging();
					this._question = value;
					this.SendPropertyChanged("question");
					this.OnquestionChanged();
				}
			}
		}
		
		[Column(Storage="_answer", DbType="Char(32)")]
		public string answer
		{
			get
			{
				return this._answer;
			}
			set
			{
				if ((this._answer != value))
				{
					this.OnanswerChanging(value);
					this.SendPropertyChanging();
					this._answer = value;
					this.SendPropertyChanged("answer");
					this.OnanswerChanged();
				}
			}
		}
		
		[Column(Storage="_code", DbType="BigInt")]
		public System.Nullable<long> code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this.OncodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("code");
					this.OncodeChanged();
				}
			}
		}
		
		[Column(Storage="_logintime", DbType="SmallDateTime NOT NULL")]
		public System.DateTime logintime
		{
			get
			{
				return this._logintime;
			}
			set
			{
				if ((this._logintime != value))
				{
					this.OnlogintimeChanging(value);
					this.SendPropertyChanging();
					this._logintime = value;
					this.SendPropertyChanged("logintime");
					this.OnlogintimeChanged();
				}
			}
		}
		
		[Column(Storage="_regtime", DbType="SmallDateTime NOT NULL")]
		public System.DateTime regtime
		{
			get
			{
				return this._regtime;
			}
			set
			{
				if ((this._regtime != value))
				{
					this.OnregtimeChanging(value);
					this.SendPropertyChanging();
					this._regtime = value;
					this.SendPropertyChanged("regtime");
					this.OnregtimeChanged();
				}
			}
		}
		
		[Column(Storage="_truepassword", DbType="Char(32) NOT NULL", CanBeNull=false)]
		public string truepassword
		{
			get
			{
				return this._truepassword;
			}
			set
			{
				if ((this._truepassword != value))
				{
					this.OntruepasswordChanging(value);
					this.SendPropertyChanging();
					this._truepassword = value;
					this.SendPropertyChanged("truepassword");
					this.OntruepasswordChanged();
				}
			}
		}
		
		[Column(Storage="_trueemail", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string trueemail
		{
			get
			{
				return this._trueemail;
			}
			set
			{
				if ((this._trueemail != value))
				{
					this.OntrueemailChanging(value);
					this.SendPropertyChanging();
					this._trueemail = value;
					this.SendPropertyChanged("trueemail");
					this.OntrueemailChanged();
				}
			}
		}
		
		[Column(Storage="_status", DbType="Int NOT NULL")]
		public int status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ViewData")]
	public partial class ViewData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private long _Ownerid;
		
		private long _Viewerid;
		
		private string _IpandComputer;
		
		private string _ViewPageUrl;
		
		private string _LastUrl;
		
		private System.DateTime _ViewTime;
		
		private byte _ViewClass;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnOwneridChanging(long value);
    partial void OnOwneridChanged();
    partial void OnVieweridChanging(long value);
    partial void OnVieweridChanged();
    partial void OnIpandComputerChanging(string value);
    partial void OnIpandComputerChanged();
    partial void OnViewPageUrlChanging(string value);
    partial void OnViewPageUrlChanged();
    partial void OnLastUrlChanging(string value);
    partial void OnLastUrlChanged();
    partial void OnViewTimeChanging(System.DateTime value);
    partial void OnViewTimeChanged();
    partial void OnViewClassChanging(byte value);
    partial void OnViewClassChanged();
    #endregion
		
		public ViewData()
		{
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_Ownerid", DbType="BigInt NOT NULL")]
		public long Ownerid
		{
			get
			{
				return this._Ownerid;
			}
			set
			{
				if ((this._Ownerid != value))
				{
					this.OnOwneridChanging(value);
					this.SendPropertyChanging();
					this._Ownerid = value;
					this.SendPropertyChanged("Ownerid");
					this.OnOwneridChanged();
				}
			}
		}
		
		[Column(Storage="_Viewerid", DbType="BigInt NOT NULL")]
		public long Viewerid
		{
			get
			{
				return this._Viewerid;
			}
			set
			{
				if ((this._Viewerid != value))
				{
					this.OnVieweridChanging(value);
					this.SendPropertyChanging();
					this._Viewerid = value;
					this.SendPropertyChanged("Viewerid");
					this.OnVieweridChanged();
				}
			}
		}
		
		[Column(Storage="_IpandComputer", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string IpandComputer
		{
			get
			{
				return this._IpandComputer;
			}
			set
			{
				if ((this._IpandComputer != value))
				{
					this.OnIpandComputerChanging(value);
					this.SendPropertyChanging();
					this._IpandComputer = value;
					this.SendPropertyChanged("IpandComputer");
					this.OnIpandComputerChanged();
				}
			}
		}
		
		[Column(Storage="_ViewPageUrl", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ViewPageUrl
		{
			get
			{
				return this._ViewPageUrl;
			}
			set
			{
				if ((this._ViewPageUrl != value))
				{
					this.OnViewPageUrlChanging(value);
					this.SendPropertyChanging();
					this._ViewPageUrl = value;
					this.SendPropertyChanged("ViewPageUrl");
					this.OnViewPageUrlChanged();
				}
			}
		}
		
		[Column(Storage="_LastUrl", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string LastUrl
		{
			get
			{
				return this._LastUrl;
			}
			set
			{
				if ((this._LastUrl != value))
				{
					this.OnLastUrlChanging(value);
					this.SendPropertyChanging();
					this._LastUrl = value;
					this.SendPropertyChanged("LastUrl");
					this.OnLastUrlChanged();
				}
			}
		}
		
		[Column(Storage="_ViewTime", DbType="DateTime NOT NULL")]
		public System.DateTime ViewTime
		{
			get
			{
				return this._ViewTime;
			}
			set
			{
				if ((this._ViewTime != value))
				{
					this.OnViewTimeChanging(value);
					this.SendPropertyChanging();
					this._ViewTime = value;
					this.SendPropertyChanged("ViewTime");
					this.OnViewTimeChanged();
				}
			}
		}
		
		[Column(Storage="_ViewClass", DbType="TinyInt NOT NULL")]
		public byte ViewClass
		{
			get
			{
				return this._ViewClass;
			}
			set
			{
				if ((this._ViewClass != value))
				{
					this.OnViewClassChanging(value);
					this.SendPropertyChanging();
					this._ViewClass = value;
					this.SendPropertyChanged("ViewClass");
					this.OnViewClassChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Album")]
	public partial class Album : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _trueid;
		
		private System.Nullable<long> _id;
		
		private long _userid;
		
		private string _name;
		
		private byte _Showlevel;
		
		private string _Description;
		
		private System.DateTime _Addtime;
		
		private int _Order;
		
		private string _Location;
		
		private string _faceurl;
		
		private int _Count;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntrueidChanging(long value);
    partial void OntrueidChanged();
    partial void OnidChanging(System.Nullable<long> value);
    partial void OnidChanged();
    partial void OnuseridChanging(long value);
    partial void OnuseridChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnShowlevelChanging(byte value);
    partial void OnShowlevelChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnAddtimeChanging(System.DateTime value);
    partial void OnAddtimeChanged();
    partial void OnOrderChanging(int value);
    partial void OnOrderChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnfaceurlChanging(string value);
    partial void OnfaceurlChanged();
    partial void OnCountChanging(int value);
    partial void OnCountChanged();
    #endregion
		
		public Album()
		{
			OnCreated();
		}
		
		[Column(Storage="_trueid", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long trueid
		{
			get
			{
				return this._trueid;
			}
			set
			{
				if ((this._trueid != value))
				{
					this.OntrueidChanging(value);
					this.SendPropertyChanging();
					this._trueid = value;
					this.SendPropertyChanged("trueid");
					this.OntrueidChanged();
				}
			}
		}
		
		[Column(Storage="_id", DbType="BigInt")]
		public System.Nullable<long> id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_userid", DbType="BigInt NOT NULL")]
		public long userid
		{
			get
			{
				return this._userid;
			}
			set
			{
				if ((this._userid != value))
				{
					this.OnuseridChanging(value);
					this.SendPropertyChanging();
					this._userid = value;
					this.SendPropertyChanged("userid");
					this.OnuseridChanged();
				}
			}
		}
		
		[Column(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[Column(Storage="_Showlevel", DbType="TinyInt NOT NULL")]
		public byte Showlevel
		{
			get
			{
				return this._Showlevel;
			}
			set
			{
				if ((this._Showlevel != value))
				{
					this.OnShowlevelChanging(value);
					this.SendPropertyChanging();
					this._Showlevel = value;
					this.SendPropertyChanged("Showlevel");
					this.OnShowlevelChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Addtime", DbType="SmallDateTime NOT NULL")]
		public System.DateTime Addtime
		{
			get
			{
				return this._Addtime;
			}
			set
			{
				if ((this._Addtime != value))
				{
					this.OnAddtimeChanging(value);
					this.SendPropertyChanging();
					this._Addtime = value;
					this.SendPropertyChanged("Addtime");
					this.OnAddtimeChanged();
				}
			}
		}
		
		[Column(Name="[Order]", Storage="_Order", DbType="Int NOT NULL")]
		public int Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[Column(Storage="_Location", DbType="NVarChar(50)")]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[Column(Storage="_faceurl", DbType="NVarChar(250)")]
		public string faceurl
		{
			get
			{
				return this._faceurl;
			}
			set
			{
				if ((this._faceurl != value))
				{
					this.OnfaceurlChanging(value);
					this.SendPropertyChanging();
					this._faceurl = value;
					this.SendPropertyChanged("faceurl");
					this.OnfaceurlChanged();
				}
			}
		}
		
		[Column(Storage="_Count", DbType="Int NOT NULL")]
		public int Count
		{
			get
			{
				return this._Count;
			}
			set
			{
				if ((this._Count != value))
				{
					this.OnCountChanging(value);
					this.SendPropertyChanging();
					this._Count = value;
					this.SendPropertyChanged("Count");
					this.OnCountChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Application")]
	public partial class Application : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _id;
		
		private string _fullname;
		
		private string _shortname;
		
		private string _Folder;
		
		private string _Vision;
		
		private string _icon;
		
		private System.Nullable<long> _Authorid;
		
		private System.DateTime _Addtime;
		
		private System.DateTime _Edittime;
		
		private string _Description;
		
		private bool _isSystem;
		
		private bool _isTrue;
		
		private string _DescriptionUrl;
		
		private long _UserCount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(string value);
    partial void OnidChanged();
    partial void OnfullnameChanging(string value);
    partial void OnfullnameChanged();
    partial void OnshortnameChanging(string value);
    partial void OnshortnameChanged();
    partial void OnFolderChanging(string value);
    partial void OnFolderChanged();
    partial void OnVisionChanging(string value);
    partial void OnVisionChanged();
    partial void OniconChanging(string value);
    partial void OniconChanged();
    partial void OnAuthoridChanging(System.Nullable<long> value);
    partial void OnAuthoridChanged();
    partial void OnAddtimeChanging(System.DateTime value);
    partial void OnAddtimeChanged();
    partial void OnEdittimeChanging(System.DateTime value);
    partial void OnEdittimeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnisSystemChanging(bool value);
    partial void OnisSystemChanged();
    partial void OnisTrueChanging(bool value);
    partial void OnisTrueChanged();
    partial void OnDescriptionUrlChanging(string value);
    partial void OnDescriptionUrlChanged();
    partial void OnUserCountChanging(long value);
    partial void OnUserCountChanged();
    #endregion
		
		public Application()
		{
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_fullname", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string fullname
		{
			get
			{
				return this._fullname;
			}
			set
			{
				if ((this._fullname != value))
				{
					this.OnfullnameChanging(value);
					this.SendPropertyChanging();
					this._fullname = value;
					this.SendPropertyChanged("fullname");
					this.OnfullnameChanged();
				}
			}
		}
		
		[Column(Storage="_shortname", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string shortname
		{
			get
			{
				return this._shortname;
			}
			set
			{
				if ((this._shortname != value))
				{
					this.OnshortnameChanging(value);
					this.SendPropertyChanging();
					this._shortname = value;
					this.SendPropertyChanged("shortname");
					this.OnshortnameChanged();
				}
			}
		}
		
		[Column(Storage="_Folder", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Folder
		{
			get
			{
				return this._Folder;
			}
			set
			{
				if ((this._Folder != value))
				{
					this.OnFolderChanging(value);
					this.SendPropertyChanging();
					this._Folder = value;
					this.SendPropertyChanged("Folder");
					this.OnFolderChanged();
				}
			}
		}
		
		[Column(Storage="_Vision", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Vision
		{
			get
			{
				return this._Vision;
			}
			set
			{
				if ((this._Vision != value))
				{
					this.OnVisionChanging(value);
					this.SendPropertyChanging();
					this._Vision = value;
					this.SendPropertyChanged("Vision");
					this.OnVisionChanged();
				}
			}
		}
		
		[Column(Storage="_icon", DbType="NVarChar(250)")]
		public string icon
		{
			get
			{
				return this._icon;
			}
			set
			{
				if ((this._icon != value))
				{
					this.OniconChanging(value);
					this.SendPropertyChanging();
					this._icon = value;
					this.SendPropertyChanged("icon");
					this.OniconChanged();
				}
			}
		}
		
		[Column(Storage="_Authorid", DbType="BigInt")]
		public System.Nullable<long> Authorid
		{
			get
			{
				return this._Authorid;
			}
			set
			{
				if ((this._Authorid != value))
				{
					this.OnAuthoridChanging(value);
					this.SendPropertyChanging();
					this._Authorid = value;
					this.SendPropertyChanged("Authorid");
					this.OnAuthoridChanged();
				}
			}
		}
		
		[Column(Storage="_Addtime", DbType="SmallDateTime NOT NULL")]
		public System.DateTime Addtime
		{
			get
			{
				return this._Addtime;
			}
			set
			{
				if ((this._Addtime != value))
				{
					this.OnAddtimeChanging(value);
					this.SendPropertyChanging();
					this._Addtime = value;
					this.SendPropertyChanged("Addtime");
					this.OnAddtimeChanged();
				}
			}
		}
		
		[Column(Storage="_Edittime", DbType="SmallDateTime NOT NULL")]
		public System.DateTime Edittime
		{
			get
			{
				return this._Edittime;
			}
			set
			{
				if ((this._Edittime != value))
				{
					this.OnEdittimeChanging(value);
					this.SendPropertyChanging();
					this._Edittime = value;
					this.SendPropertyChanged("Edittime");
					this.OnEdittimeChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_isSystem", DbType="Bit NOT NULL")]
		public bool isSystem
		{
			get
			{
				return this._isSystem;
			}
			set
			{
				if ((this._isSystem != value))
				{
					this.OnisSystemChanging(value);
					this.SendPropertyChanging();
					this._isSystem = value;
					this.SendPropertyChanged("isSystem");
					this.OnisSystemChanged();
				}
			}
		}
		
		[Column(Storage="_isTrue", DbType="Bit NOT NULL")]
		public bool isTrue
		{
			get
			{
				return this._isTrue;
			}
			set
			{
				if ((this._isTrue != value))
				{
					this.OnisTrueChanging(value);
					this.SendPropertyChanging();
					this._isTrue = value;
					this.SendPropertyChanged("isTrue");
					this.OnisTrueChanged();
				}
			}
		}
		
		[Column(Storage="_DescriptionUrl", DbType="NVarChar(250)")]
		public string DescriptionUrl
		{
			get
			{
				return this._DescriptionUrl;
			}
			set
			{
				if ((this._DescriptionUrl != value))
				{
					this.OnDescriptionUrlChanging(value);
					this.SendPropertyChanging();
					this._DescriptionUrl = value;
					this.SendPropertyChanged("DescriptionUrl");
					this.OnDescriptionUrlChanged();
				}
			}
		}
		
		[Column(Storage="_UserCount", DbType="BigInt NOT NULL")]
		public long UserCount
		{
			get
			{
				return this._UserCount;
			}
			set
			{
				if ((this._UserCount != value))
				{
					this.OnUserCountChanging(value);
					this.SendPropertyChanging();
					this._UserCount = value;
					this.SendPropertyChanged("UserCount");
					this.OnUserCountChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BasicInformation")]
	public partial class BasicInformation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _userid;
		
		private System.Nullable<bool> _Sex;
		
		private System.Nullable<System.DateTime> _BirthDay;
		
		private int _Province;
		
		private long _City;
		
		private EntityRef<Profile> _Profile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuseridChanging(long value);
    partial void OnuseridChanged();
    partial void OnSexChanging(System.Nullable<bool> value);
    partial void OnSexChanged();
    partial void OnBirthDayChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthDayChanged();
    partial void OnProvinceChanging(int value);
    partial void OnProvinceChanged();
    partial void OnCityChanging(long value);
    partial void OnCityChanged();
    #endregion
		
		public BasicInformation()
		{
			this._Profile = default(EntityRef<Profile>);
			OnCreated();
		}
		
		[Column(Storage="_userid", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long userid
		{
			get
			{
				return this._userid;
			}
			set
			{
				if ((this._userid != value))
				{
					if (this._Profile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuseridChanging(value);
					this.SendPropertyChanging();
					this._userid = value;
					this.SendPropertyChanged("userid");
					this.OnuseridChanged();
				}
			}
		}
		
		[Column(Storage="_Sex", DbType="Bit")]
		public System.Nullable<bool> Sex
		{
			get
			{
				return this._Sex;
			}
			set
			{
				if ((this._Sex != value))
				{
					this.OnSexChanging(value);
					this.SendPropertyChanging();
					this._Sex = value;
					this.SendPropertyChanged("Sex");
					this.OnSexChanged();
				}
			}
		}
		
		[Column(Storage="_BirthDay", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> BirthDay
		{
			get
			{
				return this._BirthDay;
			}
			set
			{
				if ((this._BirthDay != value))
				{
					this.OnBirthDayChanging(value);
					this.SendPropertyChanging();
					this._BirthDay = value;
					this.SendPropertyChanged("BirthDay");
					this.OnBirthDayChanged();
				}
			}
		}
		
		[Column(Storage="_Province", DbType="Int NOT NULL")]
		public int Province
		{
			get
			{
				return this._Province;
			}
			set
			{
				if ((this._Province != value))
				{
					this.OnProvinceChanging(value);
					this.SendPropertyChanging();
					this._Province = value;
					this.SendPropertyChanged("Province");
					this.OnProvinceChanged();
				}
			}
		}
		
		[Column(Storage="_City", DbType="BigInt NOT NULL")]
		public long City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[Association(Name="Profile_BasicInformation", Storage="_Profile", ThisKey="userid", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Profile Profile
		{
			get
			{
				return this._Profile.Entity;
			}
			set
			{
				Profile previousValue = this._Profile.Entity;
				if (((previousValue != value) 
							|| (this._Profile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Profile.Entity = null;
						previousValue.BasicInformation = null;
					}
					this._Profile.Entity = value;
					if ((value != null))
					{
						value.BasicInformation = this;
						this._userid = value.UserId;
					}
					else
					{
						this._userid = default(long);
					}
					this.SendPropertyChanged("Profile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Blogs")]
	public partial class Blogs : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _userid;
		
		private System.DateTime _CreateTime;
		
		private string _Title;
		
		private string _SubTitle;
		
		private string _Publish;
		
		private string _WriteName;
		
		private string _CommentEmail;
		
		private string _Skin;
		
		private string _Css;
		
		private string _MetaKey;
		
		private bool _IsWebServices;
		
		private long _PostCount;
		
		private long _CommentCount;
		
		private long _TrackBackCount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuseridChanging(long value);
    partial void OnuseridChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnSubTitleChanging(string value);
    partial void OnSubTitleChanged();
    partial void OnPublishChanging(string value);
    partial void OnPublishChanged();
    partial void OnWriteNameChanging(string value);
    partial void OnWriteNameChanged();
    partial void OnCommentEmailChanging(string value);
    partial void OnCommentEmailChanged();
    partial void OnSkinChanging(string value);
    partial void OnSkinChanged();
    partial void OnCssChanging(string value);
    partial void OnCssChanged();
    partial void OnMetaKeyChanging(string value);
    partial void OnMetaKeyChanged();
    partial void OnIsWebServicesChanging(bool value);
    partial void OnIsWebServicesChanged();
    partial void OnPostCountChanging(long value);
    partial void OnPostCountChanged();
    partial void OnCommentCountChanging(long value);
    partial void OnCommentCountChanged();
    partial void OnTrackBackCountChanging(long value);
    partial void OnTrackBackCountChanged();
    #endregion
		
		public Blogs()
		{
			OnCreated();
		}
		
		[Column(Storage="_userid", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long userid
		{
			get
			{
				return this._userid;
			}
			set
			{
				if ((this._userid != value))
				{
					this.OnuseridChanging(value);
					this.SendPropertyChanging();
					this._userid = value;
					this.SendPropertyChanged("userid");
					this.OnuseridChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="SmallDateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_SubTitle", DbType="NVarChar(500)")]
		public string SubTitle
		{
			get
			{
				return this._SubTitle;
			}
			set
			{
				if ((this._SubTitle != value))
				{
					this.OnSubTitleChanging(value);
					this.SendPropertyChanging();
					this._SubTitle = value;
					this.SendPropertyChanged("SubTitle");
					this.OnSubTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Publish", DbType="NVarChar(MAX)")]
		public string Publish
		{
			get
			{
				return this._Publish;
			}
			set
			{
				if ((this._Publish != value))
				{
					this.OnPublishChanging(value);
					this.SendPropertyChanging();
					this._Publish = value;
					this.SendPropertyChanged("Publish");
					this.OnPublishChanged();
				}
			}
		}
		
		[Column(Storage="_WriteName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string WriteName
		{
			get
			{
				return this._WriteName;
			}
			set
			{
				if ((this._WriteName != value))
				{
					this.OnWriteNameChanging(value);
					this.SendPropertyChanging();
					this._WriteName = value;
					this.SendPropertyChanged("WriteName");
					this.OnWriteNameChanged();
				}
			}
		}
		
		[Column(Storage="_CommentEmail", DbType="NVarChar(50)")]
		public string CommentEmail
		{
			get
			{
				return this._CommentEmail;
			}
			set
			{
				if ((this._CommentEmail != value))
				{
					this.OnCommentEmailChanging(value);
					this.SendPropertyChanging();
					this._CommentEmail = value;
					this.SendPropertyChanged("CommentEmail");
					this.OnCommentEmailChanged();
				}
			}
		}
		
		[Column(Storage="_Skin", DbType="NVarChar(50)")]
		public string Skin
		{
			get
			{
				return this._Skin;
			}
			set
			{
				if ((this._Skin != value))
				{
					this.OnSkinChanging(value);
					this.SendPropertyChanging();
					this._Skin = value;
					this.SendPropertyChanged("Skin");
					this.OnSkinChanged();
				}
			}
		}
		
		[Column(Storage="_Css", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Css
		{
			get
			{
				return this._Css;
			}
			set
			{
				if ((this._Css != value))
				{
					this.OnCssChanging(value);
					this.SendPropertyChanging();
					this._Css = value;
					this.SendPropertyChanged("Css");
					this.OnCssChanged();
				}
			}
		}
		
		[Column(Storage="_MetaKey", DbType="NVarChar(400)")]
		public string MetaKey
		{
			get
			{
				return this._MetaKey;
			}
			set
			{
				if ((this._MetaKey != value))
				{
					this.OnMetaKeyChanging(value);
					this.SendPropertyChanging();
					this._MetaKey = value;
					this.SendPropertyChanged("MetaKey");
					this.OnMetaKeyChanged();
				}
			}
		}
		
		[Column(Storage="_IsWebServices", DbType="Bit NOT NULL")]
		public bool IsWebServices
		{
			get
			{
				return this._IsWebServices;
			}
			set
			{
				if ((this._IsWebServices != value))
				{
					this.OnIsWebServicesChanging(value);
					this.SendPropertyChanging();
					this._IsWebServices = value;
					this.SendPropertyChanged("IsWebServices");
					this.OnIsWebServicesChanged();
				}
			}
		}
		
		[Column(Storage="_PostCount", DbType="BigInt NOT NULL")]
		public long PostCount
		{
			get
			{
				return this._PostCount;
			}
			set
			{
				if ((this._PostCount != value))
				{
					this.OnPostCountChanging(value);
					this.SendPropertyChanging();
					this._PostCount = value;
					this.SendPropertyChanged("PostCount");
					this.OnPostCountChanged();
				}
			}
		}
		
		[Column(Storage="_CommentCount", DbType="BigInt NOT NULL")]
		public long CommentCount
		{
			get
			{
				return this._CommentCount;
			}
			set
			{
				if ((this._CommentCount != value))
				{
					this.OnCommentCountChanging(value);
					this.SendPropertyChanging();
					this._CommentCount = value;
					this.SendPropertyChanged("CommentCount");
					this.OnCommentCountChanged();
				}
			}
		}
		
		[Column(Storage="_TrackBackCount", DbType="BigInt NOT NULL")]
		public long TrackBackCount
		{
			get
			{
				return this._TrackBackCount;
			}
			set
			{
				if ((this._TrackBackCount != value))
				{
					this.OnTrackBackCountChanging(value);
					this.SendPropertyChanging();
					this._TrackBackCount = value;
					this.SendPropertyChanged("TrackBackCount");
					this.OnTrackBackCountChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.category")]
	public partial class category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _trueid;
		
		private System.Nullable<long> _id;
		
		private string _name;
		
		private byte _type;
		
		private long _Count;
		
		private System.Nullable<long> _userid;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntrueidChanging(long value);
    partial void OntrueidChanged();
    partial void OnidChanging(System.Nullable<long> value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OntypeChanging(byte value);
    partial void OntypeChanged();
    partial void OnCountChanging(long value);
    partial void OnCountChanged();
    partial void OnuseridChanging(System.Nullable<long> value);
    partial void OnuseridChanged();
    #endregion
		
		public category()
		{
			OnCreated();
		}
		
		[Column(Storage="_trueid", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long trueid
		{
			get
			{
				return this._trueid;
			}
			set
			{
				if ((this._trueid != value))
				{
					this.OntrueidChanging(value);
					this.SendPropertyChanging();
					this._trueid = value;
					this.SendPropertyChanged("trueid");
					this.OntrueidChanged();
				}
			}
		}
		
		[Column(Storage="_id", DbType="BigInt")]
		public System.Nullable<long> id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[Column(Storage="_type", DbType="TinyInt NOT NULL")]
		public byte type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[Column(Storage="_Count", DbType="BigInt NOT NULL")]
		public long Count
		{
			get
			{
				return this._Count;
			}
			set
			{
				if ((this._Count != value))
				{
					this.OnCountChanging(value);
					this.SendPropertyChanging();
					this._Count = value;
					this.SendPropertyChanged("Count");
					this.OnCountChanged();
				}
			}
		}
		
		[Column(Storage="_userid", DbType="BigInt")]
		public System.Nullable<long> userid
		{
			get
			{
				return this._userid;
			}
			set
			{
				if ((this._userid != value))
				{
					this.OnuseridChanging(value);
					this.SendPropertyChanging();
					this._userid = value;
					this.SendPropertyChanged("userid");
					this.OnuseridChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.City")]
	public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _trueid;
		
		private System.Nullable<long> _id;
		
		private string _name;
		
		private int _pid;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntrueidChanging(long value);
    partial void OntrueidChanged();
    partial void OnidChanging(System.Nullable<long> value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnpidChanging(int value);
    partial void OnpidChanged();
    #endregion
		
		public City()
		{
			OnCreated();
		}
		
		[Column(Storage="_trueid", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long trueid
		{
			get
			{
				return this._trueid;
			}
			set
			{
				if ((this._trueid != value))
				{
					this.OntrueidChanging(value);
					this.SendPropertyChanging();
					this._trueid = value;
					this.SendPropertyChanged("trueid");
					this.OntrueidChanged();
				}
			}
		}
		
		[Column(Storage="_id", DbType="BigInt")]
		public System.Nullable<long> id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_name", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[Column(Storage="_pid", DbType="Int NOT NULL")]
		public int pid
		{
			get
			{
				return this._pid;
			}
			set
			{
				if ((this._pid != value))
				{
					this.OnpidChanging(value);
					this.SendPropertyChanging();
					this._pid = value;
					this.SendPropertyChanged("pid");
					this.OnpidChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Comment")]
	public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _trueid;
		
		private System.Nullable<long> _id;
		
		private System.Nullable<long> _Logid;
		
		private long _ownerid;
		
		private long _senderid;
		
		private System.DateTime _addtime;
		
		private string _body;
		
		private bool _IsReply;
		
		private bool _IsSee;
		
		private bool _IsDel;
		
		private byte _type;
		
		private byte _istellme;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntrueidChanging(long value);
    partial void OntrueidChanged();
    partial void OnidChanging(System.Nullable<long> value);
    partial void OnidChanged();
    partial void OnLogidChanging(System.Nullable<long> value);
    partial void OnLogidChanged();
    partial void OnowneridChanging(long value);
    partial void OnowneridChanged();
    partial void OnsenderidChanging(long value);
    partial void OnsenderidChanged();
    partial void OnaddtimeChanging(System.DateTime value);
    partial void OnaddtimeChanged();
    partial void OnbodyChanging(string value);
    partial void OnbodyChanged();
    partial void OnIsReplyChanging(bool value);
    partial void OnIsReplyChanged();
    partial void OnIsSeeChanging(bool value);
    partial void OnIsSeeChanged();
    partial void OnIsDelChanging(bool value);
    partial void OnIsDelChanged();
    partial void OntypeChanging(byte value);
    partial void OntypeChanged();
    partial void OnistellmeChanging(byte value);
    partial void OnistellmeChanged();
    #endregion
		
		public Comment()
		{
			OnCreated();
		}
		
		[Column(Storage="_trueid", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long trueid
		{
			get
			{
				return this._trueid;
			}
			set
			{
				if ((this._trueid != value))
				{
					this.OntrueidChanging(value);
					this.SendPropertyChanging();
					this._trueid = value;
					this.SendPropertyChanged("trueid");
					this.OntrueidChanged();
				}
			}
		}
		
		[Column(Storage="_id", DbType="BigInt")]
		public System.Nullable<long> id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_Logid", DbType="BigInt")]
		public System.Nullable<long> Logid
		{
			get
			{
				return this._Logid;
			}
			set
			{
				if ((this._Logid != value))
				{
					this.OnLogidChanging(value);
					this.SendPropertyChanging();
					this._Logid = value;
					this.SendPropertyChanged("Logid");
					this.OnLogidChanged();
				}
			}
		}
		
		[Column(Storage="_ownerid", DbType="BigInt NOT NULL")]
		public long ownerid
		{
			get
			{
				return this._ownerid;
			}
			set
			{
				if ((this._ownerid != value))
				{
					this.OnowneridChanging(value);
					this.SendPropertyChanging();
					this._ownerid = value;
					this.SendPropertyChanged("ownerid");
					this.OnowneridChanged();
				}
			}
		}
		
		[Column(Storage="_senderid", DbType="BigInt NOT NULL")]
		public long senderid
		{
			get
			{
				return this._senderid;
			}
			set
			{
				if ((this._senderid != value))
				{
					this.OnsenderidChanging(value);
					this.SendPropertyChanging();
					this._senderid = value;
					this.SendPropertyChanged("senderid");
					this.OnsenderidChanged();
				}
			}
		}
		
		[Column(Storage="_addtime", DbType="SmallDateTime NOT NULL")]
		public System.DateTime addtime
		{
			get
			{
				return this._addtime;
			}
			set
			{
				if ((this._addtime != value))
				{
					this.OnaddtimeChanging(value);
					this.SendPropertyChanging();
					this._addtime = value;
					this.SendPropertyChanged("addtime");
					this.OnaddtimeChanged();
				}
			}
		}
		
		[Column(Storage="_body", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string body
		{
			get
			{
				return this._body;
			}
			set
			{
				if ((this._body != value))
				{
					this.OnbodyChanging(value);
					this.SendPropertyChanging();
					this._body = value;
					this.SendPropertyChanged("body");
					this.OnbodyChanged();
				}
			}
		}
		
		[Column(Storage="_IsReply", DbType="Bit NOT NULL")]
		public bool IsReply
		{
			get
			{
				return this._IsReply;
			}
			set
			{
				if ((this._IsReply != value))
				{
					this.OnIsReplyChanging(value);
					this.SendPropertyChanging();
					this._IsReply = value;
					this.SendPropertyChanged("IsReply");
					this.OnIsReplyChanged();
				}
			}
		}
		
		[Column(Storage="_IsSee", DbType="Bit NOT NULL")]
		public bool IsSee
		{
			get
			{
				return this._IsSee;
			}
			set
			{
				if ((this._IsSee != value))
				{
					this.OnIsSeeChanging(value);
					this.SendPropertyChanging();
					this._IsSee = value;
					this.SendPropertyChanged("IsSee");
					this.OnIsSeeChanged();
				}
			}
		}
		
		[Column(Storage="_IsDel", DbType="Bit NOT NULL")]
		public bool IsDel
		{
			get
			{
				return this._IsDel;
			}
			set
			{
				if ((this._IsDel != value))
				{
					this.OnIsDelChanging(value);
					this.SendPropertyChanging();
					this._IsDel = value;
					this.SendPropertyChanged("IsDel");
					this.OnIsDelChanged();
				}
			}
		}
		
		[Column(Storage="_type", DbType="TinyInt NOT NULL")]
		public byte type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[Column(Storage="_istellme", DbType="TinyInt NOT NULL")]
		public byte istellme
		{
			get
			{
				return this._istellme;
			}
			set
			{
				if ((this._istellme != value))
				{
					this.OnistellmeChanging(value);
					this.SendPropertyChanging();
					this._istellme = value;
					this.SendPropertyChanged("istellme");
					this.OnistellmeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ContactInformation")]
	public partial class ContactInformation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _userid;
		
		private string _Address;
		
		private string _QQ;
		
		private string _Msn;
		
		private string _WangWang;
		
		private string _NeteasePop;
		
		private string _UC;
		
		private string _Telphone;
		
		private string _Mobiephone;
		
		private string _WebSite;
		
		private byte _TellMethod;
		
		private EntityRef<Profile> _Profile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuseridChanging(long value);
    partial void OnuseridChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnQQChanging(string value);
    partial void OnQQChanged();
    partial void OnMsnChanging(string value);
    partial void OnMsnChanged();
    partial void OnWangWangChanging(string value);
    partial void OnWangWangChanged();
    partial void OnNeteasePopChanging(string value);
    partial void OnNeteasePopChanged();
    partial void OnUCChanging(string value);
    partial void OnUCChanged();
    partial void OnTelphoneChanging(string value);
    partial void OnTelphoneChanged();
    partial void OnMobiephoneChanging(string value);
    partial void OnMobiephoneChanged();
    partial void OnWebSiteChanging(string value);
    partial void OnWebSiteChanged();
    partial void OnTellMethodChanging(byte value);
    partial void OnTellMethodChanged();
    #endregion
		
		public ContactInformation()
		{
			this._Profile = default(EntityRef<Profile>);
			OnCreated();
		}
		
		[Column(Storage="_userid", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long userid
		{
			get
			{
				return this._userid;
			}
			set
			{
				if ((this._userid != value))
				{
					if (this._Profile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuseridChanging(value);
					this.SendPropertyChanging();
					this._userid = value;
					this.SendPropertyChanged("userid");
					this.OnuseridChanged();
				}
			}
		}
		
		[Column(Storage="_Address", DbType="NVarChar(100)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Column(Storage="_QQ", DbType="NVarChar(50)")]
		public string QQ
		{
			get
			{
				return this._QQ;
			}
			set
			{
				if ((this._QQ != value))
				{
					this.OnQQChanging(value);
					this.SendPropertyChanging();
					this._QQ = value;
					this.SendPropertyChanged("QQ");
					this.OnQQChanged();
				}
			}
		}
		
		[Column(Storage="_Msn", DbType="NVarChar(50)")]
		public string Msn
		{
			get
			{
				return this._Msn;
			}
			set
			{
				if ((this._Msn != value))
				{
					this.OnMsnChanging(value);
					this.SendPropertyChanging();
					this._Msn = value;
					this.SendPropertyChanged("Msn");
					this.OnMsnChanged();
				}
			}
		}
		
		[Column(Storage="_WangWang", DbType="NVarChar(50)")]
		public string WangWang
		{
			get
			{
				return this._WangWang;
			}
			set
			{
				if ((this._WangWang != value))
				{
					this.OnWangWangChanging(value);
					this.SendPropertyChanging();
					this._WangWang = value;
					this.SendPropertyChanged("WangWang");
					this.OnWangWangChanged();
				}
			}
		}
		
		[Column(Storage="_NeteasePop", DbType="NVarChar(50)")]
		public string NeteasePop
		{
			get
			{
				return this._NeteasePop;
			}
			set
			{
				if ((this._NeteasePop != value))
				{
					this.OnNeteasePopChanging(value);
					this.SendPropertyChanging();
					this._NeteasePop = value;
					this.SendPropertyChanged("NeteasePop");
					this.OnNeteasePopChanged();
				}
			}
		}
		
		[Column(Storage="_UC", DbType="NVarChar(50)")]
		public string UC
		{
			get
			{
				return this._UC;
			}
			set
			{
				if ((this._UC != value))
				{
					this.OnUCChanging(value);
					this.SendPropertyChanging();
					this._UC = value;
					this.SendPropertyChanged("UC");
					this.OnUCChanged();
				}
			}
		}
		
		[Column(Storage="_Telphone", DbType="NVarChar(50)")]
		public string Telphone
		{
			get
			{
				return this._Telphone;
			}
			set
			{
				if ((this._Telphone != value))
				{
					this.OnTelphoneChanging(value);
					this.SendPropertyChanging();
					this._Telphone = value;
					this.SendPropertyChanged("Telphone");
					this.OnTelphoneChanged();
				}
			}
		}
		
		[Column(Storage="_Mobiephone", DbType="NVarChar(50)")]
		public string Mobiephone
		{
			get
			{
				return this._Mobiephone;
			}
			set
			{
				if ((this._Mobiephone != value))
				{
					this.OnMobiephoneChanging(value);
					this.SendPropertyChanging();
					this._Mobiephone = value;
					this.SendPropertyChanged("Mobiephone");
					this.OnMobiephoneChanged();
				}
			}
		}
		
		[Column(Storage="_WebSite", DbType="NVarChar(100)")]
		public string WebSite
		{
			get
			{
				return this._WebSite;
			}
			set
			{
				if ((this._WebSite != value))
				{
					this.OnWebSiteChanging(value);
					this.SendPropertyChanging();
					this._WebSite = value;
					this.SendPropertyChanged("WebSite");
					this.OnWebSiteChanged();
				}
			}
		}
		
		[Column(Storage="_TellMethod", DbType="TinyInt NOT NULL")]
		public byte TellMethod
		{
			get
			{
				return this._TellMethod;
			}
			set
			{
				if ((this._TellMethod != value))
				{
					this.OnTellMethodChanging(value);
					this.SendPropertyChanging();
					this._TellMethod = value;
					this.SendPropertyChanged("TellMethod");
					this.OnTellMethodChanged();
				}
			}
		}
		
		[Association(Name="Profile_ContactInformation", Storage="_Profile", ThisKey="userid", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Profile Profile
		{
			get
			{
				return this._Profile.Entity;
			}
			set
			{
				Profile previousValue = this._Profile.Entity;
				if (((previousValue != value) 
							|| (this._Profile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Profile.Entity = null;
						previousValue.ContactInformation = null;
					}
					this._Profile.Entity = value;
					if ((value != null))
					{
						value.ContactInformation = this;
						this._userid = value.UserId;
					}
					else
					{
						this._userid = default(long);
					}
					this.SendPropertyChanged("Profile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.DelLog")]
	public partial class DelLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private long _userid;
		
		private string _title;
		
		private string _body;
		
		private byte _IsPost;
		
		private bool _Anonymous;
		
		private System.DateTime _AddTime;
		
		private System.DateTime _EditTime;
		
		private long _ViewCount;
		
		private long _PushCount;
		
		private long _TrackBackCount;
		
		private long _CommentCount;
		
		private long _GroupId;
		
		private System.DateTime _DelTime;
		
		private long _Executerid;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnuseridChanging(long value);
    partial void OnuseridChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnbodyChanging(string value);
    partial void OnbodyChanged();
    partial void OnIsPostChanging(byte value);
    partial void OnIsPostChanged();
    partial void OnAnonymousChanging(bool value);
    partial void OnAnonymousChanged();
    partial void OnAddTimeChanging(System.DateTime value);
    partial void OnAddTimeChanged();
    partial void OnEditTimeChanging(System.DateTime value);
    partial void OnEditTimeChanged();
    partial void OnViewCountChanging(long value);
    partial void OnViewCountChanged();
    partial void OnPushCountChanging(long value);
    partial void OnPushCountChanged();
    partial void OnTrackBackCountChanging(long value);
    partial void OnTrackBackCountChanged();
    partial void OnCommentCountChanging(long value);
    partial void OnCommentCountChanged();
    partial void OnGroupIdChanging(long value);
    partial void OnGroupIdChanged();
    partial void OnDelTimeChanging(System.DateTime value);
    partial void OnDelTimeChanged();
    partial void OnExecuteridChanging(long value);
    partial void OnExecuteridChanged();
    #endregion
		
		public DelLog()
		{
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_userid", DbType="BigInt NOT NULL")]
		public long userid
		{
			get
			{
				return this._userid;
			}
			set
			{
				if ((this._userid != value))
				{
					this.OnuseridChanging(value);
					this.SendPropertyChanging();
					this._userid = value;
					this.SendPropertyChanged("userid");
					this.OnuseridChanged();
				}
			}
		}
		
		[Column(Storage="_title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[Column(Storage="_body", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string body
		{
			get
			{
				return this._body;
			}
			set
			{
				if ((this._body != value))
				{
					this.OnbodyChanging(value);
					this.SendPropertyChanging();
					this._body = value;
					this.SendPropertyChanged("body");
					this.OnbodyChanged();
				}
			}
		}
		
		[Column(Storage="_IsPost", DbType="TinyInt NOT NULL")]
		public byte IsPost
		{
			get
			{
				return this._IsPost;
			}
			set
			{
				if ((this._IsPost != value))
				{
					this.OnIsPostChanging(value);
					this.SendPropertyChanging();
					this._IsPost = value;
					this.SendPropertyChanged("IsPost");
					this.OnIsPostChanged();
				}
			}
		}
		
		[Column(Storage="_Anonymous", DbType="Bit NOT NULL")]
		public bool Anonymous
		{
			get
			{
				return this._Anonymous;
			}
			set
			{
				if ((this._Anonymous != value))
				{
					this.OnAnonymousChanging(value);
					this.SendPropertyChanging();
					this._Anonymous = value;
					this.SendPropertyChanged("Anonymous");
					this.OnAnonymousChanged();
				}
			}
		}
		
		[Column(Storage="_AddTime", DbType="SmallDateTime NOT NULL")]
		public System.DateTime AddTime
		{
			get
			{
				return this._AddTime;
			}
			set
			{
				if ((this._AddTime != value))
				{
					this.OnAddTimeChanging(value);
					this.SendPropertyChanging();
					this._AddTime = value;
					this.SendPropertyChanged("AddTime");
					this.OnAddTimeChanged();
				}
			}
		}
		
		[Column(Storage="_EditTime", DbType="SmallDateTime NOT NULL")]
		public System.DateTime EditTime
		{
			get
			{
				return this._EditTime;
			}
			set
			{
				if ((this._EditTime != value))
				{
					this.OnEditTimeChanging(value);
					this.SendPropertyChanging();
					this._EditTime = value;
					this.SendPropertyChanged("EditTime");
					this.OnEditTimeChanged();
				}
			}
		}
		
		[Column(Storage="_ViewCount", DbType="BigInt NOT NULL")]
		public long ViewCount
		{
			get
			{
				return this._ViewCount;
			}
			set
			{
				if ((this._ViewCount != value))
				{
					this.OnViewCountChanging(value);
					this.SendPropertyChanging();
					this._ViewCount = value;
					this.SendPropertyChanged("ViewCount");
					this.OnViewCountChanged();
				}
			}
		}
		
		[Column(Storage="_PushCount", DbType="BigInt NOT NULL")]
		public long PushCount
		{
			get
			{
				return this._PushCount;
			}
			set
			{
				if ((this._PushCount != value))
				{
					this.OnPushCountChanging(value);
					this.SendPropertyChanging();
					this._PushCount = value;
					this.SendPropertyChanged("PushCount");
					this.OnPushCountChanged();
				}
			}
		}
		
		[Column(Storage="_TrackBackCount", DbType="BigInt NOT NULL")]
		public long TrackBackCount
		{
			get
			{
				return this._TrackBackCount;
			}
			set
			{
				if ((this._TrackBackCount != value))
				{
					this.OnTrackBackCountChanging(value);
					this.SendPropertyChanging();
					this._TrackBackCount = value;
					this.SendPropertyChanged("TrackBackCount");
					this.OnTrackBackCountChanged();
				}
			}
		}
		
		[Column(Storage="_CommentCount", DbType="BigInt NOT NULL")]
		public long CommentCount
		{
			get
			{
				return this._CommentCount;
			}
			set
			{
				if ((this._CommentCount != value))
				{
					this.OnCommentCountChanging(value);
					this.SendPropertyChanging();
					this._CommentCount = value;
					this.SendPropertyChanged("CommentCount");
					this.OnCommentCountChanged();
				}
			}
		}
		
		[Column(Storage="_GroupId", DbType="BigInt NOT NULL")]
		public long GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[Column(Storage="_DelTime", DbType="SmallDateTime NOT NULL")]
		public System.DateTime DelTime
		{
			get
			{
				return this._DelTime;
			}
			set
			{
				if ((this._DelTime != value))
				{
					this.OnDelTimeChanging(value);
					this.SendPropertyChanging();
					this._DelTime = value;
					this.SendPropertyChanged("DelTime");
					this.OnDelTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Executerid", DbType="BigInt NOT NULL")]
		public long Executerid
		{
			get
			{
				return this._Executerid;
			}
			set
			{
				if ((this._Executerid != value))
				{
					this.OnExecuteridChanging(value);
					this.SendPropertyChanging();
					this._Executerid = value;
					this.SendPropertyChanged("Executerid");
					this.OnExecuteridChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Event")]
	public partial class Event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _trueid;
		
		private System.Nullable<long> _id;
		
		private long _fromid;
		
		private long _toid;
		
		private System.DateTime _Addtime;
		
		private int _type;
		
		private string _Application;
		
		private System.Nullable<long> _Actionid;
		
		private string _Strext1;
		
		private string _Strext2;
		
		private string _Strext3;
		
		private System.Nullable<long> _Numext1;
		
		private System.Nullable<long> _Numext2;
		
		private System.Nullable<long> _Numext3;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntrueidChanging(long value);
    partial void OntrueidChanged();
    partial void OnidChanging(System.Nullable<long> value);
    partial void OnidChanged();
    partial void OnfromidChanging(long value);
    partial void OnfromidChanged();
    partial void OntoidChanging(long value);
    partial void OntoidChanged();
    partial void OnAddtimeChanging(System.DateTime value);
    partial void OnAddtimeChanged();
    partial void OntypeChanging(int value);
    partial void OntypeChanged();
    partial void OnApplicationChanging(string value);
    partial void OnApplicationChanged();
    partial void OnActionidChanging(System.Nullable<long> value);
    partial void OnActionidChanged();
    partial void OnStrext1Changing(string value);
    partial void OnStrext1Changed();
    partial void OnStrext2Changing(string value);
    partial void OnStrext2Changed();
    partial void OnStrext3Changing(string value);
    partial void OnStrext3Changed();
    partial void OnNumext1Changing(System.Nullable<long> value);
    partial void OnNumext1Changed();
    partial void OnNumext2Changing(System.Nullable<long> value);
    partial void OnNumext2Changed();
    partial void OnNumext3Changing(System.Nullable<long> value);
    partial void OnNumext3Changed();
    #endregion
		
		public Event()
		{
			OnCreated();
		}
		
		[Column(Storage="_trueid", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long trueid
		{
			get
			{
				return this._trueid;
			}
			set
			{
				if ((this._trueid != value))
				{
					this.OntrueidChanging(value);
					this.SendPropertyChanging();
					this._trueid = value;
					this.SendPropertyChanged("trueid");
					this.OntrueidChanged();
				}
			}
		}
		
		[Column(Storage="_id", DbType="BigInt")]
		public System.Nullable<long> id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_fromid", DbType="BigInt NOT NULL")]
		public long fromid
		{
			get
			{
				return this._fromid;
			}
			set
			{
				if ((this._fromid != value))
				{
					this.OnfromidChanging(value);
					this.SendPropertyChanging();
					this._fromid = value;
					this.SendPropertyChanged("fromid");
					this.OnfromidChanged();
				}
			}
		}
		
		[Column(Storage="_toid", DbType="BigInt NOT NULL")]
		public long toid
		{
			get
			{
				return this._toid;
			}
			set
			{
				if ((this._toid != value))
				{
					this.OntoidChanging(value);
					this.SendPropertyChanging();
					this._toid = value;
					this.SendPropertyChanged("toid");
					this.OntoidChanged();
				}
			}
		}
		
		[Column(Storage="_Addtime", DbType="SmallDateTime NOT NULL")]
		public System.DateTime Addtime
		{
			get
			{
				return this._Addtime;
			}
			set
			{
				if ((this._Addtime != value))
				{
					this.OnAddtimeChanging(value);
					this.SendPropertyChanging();
					this._Addtime = value;
					this.SendPropertyChanged("Addtime");
					this.OnAddtimeChanged();
				}
			}
		}
		
		[Column(Storage="_type", DbType="Int NOT NULL")]
		public int type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[Column(Storage="_Application", DbType="NVarChar(50)")]
		public string Application
		{
			get
			{
				return this._Application;
			}
			set
			{
				if ((this._Application != value))
				{
					this.OnApplicationChanging(value);
					this.SendPropertyChanging();
					this._Application = value;
					this.SendPropertyChanged("Application");
					this.OnApplicationChanged();
				}
			}
		}
		
		[Column(Storage="_Actionid", DbType="BigInt")]
		public System.Nullable<long> Actionid
		{
			get
			{
				return this._Actionid;
			}
			set
			{
				if ((this._Actionid != value))
				{
					this.OnActionidChanging(value);
					this.SendPropertyChanging();
					this._Actionid = value;
					this.SendPropertyChanged("Actionid");
					this.OnActionidChanged();
				}
			}
		}
		
		[Column(Storage="_Strext1", DbType="NVarChar(4000)")]
		public string Strext1
		{
			get
			{
				return this._Strext1;
			}
			set
			{
				if ((this._Strext1 != value))
				{
					this.OnStrext1Changing(value);
					this.SendPropertyChanging();
					this._Strext1 = value;
					this.SendPropertyChanged("Strext1");
					this.OnStrext1Changed();
				}
			}
		}
		
		[Column(Storage="_Strext2", DbType="NVarChar(4000)")]
		public string Strext2
		{
			get
			{
				return this._Strext2;
			}
			set
			{
				if ((this._Strext2 != value))
				{
					this.OnStrext2Changing(value);
					this.SendPropertyChanging();
					this._Strext2 = value;
					this.SendPropertyChanged("Strext2");
					this.OnStrext2Changed();
				}
			}
		}
		
		[Column(Storage="_Strext3", DbType="NVarChar(4000)")]
		public string Strext3
		{
			get
			{
				return this._Strext3;
			}
			set
			{
				if ((this._Strext3 != value))
				{
					this.OnStrext3Changing(value);
					this.SendPropertyChanging();
					this._Strext3 = value;
					this.SendPropertyChanged("Strext3");
					this.OnStrext3Changed();
				}
			}
		}
		
		[Column(Storage="_Numext1", DbType="BigInt")]
		public System.Nullable<long> Numext1
		{
			get
			{
				return this._Numext1;
			}
			set
			{
				if ((this._Numext1 != value))
				{
					this.OnNumext1Changing(value);
					this.SendPropertyChanging();
					this._Numext1 = value;
					this.SendPropertyChanged("Numext1");
					this.OnNumext1Changed();
				}
			}
		}
		
		[Column(Storage="_Numext2", DbType="BigInt")]
		public System.Nullable<long> Numext2
		{
			get
			{
				return this._Numext2;
			}
			set
			{
				if ((this._Numext2 != value))
				{
					this.OnNumext2Changing(value);
					this.SendPropertyChanging();
					this._Numext2 = value;
					this.SendPropertyChanged("Numext2");
					this.OnNumext2Changed();
				}
			}
		}
		
		[Column(Storage="_Numext3", DbType="BigInt")]
		public System.Nullable<long> Numext3
		{
			get
			{
				return this._Numext3;
			}
			set
			{
				if ((this._Numext3 != value))
				{
					this.OnNumext3Changing(value);
					this.SendPropertyChanging();
					this._Numext3 = value;
					this.SendPropertyChanged("Numext3");
					this.OnNumext3Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Field")]
	public partial class Field : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _trueid;
		
		private System.Nullable<long> _id;
		
		private string _name;
		
		private System.Nullable<long> _pid;
		
		private bool _istrue;
		
		private int _class;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntrueidChanging(long value);
    partial void OntrueidChanged();
    partial void OnidChanging(System.Nullable<long> value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnpidChanging(System.Nullable<long> value);
    partial void OnpidChanged();
    partial void OnistrueChanging(bool value);
    partial void OnistrueChanged();
    partial void OnclassChanging(int value);
    partial void OnclassChanged();
    #endregion
		
		public Field()
		{
			OnCreated();
		}
		
		[Column(Storage="_trueid", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long trueid
		{
			get
			{
				return this._trueid;
			}
			set
			{
				if ((this._trueid != value))
				{
					this.OntrueidChanging(value);
					this.SendPropertyChanging();
					this._trueid = value;
					this.SendPropertyChanged("trueid");
					this.OntrueidChanged();
				}
			}
		}
		
		[Column(Storage="_id", DbType="BigInt")]
		public System.Nullable<long> id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[Column(Storage="_pid", DbType="BigInt")]
		public System.Nullable<long> pid
		{
			get
			{
				return this._pid;
			}
			set
			{
				if ((this._pid != value))
				{
					this.OnpidChanging(value);
					this.SendPropertyChanging();
					this._pid = value;
					this.SendPropertyChanged("pid");
					this.OnpidChanged();
				}
			}
		}
		
		[Column(Storage="_istrue", DbType="Bit NOT NULL")]
		public bool istrue
		{
			get
			{
				return this._istrue;
			}
			set
			{
				if ((this._istrue != value))
				{
					this.OnistrueChanging(value);
					this.SendPropertyChanging();
					this._istrue = value;
					this.SendPropertyChanged("istrue");
					this.OnistrueChanged();
				}
			}
		}
		
		[Column(Name="class", Storage="_class", DbType="Int NOT NULL")]
		public int @class
		{
			get
			{
				return this._class;
			}
			set
			{
				if ((this._class != value))
				{
					this.OnclassChanging(value);
					this.SendPropertyChanging();
					this._class = value;
					this.SendPropertyChanged("@class");
					this.OnclassChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.FieldInformation")]
	public partial class FieldInformation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _userid;
		
		private long _Field;
		
		private System.Nullable<short> _Year;
		
		private System.Nullable<long> _MiniField;
		
		private System.Nullable<long> _QinShi;
		
		private System.Nullable<long> _Field1;
		
		private System.Nullable<long> _Field2;
		
		private EntityRef<Profile> _Profile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuseridChanging(long value);
    partial void OnuseridChanged();
    partial void OnFieldChanging(long value);
    partial void OnFieldChanged();
    partial void OnYearChanging(System.Nullable<short> value);
    partial void OnYearChanged();
    partial void OnMiniFieldChanging(System.Nullable<long> value);
    partial void OnMiniFieldChanged();
    partial void OnQinShiChanging(System.Nullable<long> value);
    partial void OnQinShiChanged();
    partial void OnField1Changing(System.Nullable<long> value);
    partial void OnField1Changed();
    partial void OnField2Changing(System.Nullable<long> value);
    partial void OnField2Changed();
    #endregion
		
		public FieldInformation()
		{
			this._Profile = default(EntityRef<Profile>);
			OnCreated();
		}
		
		[Column(Storage="_userid", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long userid
		{
			get
			{
				return this._userid;
			}
			set
			{
				if ((this._userid != value))
				{
					if (this._Profile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuseridChanging(value);
					this.SendPropertyChanging();
					this._userid = value;
					this.SendPropertyChanged("userid");
					this.OnuseridChanged();
				}
			}
		}
		
		[Column(Storage="_Field", DbType="BigInt NOT NULL")]
		public long Field
		{
			get
			{
				return this._Field;
			}
			set
			{
				if ((this._Field != value))
				{
					this.OnFieldChanging(value);
					this.SendPropertyChanging();
					this._Field = value;
					this.SendPropertyChanged("Field");
					this.OnFieldChanged();
				}
			}
		}
		
		[Column(Storage="_Year", DbType="SmallInt")]
		public System.Nullable<short> Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[Column(Storage="_MiniField", DbType="BigInt")]
		public System.Nullable<long> MiniField
		{
			get
			{
				return this._MiniField;
			}
			set
			{
				if ((this._MiniField != value))
				{
					this.OnMiniFieldChanging(value);
					this.SendPropertyChanging();
					this._MiniField = value;
					this.SendPropertyChanged("MiniField");
					this.OnMiniFieldChanged();
				}
			}
		}
		
		[Column(Storage="_QinShi", DbType="BigInt")]
		public System.Nullable<long> QinShi
		{
			get
			{
				return this._QinShi;
			}
			set
			{
				if ((this._QinShi != value))
				{
					this.OnQinShiChanging(value);
					this.SendPropertyChanging();
					this._QinShi = value;
					this.SendPropertyChanged("QinShi");
					this.OnQinShiChanged();
				}
			}
		}
		
		[Column(Storage="_Field1", DbType="BigInt")]
		public System.Nullable<long> Field1
		{
			get
			{
				return this._Field1;
			}
			set
			{
				if ((this._Field1 != value))
				{
					this.OnField1Changing(value);
					this.SendPropertyChanging();
					this._Field1 = value;
					this.SendPropertyChanged("Field1");
					this.OnField1Changed();
				}
			}
		}
		
		[Column(Storage="_Field2", DbType="BigInt")]
		public System.Nullable<long> Field2
		{
			get
			{
				return this._Field2;
			}
			set
			{
				if ((this._Field2 != value))
				{
					this.OnField2Changing(value);
					this.SendPropertyChanging();
					this._Field2 = value;
					this.SendPropertyChanged("Field2");
					this.OnField2Changed();
				}
			}
		}
		
		[Association(Name="Profile_FieldInformation", Storage="_Profile", ThisKey="userid", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Profile Profile
		{
			get
			{
				return this._Profile.Entity;
			}
			set
			{
				Profile previousValue = this._Profile.Entity;
				if (((previousValue != value) 
							|| (this._Profile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Profile.Entity = null;
						previousValue.FieldInformation = null;
					}
					this._Profile.Entity = value;
					if ((value != null))
					{
						value.FieldInformation = this;
						this._userid = value.UserId;
					}
					else
					{
						this._userid = default(long);
					}
					this.SendPropertyChanged("Profile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Friend")]
	public partial class Friend : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _trueid;
		
		private System.Nullable<long> _id;
		
		private long _fromid;
		
		private long _toid;
		
		private bool _IsTrue;
		
		private bool _IsCommon;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntrueidChanging(long value);
    partial void OntrueidChanged();
    partial void OnidChanging(System.Nullable<long> value);
    partial void OnidChanged();
    partial void OnfromidChanging(long value);
    partial void OnfromidChanged();
    partial void OntoidChanging(long value);
    partial void OntoidChanged();
    partial void OnIsTrueChanging(bool value);
    partial void OnIsTrueChanged();
    partial void OnIsCommonChanging(bool value);
    partial void OnIsCommonChanged();
    #endregion
		
		public Friend()
		{
			OnCreated();
		}
		
		[Column(Storage="_trueid", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long trueid
		{
			get
			{
				return this._trueid;
			}
			set
			{
				if ((this._trueid != value))
				{
					this.OntrueidChanging(value);
					this.SendPropertyChanging();
					this._trueid = value;
					this.SendPropertyChanged("trueid");
					this.OntrueidChanged();
				}
			}
		}
		
		[Column(Storage="_id", DbType="BigInt")]
		public System.Nullable<long> id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_fromid", DbType="BigInt NOT NULL")]
		public long fromid
		{
			get
			{
				return this._fromid;
			}
			set
			{
				if ((this._fromid != value))
				{
					this.OnfromidChanging(value);
					this.SendPropertyChanging();
					this._fromid = value;
					this.SendPropertyChanged("fromid");
					this.OnfromidChanged();
				}
			}
		}
		
		[Column(Storage="_toid", DbType="BigInt NOT NULL")]
		public long toid
		{
			get
			{
				return this._toid;
			}
			set
			{
				if ((this._toid != value))
				{
					this.OntoidChanging(value);
					this.SendPropertyChanging();
					this._toid = value;
					this.SendPropertyChanged("toid");
					this.OntoidChanged();
				}
			}
		}
		
		[Column(Storage="_IsTrue", DbType="Bit NOT NULL")]
		public bool IsTrue
		{
			get
			{
				return this._IsTrue;
			}
			set
			{
				if ((this._IsTrue != value))
				{
					this.OnIsTrueChanging(value);
					this.SendPropertyChanging();
					this._IsTrue = value;
					this.SendPropertyChanged("IsTrue");
					this.OnIsTrueChanged();
				}
			}
		}
		
		[Column(Storage="_IsCommon", DbType="Bit NOT NULL")]
		public bool IsCommon
		{
			get
			{
				return this._IsCommon;
			}
			set
			{
				if ((this._IsCommon != value))
				{
					this.OnIsCommonChanging(value);
					this.SendPropertyChanging();
					this._IsCommon = value;
					this.SendPropertyChanged("IsCommon");
					this.OnIsCommonChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.[Group]")]
	public partial class Group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _trueid;
		
		private long _id;
		
		private string _GroupName;
		
		private string _summmary;
		
		private System.Nullable<long> _CreateUserid;
		
		private string _Publish;
		
		private byte _GroupClass;
		
		private byte _AdminCount;
		
		private long _LogCount;
		
		private long _ViewCount;
		
		private byte _JoinLevel;
		
		private byte _ShowLevel;
		
		private long _UserCount;
		
		private long _MaxUserCount;
		
		private string _MagicBox;
		
		private string _LogoUrl;
		
		private System.DateTime _addtime;
		
		private System.Nullable<long> _Num0;
		
		private System.Nullable<long> _Other0;
		
		private System.Nullable<long> _Other1;
		
		private System.Nullable<long> _Other2;
		
		private bool _IsTrue;
		
		private System.Nullable<long> _categoryid;
		
		private EntitySet<GroupUser> _GroupUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntrueidChanging(long value);
    partial void OntrueidChanged();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnGroupNameChanging(string value);
    partial void OnGroupNameChanged();
    partial void OnsummmaryChanging(string value);
    partial void OnsummmaryChanged();
    partial void OnCreateUseridChanging(System.Nullable<long> value);
    partial void OnCreateUseridChanged();
    partial void OnPublishChanging(string value);
    partial void OnPublishChanged();
    partial void OnGroupClassChanging(byte value);
    partial void OnGroupClassChanged();
    partial void OnAdminCountChanging(byte value);
    partial void OnAdminCountChanged();
    partial void OnLogCountChanging(long value);
    partial void OnLogCountChanged();
    partial void OnViewCountChanging(long value);
    partial void OnViewCountChanged();
    partial void OnJoinLevelChanging(byte value);
    partial void OnJoinLevelChanged();
    partial void OnShowLevelChanging(byte value);
    partial void OnShowLevelChanged();
    partial void OnUserCountChanging(long value);
    partial void OnUserCountChanged();
    partial void OnMaxUserCountChanging(long value);
    partial void OnMaxUserCountChanged();
    partial void OnMagicBoxChanging(string value);
    partial void OnMagicBoxChanged();
    partial void OnLogoUrlChanging(string value);
    partial void OnLogoUrlChanged();
    partial void OnaddtimeChanging(System.DateTime value);
    partial void OnaddtimeChanged();
    partial void OnNum0Changing(System.Nullable<long> value);
    partial void OnNum0Changed();
    partial void OnOther0Changing(System.Nullable<long> value);
    partial void OnOther0Changed();
    partial void OnOther1Changing(System.Nullable<long> value);
    partial void OnOther1Changed();
    partial void OnOther2Changing(System.Nullable<long> value);
    partial void OnOther2Changed();
    partial void OnIsTrueChanging(bool value);
    partial void OnIsTrueChanged();
    partial void OncategoryidChanging(System.Nullable<long> value);
    partial void OncategoryidChanged();
    #endregion
		
		public Group()
		{
			this._GroupUser = new EntitySet<GroupUser>(new Action<GroupUser>(this.attach_GroupUser), new Action<GroupUser>(this.detach_GroupUser));
			OnCreated();
		}
		
		[Column(Storage="_trueid", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long trueid
		{
			get
			{
				return this._trueid;
			}
			set
			{
				if ((this._trueid != value))
				{
					this.OntrueidChanging(value);
					this.SendPropertyChanging();
					this._trueid = value;
					this.SendPropertyChanged("trueid");
					this.OntrueidChanged();
				}
			}
		}
		
		[Column(Storage="_id", DbType="BigInt NOT NULL")]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_GroupName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this.OnGroupNameChanging(value);
					this.SendPropertyChanging();
					this._GroupName = value;
					this.SendPropertyChanged("GroupName");
					this.OnGroupNameChanged();
				}
			}
		}
		
		[Column(Storage="_summmary", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string summmary
		{
			get
			{
				return this._summmary;
			}
			set
			{
				if ((this._summmary != value))
				{
					this.OnsummmaryChanging(value);
					this.SendPropertyChanging();
					this._summmary = value;
					this.SendPropertyChanged("summmary");
					this.OnsummmaryChanged();
				}
			}
		}
		
		[Column(Storage="_CreateUserid", DbType="BigInt")]
		public System.Nullable<long> CreateUserid
		{
			get
			{
				return this._CreateUserid;
			}
			set
			{
				if ((this._CreateUserid != value))
				{
					this.OnCreateUseridChanging(value);
					this.SendPropertyChanging();
					this._CreateUserid = value;
					this.SendPropertyChanged("CreateUserid");
					this.OnCreateUseridChanged();
				}
			}
		}
		
		[Column(Storage="_Publish", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string Publish
		{
			get
			{
				return this._Publish;
			}
			set
			{
				if ((this._Publish != value))
				{
					this.OnPublishChanging(value);
					this.SendPropertyChanging();
					this._Publish = value;
					this.SendPropertyChanged("Publish");
					this.OnPublishChanged();
				}
			}
		}
		
		[Column(Storage="_GroupClass", DbType="TinyInt NOT NULL")]
		public byte GroupClass
		{
			get
			{
				return this._GroupClass;
			}
			set
			{
				if ((this._GroupClass != value))
				{
					this.OnGroupClassChanging(value);
					this.SendPropertyChanging();
					this._GroupClass = value;
					this.SendPropertyChanged("GroupClass");
					this.OnGroupClassChanged();
				}
			}
		}
		
		[Column(Storage="_AdminCount", DbType="TinyInt NOT NULL")]
		public byte AdminCount
		{
			get
			{
				return this._AdminCount;
			}
			set
			{
				if ((this._AdminCount != value))
				{
					this.OnAdminCountChanging(value);
					this.SendPropertyChanging();
					this._AdminCount = value;
					this.SendPropertyChanged("AdminCount");
					this.OnAdminCountChanged();
				}
			}
		}
		
		[Column(Storage="_LogCount", DbType="BigInt NOT NULL")]
		public long LogCount
		{
			get
			{
				return this._LogCount;
			}
			set
			{
				if ((this._LogCount != value))
				{
					this.OnLogCountChanging(value);
					this.SendPropertyChanging();
					this._LogCount = value;
					this.SendPropertyChanged("LogCount");
					this.OnLogCountChanged();
				}
			}
		}
		
		[Column(Storage="_ViewCount", DbType="BigInt NOT NULL")]
		public long ViewCount
		{
			get
			{
				return this._ViewCount;
			}
			set
			{
				if ((this._ViewCount != value))
				{
					this.OnViewCountChanging(value);
					this.SendPropertyChanging();
					this._ViewCount = value;
					this.SendPropertyChanged("ViewCount");
					this.OnViewCountChanged();
				}
			}
		}
		
		[Column(Storage="_JoinLevel", DbType="TinyInt NOT NULL")]
		public byte JoinLevel
		{
			get
			{
				return this._JoinLevel;
			}
			set
			{
				if ((this._JoinLevel != value))
				{
					this.OnJoinLevelChanging(value);
					this.SendPropertyChanging();
					this._JoinLevel = value;
					this.SendPropertyChanged("JoinLevel");
					this.OnJoinLevelChanged();
				}
			}
		}
		
		[Column(Storage="_ShowLevel", DbType="TinyInt NOT NULL")]
		public byte ShowLevel
		{
			get
			{
				return this._ShowLevel;
			}
			set
			{
				if ((this._ShowLevel != value))
				{
					this.OnShowLevelChanging(value);
					this.SendPropertyChanging();
					this._ShowLevel = value;
					this.SendPropertyChanged("ShowLevel");
					this.OnShowLevelChanged();
				}
			}
		}
		
		[Column(Storage="_UserCount", DbType="BigInt NOT NULL")]
		public long UserCount
		{
			get
			{
				return this._UserCount;
			}
			set
			{
				if ((this._UserCount != value))
				{
					this.OnUserCountChanging(value);
					this.SendPropertyChanging();
					this._UserCount = value;
					this.SendPropertyChanged("UserCount");
					this.OnUserCountChanged();
				}
			}
		}
		
		[Column(Storage="_MaxUserCount", DbType="BigInt NOT NULL")]
		public long MaxUserCount
		{
			get
			{
				return this._MaxUserCount;
			}
			set
			{
				if ((this._MaxUserCount != value))
				{
					this.OnMaxUserCountChanging(value);
					this.SendPropertyChanging();
					this._MaxUserCount = value;
					this.SendPropertyChanged("MaxUserCount");
					this.OnMaxUserCountChanged();
				}
			}
		}
		
		[Column(Storage="_MagicBox", DbType="NVarChar(4000)")]
		public string MagicBox
		{
			get
			{
				return this._MagicBox;
			}
			set
			{
				if ((this._MagicBox != value))
				{
					this.OnMagicBoxChanging(value);
					this.SendPropertyChanging();
					this._MagicBox = value;
					this.SendPropertyChanged("MagicBox");
					this.OnMagicBoxChanged();
				}
			}
		}
		
		[Column(Storage="_LogoUrl", DbType="NVarChar(250)")]
		public string LogoUrl
		{
			get
			{
				return this._LogoUrl;
			}
			set
			{
				if ((this._LogoUrl != value))
				{
					this.OnLogoUrlChanging(value);
					this.SendPropertyChanging();
					this._LogoUrl = value;
					this.SendPropertyChanged("LogoUrl");
					this.OnLogoUrlChanged();
				}
			}
		}
		
		[Column(Storage="_addtime", DbType="SmallDateTime NOT NULL")]
		public System.DateTime addtime
		{
			get
			{
				return this._addtime;
			}
			set
			{
				if ((this._addtime != value))
				{
					this.OnaddtimeChanging(value);
					this.SendPropertyChanging();
					this._addtime = value;
					this.SendPropertyChanged("addtime");
					this.OnaddtimeChanged();
				}
			}
		}
		
		[Column(Storage="_Num0", DbType="BigInt")]
		public System.Nullable<long> Num0
		{
			get
			{
				return this._Num0;
			}
			set
			{
				if ((this._Num0 != value))
				{
					this.OnNum0Changing(value);
					this.SendPropertyChanging();
					this._Num0 = value;
					this.SendPropertyChanged("Num0");
					this.OnNum0Changed();
				}
			}
		}
		
		[Column(Storage="_Other0", DbType="BigInt")]
		public System.Nullable<long> Other0
		{
			get
			{
				return this._Other0;
			}
			set
			{
				if ((this._Other0 != value))
				{
					this.OnOther0Changing(value);
					this.SendPropertyChanging();
					this._Other0 = value;
					this.SendPropertyChanged("Other0");
					this.OnOther0Changed();
				}
			}
		}
		
		[Column(Storage="_Other1", DbType="BigInt")]
		public System.Nullable<long> Other1
		{
			get
			{
				return this._Other1;
			}
			set
			{
				if ((this._Other1 != value))
				{
					this.OnOther1Changing(value);
					this.SendPropertyChanging();
					this._Other1 = value;
					this.SendPropertyChanged("Other1");
					this.OnOther1Changed();
				}
			}
		}
		
		[Column(Storage="_Other2", DbType="BigInt")]
		public System.Nullable<long> Other2
		{
			get
			{
				return this._Other2;
			}
			set
			{
				if ((this._Other2 != value))
				{
					this.OnOther2Changing(value);
					this.SendPropertyChanging();
					this._Other2 = value;
					this.SendPropertyChanged("Other2");
					this.OnOther2Changed();
				}
			}
		}
		
		[Column(Storage="_IsTrue", DbType="Bit NOT NULL")]
		public bool IsTrue
		{
			get
			{
				return this._IsTrue;
			}
			set
			{
				if ((this._IsTrue != value))
				{
					this.OnIsTrueChanging(value);
					this.SendPropertyChanging();
					this._IsTrue = value;
					this.SendPropertyChanged("IsTrue");
					this.OnIsTrueChanged();
				}
			}
		}
		
		[Column(Storage="_categoryid", DbType="BigInt")]
		public System.Nullable<long> categoryid
		{
			get
			{
				return this._categoryid;
			}
			set
			{
				if ((this._categoryid != value))
				{
					this.OncategoryidChanging(value);
					this.SendPropertyChanging();
					this._categoryid = value;
					this.SendPropertyChanged("categoryid");
					this.OncategoryidChanged();
				}
			}
		}
		
		[Association(Name="Group_GroupUser", Storage="_GroupUser", ThisKey="id", OtherKey="Groupid")]
		public EntitySet<GroupUser> GroupUser
		{
			get
			{
				return this._GroupUser;
			}
			set
			{
				this._GroupUser.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GroupUser(GroupUser entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_GroupUser(GroupUser entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
	}
	
	[Table(Name="dbo.GroupUser")]
	public partial class GroupUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _trueid;
		
		private System.Nullable<long> _id;
		
		private long _userid;
		
		private long _Groupid;
		
		private byte _Level;
		
		private System.DateTime _AddTime;
		
		private long _LogCount;
		
		private byte _Class;
		
		private bool _IsTrue;
		
		private bool _IsRss;
		
		private EntityRef<Group> _Group;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntrueidChanging(long value);
    partial void OntrueidChanged();
    partial void OnidChanging(System.Nullable<long> value);
    partial void OnidChanged();
    partial void OnuseridChanging(long value);
    partial void OnuseridChanged();
    partial void OnGroupidChanging(long value);
    partial void OnGroupidChanged();
    partial void OnLevelChanging(byte value);
    partial void OnLevelChanged();
    partial void OnAddTimeChanging(System.DateTime value);
    partial void OnAddTimeChanged();
    partial void OnLogCountChanging(long value);
    partial void OnLogCountChanged();
    partial void OnClassChanging(byte value);
    partial void OnClassChanged();
    partial void OnIsTrueChanging(bool value);
    partial void OnIsTrueChanged();
    partial void OnIsRssChanging(bool value);
    partial void OnIsRssChanged();
    #endregion
		
		public GroupUser()
		{
			this._Group = default(EntityRef<Group>);
			OnCreated();
		}
		
		[Column(Storage="_trueid", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long trueid
		{
			get
			{
				return this._trueid;
			}
			set
			{
				if ((this._trueid != value))
				{
					this.OntrueidChanging(value);
					this.SendPropertyChanging();
					this._trueid = value;
					this.SendPropertyChanged("trueid");
					this.OntrueidChanged();
				}
			}
		}
		
		[Column(Storage="_id", DbType="BigInt")]
		public System.Nullable<long> id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_userid", DbType="BigInt NOT NULL")]
		public long userid
		{
			get
			{
				return this._userid;
			}
			set
			{
				if ((this._userid != value))
				{
					this.OnuseridChanging(value);
					this.SendPropertyChanging();
					this._userid = value;
					this.SendPropertyChanged("userid");
					this.OnuseridChanged();
				}
			}
		}
		
		[Column(Storage="_Groupid", DbType="BigInt NOT NULL")]
		public long Groupid
		{
			get
			{
				return this._Groupid;
			}
			set
			{
				if ((this._Groupid != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupidChanging(value);
					this.SendPropertyChanging();
					this._Groupid = value;
					this.SendPropertyChanged("Groupid");
					this.OnGroupidChanged();
				}
			}
		}
		
		[Column(Name="[Level]", Storage="_Level", DbType="TinyInt NOT NULL")]
		public byte Level
		{
			get
			{
				return this._Level;
			}
			set
			{
				if ((this._Level != value))
				{
					this.OnLevelChanging(value);
					this.SendPropertyChanging();
					this._Level = value;
					this.SendPropertyChanged("Level");
					this.OnLevelChanged();
				}
			}
		}
		
		[Column(Storage="_AddTime", DbType="SmallDateTime NOT NULL")]
		public System.DateTime AddTime
		{
			get
			{
				return this._AddTime;
			}
			set
			{
				if ((this._AddTime != value))
				{
					this.OnAddTimeChanging(value);
					this.SendPropertyChanging();
					this._AddTime = value;
					this.SendPropertyChanged("AddTime");
					this.OnAddTimeChanged();
				}
			}
		}
		
		[Column(Storage="_LogCount", DbType="BigInt NOT NULL")]
		public long LogCount
		{
			get
			{
				return this._LogCount;
			}
			set
			{
				if ((this._LogCount != value))
				{
					this.OnLogCountChanging(value);
					this.SendPropertyChanging();
					this._LogCount = value;
					this.SendPropertyChanged("LogCount");
					this.OnLogCountChanged();
				}
			}
		}
		
		[Column(Storage="_Class", DbType="TinyInt NOT NULL")]
		public byte Class
		{
			get
			{
				return this._Class;
			}
			set
			{
				if ((this._Class != value))
				{
					this.OnClassChanging(value);
					this.SendPropertyChanging();
					this._Class = value;
					this.SendPropertyChanged("Class");
					this.OnClassChanged();
				}
			}
		}
		
		[Column(Storage="_IsTrue", DbType="Bit NOT NULL")]
		public bool IsTrue
		{
			get
			{
				return this._IsTrue;
			}
			set
			{
				if ((this._IsTrue != value))
				{
					this.OnIsTrueChanging(value);
					this.SendPropertyChanging();
					this._IsTrue = value;
					this.SendPropertyChanged("IsTrue");
					this.OnIsTrueChanged();
				}
			}
		}
		
		[Column(Storage="_IsRss", DbType="Bit NOT NULL")]
		public bool IsRss
		{
			get
			{
				return this._IsRss;
			}
			set
			{
				if ((this._IsRss != value))
				{
					this.OnIsRssChanging(value);
					this.SendPropertyChanging();
					this._IsRss = value;
					this.SendPropertyChanged("IsRss");
					this.OnIsRssChanged();
				}
			}
		}
		
		[Association(Name="Group_GroupUser", Storage="_Group", ThisKey="Groupid", OtherKey="id", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.GroupUser.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.GroupUser.Add(this);
						this._Groupid = value.id;
					}
					else
					{
						this._Groupid = default(long);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.[Log]")]
	public partial class Note : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private long _userid;
		
		private string _title;
		
		private string _body;
		
		private byte _IsPost;
		
		private bool _Anonymous;
		
		private System.DateTime _AddTime;
		
		private System.DateTime _EditTime;
		
		private long _ViewCount;
		
		private long _PushCount;
		
		private long _TrackBackCount;
		
		private long _CommentCount;
		
		private long _GroupId;
		
		private long _LastCommentUserid;
		
		private System.DateTime _LastCommentTime;
		
		private byte _istellme;
		
		private EntitySet<LogTag> _LogTag;
		
		private EntitySet<Push> _Push;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnuseridChanging(long value);
    partial void OnuseridChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnbodyChanging(string value);
    partial void OnbodyChanged();
    partial void OnIsPostChanging(byte value);
    partial void OnIsPostChanged();
    partial void OnAnonymousChanging(bool value);
    partial void OnAnonymousChanged();
    partial void OnAddTimeChanging(System.DateTime value);
    partial void OnAddTimeChanged();
    partial void OnEditTimeChanging(System.DateTime value);
    partial void OnEditTimeChanged();
    partial void OnViewCountChanging(long value);
    partial void OnViewCountChanged();
    partial void OnPushCountChanging(long value);
    partial void OnPushCountChanged();
    partial void OnTrackBackCountChanging(long value);
    partial void OnTrackBackCountChanged();
    partial void OnCommentCountChanging(long value);
    partial void OnCommentCountChanged();
    partial void OnGroupIdChanging(long value);
    partial void OnGroupIdChanged();
    partial void OnLastCommentUseridChanging(long value);
    partial void OnLastCommentUseridChanged();
    partial void OnLastCommentTimeChanging(System.DateTime value);
    partial void OnLastCommentTimeChanged();
    partial void OnistellmeChanging(byte value);
    partial void OnistellmeChanged();
    #endregion
		
		public Note()
		{
			this._LogTag = new EntitySet<LogTag>(new Action<LogTag>(this.attach_LogTag), new Action<LogTag>(this.detach_LogTag));
			this._Push = new EntitySet<Push>(new Action<Push>(this.attach_Push), new Action<Push>(this.detach_Push));
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_userid", DbType="BigInt NOT NULL")]
		public long userid
		{
			get
			{
				return this._userid;
			}
			set
			{
				if ((this._userid != value))
				{
					this.OnuseridChanging(value);
					this.SendPropertyChanging();
					this._userid = value;
					this.SendPropertyChanged("userid");
					this.OnuseridChanged();
				}
			}
		}
		
		[Column(Storage="_title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[Column(Storage="_body", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string body
		{
			get
			{
				return this._body;
			}
			set
			{
				if ((this._body != value))
				{
					this.OnbodyChanging(value);
					this.SendPropertyChanging();
					this._body = value;
					this.SendPropertyChanged("body");
					this.OnbodyChanged();
				}
			}
		}
		
		[Column(Storage="_IsPost", DbType="TinyInt NOT NULL")]
		public byte IsPost
		{
			get
			{
				return this._IsPost;
			}
			set
			{
				if ((this._IsPost != value))
				{
					this.OnIsPostChanging(value);
					this.SendPropertyChanging();
					this._IsPost = value;
					this.SendPropertyChanged("IsPost");
					this.OnIsPostChanged();
				}
			}
		}
		
		[Column(Storage="_Anonymous", DbType="Bit NOT NULL")]
		public bool Anonymous
		{
			get
			{
				return this._Anonymous;
			}
			set
			{
				if ((this._Anonymous != value))
				{
					this.OnAnonymousChanging(value);
					this.SendPropertyChanging();
					this._Anonymous = value;
					this.SendPropertyChanged("Anonymous");
					this.OnAnonymousChanged();
				}
			}
		}
		
		[Column(Storage="_AddTime", DbType="DateTime NOT NULL")]
		public System.DateTime AddTime
		{
			get
			{
				return this._AddTime;
			}
			set
			{
				if ((this._AddTime != value))
				{
					this.OnAddTimeChanging(value);
					this.SendPropertyChanging();
					this._AddTime = value;
					this.SendPropertyChanged("AddTime");
					this.OnAddTimeChanged();
				}
			}
		}
		
		[Column(Storage="_EditTime", DbType="DateTime NOT NULL")]
		public System.DateTime EditTime
		{
			get
			{
				return this._EditTime;
			}
			set
			{
				if ((this._EditTime != value))
				{
					this.OnEditTimeChanging(value);
					this.SendPropertyChanging();
					this._EditTime = value;
					this.SendPropertyChanged("EditTime");
					this.OnEditTimeChanged();
				}
			}
		}
		
		[Column(Storage="_ViewCount", DbType="BigInt NOT NULL")]
		public long ViewCount
		{
			get
			{
				return this._ViewCount;
			}
			set
			{
				if ((this._ViewCount != value))
				{
					this.OnViewCountChanging(value);
					this.SendPropertyChanging();
					this._ViewCount = value;
					this.SendPropertyChanged("ViewCount");
					this.OnViewCountChanged();
				}
			}
		}
		
		[Column(Storage="_PushCount", DbType="BigInt NOT NULL")]
		public long PushCount
		{
			get
			{
				return this._PushCount;
			}
			set
			{
				if ((this._PushCount != value))
				{
					this.OnPushCountChanging(value);
					this.SendPropertyChanging();
					this._PushCount = value;
					this.SendPropertyChanged("PushCount");
					this.OnPushCountChanged();
				}
			}
		}
		
		[Column(Storage="_TrackBackCount", DbType="BigInt NOT NULL")]
		public long TrackBackCount
		{
			get
			{
				return this._TrackBackCount;
			}
			set
			{
				if ((this._TrackBackCount != value))
				{
					this.OnTrackBackCountChanging(value);
					this.SendPropertyChanging();
					this._TrackBackCount = value;
					this.SendPropertyChanged("TrackBackCount");
					this.OnTrackBackCountChanged();
				}
			}
		}
		
		[Column(Storage="_CommentCount", DbType="BigInt NOT NULL")]
		public long CommentCount
		{
			get
			{
				return this._CommentCount;
			}
			set
			{
				if ((this._CommentCount != value))
				{
					this.OnCommentCountChanging(value);
					this.SendPropertyChanging();
					this._CommentCount = value;
					this.SendPropertyChanged("CommentCount");
					this.OnCommentCountChanged();
				}
			}
		}
		
		[Column(Storage="_GroupId", DbType="BigInt NOT NULL")]
		public long GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[Column(Storage="_LastCommentUserid", DbType="BigInt NOT NULL")]
		public long LastCommentUserid
		{
			get
			{
				return this._LastCommentUserid;
			}
			set
			{
				if ((this._LastCommentUserid != value))
				{
					this.OnLastCommentUseridChanging(value);
					this.SendPropertyChanging();
					this._LastCommentUserid = value;
					this.SendPropertyChanged("LastCommentUserid");
					this.OnLastCommentUseridChanged();
				}
			}
		}
		
		[Column(Storage="_LastCommentTime", DbType="DateTime NOT NULL")]
		public System.DateTime LastCommentTime
		{
			get
			{
				return this._LastCommentTime;
			}
			set
			{
				if ((this._LastCommentTime != value))
				{
					this.OnLastCommentTimeChanging(value);
					this.SendPropertyChanging();
					this._LastCommentTime = value;
					this.SendPropertyChanged("LastCommentTime");
					this.OnLastCommentTimeChanged();
				}
			}
		}
		
		[Column(Storage="_istellme", DbType="TinyInt NOT NULL")]
		public byte istellme
		{
			get
			{
				return this._istellme;
			}
			set
			{
				if ((this._istellme != value))
				{
					this.OnistellmeChanging(value);
					this.SendPropertyChanging();
					this._istellme = value;
					this.SendPropertyChanged("istellme");
					this.OnistellmeChanged();
				}
			}
		}
		
		[Association(Name="Log_LogTag", Storage="_LogTag", OtherKey="logid")]
		public EntitySet<LogTag> LogTag
		{
			get
			{
				return this._LogTag;
			}
			set
			{
				this._LogTag.Assign(value);
			}
		}
		
		[Association(Name="Log_Push", Storage="_Push", OtherKey="Logid")]
		public EntitySet<Push> Push
		{
			get
			{
				return this._Push;
			}
			set
			{
				this._Push.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LogTag(LogTag entity)
		{
			this.SendPropertyChanging();
			entity.Note = this;
		}
		
		private void detach_LogTag(LogTag entity)
		{
			this.SendPropertyChanging();
			entity.Note = null;
		}
		
		private void attach_Push(Push entity)
		{
			this.SendPropertyChanging();
			entity.Note = this;
		}
		
		private void detach_Push(Push entity)
		{
			this.SendPropertyChanging();
			entity.Note = null;
		}
	}
	
	[Table(Name="dbo.LogTag")]
	public partial class LogTag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private long _tagid;
		
		private long _logid;
		
		private EntityRef<Note> _Note;
		
		private EntityRef<Tags> _Tags;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OntagidChanging(long value);
    partial void OntagidChanged();
    partial void OnlogidChanging(long value);
    partial void OnlogidChanged();
    #endregion
		
		public LogTag()
		{
			this._Note = default(EntityRef<Note>);
			this._Tags = default(EntityRef<Tags>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_tagid", DbType="BigInt NOT NULL")]
		public long tagid
		{
			get
			{
				return this._tagid;
			}
			set
			{
				if ((this._tagid != value))
				{
					if (this._Tags.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntagidChanging(value);
					this.SendPropertyChanging();
					this._tagid = value;
					this.SendPropertyChanged("tagid");
					this.OntagidChanged();
				}
			}
		}
		
		[Column(Storage="_logid", DbType="BigInt NOT NULL")]
		public long logid
		{
			get
			{
				return this._logid;
			}
			set
			{
				if ((this._logid != value))
				{
					if (this._Note.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnlogidChanging(value);
					this.SendPropertyChanging();
					this._logid = value;
					this.SendPropertyChanged("logid");
					this.OnlogidChanged();
				}
			}
		}
		
		[Association(Name="Log_LogTag", Storage="_Note", ThisKey="logid", IsForeignKey=true)]
		public Note Note
		{
			get
			{
				return this._Note.Entity;
			}
			set
			{
				Note previousValue = this._Note.Entity;
				if (((previousValue != value) 
							|| (this._Note.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Note.Entity = null;
						previousValue.LogTag.Remove(this);
					}
					this._Note.Entity = value;
					if ((value != null))
					{
						value.LogTag.Add(this);
						this._logid = value.id;
					}
					else
					{
						this._logid = default(long);
					}
					this.SendPropertyChanged("Note");
				}
			}
		}
		
		[Association(Name="Tags_LogTag", Storage="_Tags", ThisKey="tagid", IsForeignKey=true)]
		public Tags Tags
		{
			get
			{
				return this._Tags.Entity;
			}
			set
			{
				Tags previousValue = this._Tags.Entity;
				if (((previousValue != value) 
							|| (this._Tags.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tags.Entity = null;
						previousValue.LogTag.Remove(this);
					}
					this._Tags.Entity = value;
					if ((value != null))
					{
						value.LogTag.Add(this);
						this._tagid = value.id;
					}
					else
					{
						this._tagid = default(long);
					}
					this.SendPropertyChanged("Tags");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Message")]
	public partial class Message : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _trueid;
		
		private System.Nullable<long> _id;
		
		private long _FromId;
		
		private long _ToId;
		
		private string _Title;
		
		private string _Body;
		
		private System.DateTime _SendTime;
		
		private bool _IsSee;
		
		private bool _IsFromDel;
		
		private bool _IsToDel;
		
		private bool _IsHtml;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntrueidChanging(long value);
    partial void OntrueidChanged();
    partial void OnidChanging(System.Nullable<long> value);
    partial void OnidChanged();
    partial void OnFromIdChanging(long value);
    partial void OnFromIdChanged();
    partial void OnToIdChanging(long value);
    partial void OnToIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnBodyChanging(string value);
    partial void OnBodyChanged();
    partial void OnSendTimeChanging(System.DateTime value);
    partial void OnSendTimeChanged();
    partial void OnIsSeeChanging(bool value);
    partial void OnIsSeeChanged();
    partial void OnIsFromDelChanging(bool value);
    partial void OnIsFromDelChanged();
    partial void OnIsToDelChanging(bool value);
    partial void OnIsToDelChanged();
    partial void OnIsHtmlChanging(bool value);
    partial void OnIsHtmlChanged();
    #endregion
		
		public Message()
		{
			OnCreated();
		}
		
		[Column(Storage="_trueid", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long trueid
		{
			get
			{
				return this._trueid;
			}
			set
			{
				if ((this._trueid != value))
				{
					this.OntrueidChanging(value);
					this.SendPropertyChanging();
					this._trueid = value;
					this.SendPropertyChanged("trueid");
					this.OntrueidChanged();
				}
			}
		}
		
		[Column(Storage="_id", DbType="BigInt")]
		public System.Nullable<long> id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_FromId", DbType="BigInt NOT NULL")]
		public long FromId
		{
			get
			{
				return this._FromId;
			}
			set
			{
				if ((this._FromId != value))
				{
					this.OnFromIdChanging(value);
					this.SendPropertyChanging();
					this._FromId = value;
					this.SendPropertyChanged("FromId");
					this.OnFromIdChanged();
				}
			}
		}
		
		[Column(Storage="_ToId", DbType="BigInt NOT NULL")]
		public long ToId
		{
			get
			{
				return this._ToId;
			}
			set
			{
				if ((this._ToId != value))
				{
					this.OnToIdChanging(value);
					this.SendPropertyChanging();
					this._ToId = value;
					this.SendPropertyChanged("ToId");
					this.OnToIdChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Body", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string Body
		{
			get
			{
				return this._Body;
			}
			set
			{
				if ((this._Body != value))
				{
					this.OnBodyChanging(value);
					this.SendPropertyChanging();
					this._Body = value;
					this.SendPropertyChanged("Body");
					this.OnBodyChanged();
				}
			}
		}
		
		[Column(Storage="_SendTime", DbType="SmallDateTime NOT NULL")]
		public System.DateTime SendTime
		{
			get
			{
				return this._SendTime;
			}
			set
			{
				if ((this._SendTime != value))
				{
					this.OnSendTimeChanging(value);
					this.SendPropertyChanging();
					this._SendTime = value;
					this.SendPropertyChanged("SendTime");
					this.OnSendTimeChanged();
				}
			}
		}
		
		[Column(Storage="_IsSee", DbType="Bit NOT NULL")]
		public bool IsSee
		{
			get
			{
				return this._IsSee;
			}
			set
			{
				if ((this._IsSee != value))
				{
					this.OnIsSeeChanging(value);
					this.SendPropertyChanging();
					this._IsSee = value;
					this.SendPropertyChanged("IsSee");
					this.OnIsSeeChanged();
				}
			}
		}
		
		[Column(Storage="_IsFromDel", DbType="Bit NOT NULL")]
		public bool IsFromDel
		{
			get
			{
				return this._IsFromDel;
			}
			set
			{
				if ((this._IsFromDel != value))
				{
					this.OnIsFromDelChanging(value);
					this.SendPropertyChanging();
					this._IsFromDel = value;
					this.SendPropertyChanged("IsFromDel");
					this.OnIsFromDelChanged();
				}
			}
		}
		
		[Column(Storage="_IsToDel", DbType="Bit NOT NULL")]
		public bool IsToDel
		{
			get
			{
				return this._IsToDel;
			}
			set
			{
				if ((this._IsToDel != value))
				{
					this.OnIsToDelChanging(value);
					this.SendPropertyChanging();
					this._IsToDel = value;
					this.SendPropertyChanged("IsToDel");
					this.OnIsToDelChanged();
				}
			}
		}
		
		[Column(Storage="_IsHtml", DbType="Bit NOT NULL")]
		public bool IsHtml
		{
			get
			{
				return this._IsHtml;
			}
			set
			{
				if ((this._IsHtml != value))
				{
					this.OnIsHtmlChanging(value);
					this.SendPropertyChanging();
					this._IsHtml = value;
					this.SendPropertyChanged("IsHtml");
					this.OnIsHtmlChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MiniField")]
	public partial class MiniField : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _trueid;
		
		private System.Nullable<long> _id;
		
		private string _name;
		
		private long _pid;
		
		private int _class;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntrueidChanging(long value);
    partial void OntrueidChanged();
    partial void OnidChanging(System.Nullable<long> value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnpidChanging(long value);
    partial void OnpidChanged();
    partial void OnclassChanging(int value);
    partial void OnclassChanged();
    #endregion
		
		public MiniField()
		{
			OnCreated();
		}
		
		[Column(Storage="_trueid", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long trueid
		{
			get
			{
				return this._trueid;
			}
			set
			{
				if ((this._trueid != value))
				{
					this.OntrueidChanging(value);
					this.SendPropertyChanging();
					this._trueid = value;
					this.SendPropertyChanged("trueid");
					this.OntrueidChanged();
				}
			}
		}
		
		[Column(Storage="_id", DbType="BigInt")]
		public System.Nullable<long> id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[Column(Storage="_pid", DbType="BigInt NOT NULL")]
		public long pid
		{
			get
			{
				return this._pid;
			}
			set
			{
				if ((this._pid != value))
				{
					this.OnpidChanging(value);
					this.SendPropertyChanging();
					this._pid = value;
					this.SendPropertyChanged("pid");
					this.OnpidChanged();
				}
			}
		}
		
		[Column(Name="class", Storage="_class", DbType="Int NOT NULL")]
		public int @class
		{
			get
			{
				return this._class;
			}
			set
			{
				if ((this._class != value))
				{
					this.OnclassChanging(value);
					this.SendPropertyChanging();
					this._class = value;
					this.SendPropertyChanged("@class");
					this.OnclassChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PersonalInformation")]
	public partial class PersonalInformation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _userid;
		
		private string _LoveLike;
		
		private string _LoveBook;
		
		private string _LoveMusic;
		
		private string _LoveMovie;
		
		private string _LoveSports;
		
		private string _LoveGame;
		
		private string _LoveComic;
		
		private string _JoinSociety;
		
		private EntityRef<Profile> _Profile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuseridChanging(long value);
    partial void OnuseridChanged();
    partial void OnLoveLikeChanging(string value);
    partial void OnLoveLikeChanged();
    partial void OnLoveBookChanging(string value);
    partial void OnLoveBookChanged();
    partial void OnLoveMusicChanging(string value);
    partial void OnLoveMusicChanged();
    partial void OnLoveMovieChanging(string value);
    partial void OnLoveMovieChanged();
    partial void OnLoveSportsChanging(string value);
    partial void OnLoveSportsChanged();
    partial void OnLoveGameChanging(string value);
    partial void OnLoveGameChanged();
    partial void OnLoveComicChanging(string value);
    partial void OnLoveComicChanged();
    partial void OnJoinSocietyChanging(string value);
    partial void OnJoinSocietyChanged();
    #endregion
		
		public PersonalInformation()
		{
			this._Profile = default(EntityRef<Profile>);
			OnCreated();
		}
		
		[Column(Storage="_userid", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long userid
		{
			get
			{
				return this._userid;
			}
			set
			{
				if ((this._userid != value))
				{
					if (this._Profile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuseridChanging(value);
					this.SendPropertyChanging();
					this._userid = value;
					this.SendPropertyChanged("userid");
					this.OnuseridChanged();
				}
			}
		}
		
		[Column(Storage="_LoveLike", DbType="NVarChar(255)")]
		public string LoveLike
		{
			get
			{
				return this._LoveLike;
			}
			set
			{
				if ((this._LoveLike != value))
				{
					this.OnLoveLikeChanging(value);
					this.SendPropertyChanging();
					this._LoveLike = value;
					this.SendPropertyChanged("LoveLike");
					this.OnLoveLikeChanged();
				}
			}
		}
		
		[Column(Storage="_LoveBook", DbType="NVarChar(255)")]
		public string LoveBook
		{
			get
			{
				return this._LoveBook;
			}
			set
			{
				if ((this._LoveBook != value))
				{
					this.OnLoveBookChanging(value);
					this.SendPropertyChanging();
					this._LoveBook = value;
					this.SendPropertyChanged("LoveBook");
					this.OnLoveBookChanged();
				}
			}
		}
		
		[Column(Storage="_LoveMusic", DbType="NVarChar(255)")]
		public string LoveMusic
		{
			get
			{
				return this._LoveMusic;
			}
			set
			{
				if ((this._LoveMusic != value))
				{
					this.OnLoveMusicChanging(value);
					this.SendPropertyChanging();
					this._LoveMusic = value;
					this.SendPropertyChanged("LoveMusic");
					this.OnLoveMusicChanged();
				}
			}
		}
		
		[Column(Storage="_LoveMovie", DbType="NVarChar(255)")]
		public string LoveMovie
		{
			get
			{
				return this._LoveMovie;
			}
			set
			{
				if ((this._LoveMovie != value))
				{
					this.OnLoveMovieChanging(value);
					this.SendPropertyChanging();
					this._LoveMovie = value;
					this.SendPropertyChanged("LoveMovie");
					this.OnLoveMovieChanged();
				}
			}
		}
		
		[Column(Storage="_LoveSports", DbType="NVarChar(255)")]
		public string LoveSports
		{
			get
			{
				return this._LoveSports;
			}
			set
			{
				if ((this._LoveSports != value))
				{
					this.OnLoveSportsChanging(value);
					this.SendPropertyChanging();
					this._LoveSports = value;
					this.SendPropertyChanged("LoveSports");
					this.OnLoveSportsChanged();
				}
			}
		}
		
		[Column(Storage="_LoveGame", DbType="NVarChar(255)")]
		public string LoveGame
		{
			get
			{
				return this._LoveGame;
			}
			set
			{
				if ((this._LoveGame != value))
				{
					this.OnLoveGameChanging(value);
					this.SendPropertyChanging();
					this._LoveGame = value;
					this.SendPropertyChanged("LoveGame");
					this.OnLoveGameChanged();
				}
			}
		}
		
		[Column(Storage="_LoveComic", DbType="NVarChar(255)")]
		public string LoveComic
		{
			get
			{
				return this._LoveComic;
			}
			set
			{
				if ((this._LoveComic != value))
				{
					this.OnLoveComicChanging(value);
					this.SendPropertyChanging();
					this._LoveComic = value;
					this.SendPropertyChanged("LoveComic");
					this.OnLoveComicChanged();
				}
			}
		}
		
		[Column(Storage="_JoinSociety", DbType="NVarChar(255)")]
		public string JoinSociety
		{
			get
			{
				return this._JoinSociety;
			}
			set
			{
				if ((this._JoinSociety != value))
				{
					this.OnJoinSocietyChanging(value);
					this.SendPropertyChanging();
					this._JoinSociety = value;
					this.SendPropertyChanged("JoinSociety");
					this.OnJoinSocietyChanged();
				}
			}
		}
		
		[Association(Name="Profile_PersonalInformation", Storage="_Profile", ThisKey="userid", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Profile Profile
		{
			get
			{
				return this._Profile.Entity;
			}
			set
			{
				Profile previousValue = this._Profile.Entity;
				if (((previousValue != value) 
							|| (this._Profile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Profile.Entity = null;
						previousValue.PersonalInformation = null;
					}
					this._Profile.Entity = value;
					if ((value != null))
					{
						value.PersonalInformation = this;
						this._userid = value.UserId;
					}
					else
					{
						this._userid = default(long);
					}
					this.SendPropertyChanged("Profile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Photos")]
	public partial class Photos : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _trueid;
		
		private System.Nullable<long> _id;
		
		private string _name;
		
		private long _Albumid;
		
		private long _userid;
		
		private System.DateTime _Addtime;
		
		private string _Path;
		
		private long _Order;
		
		private long _CommentCount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntrueidChanging(long value);
    partial void OntrueidChanged();
    partial void OnidChanging(System.Nullable<long> value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnAlbumidChanging(long value);
    partial void OnAlbumidChanged();
    partial void OnuseridChanging(long value);
    partial void OnuseridChanged();
    partial void OnAddtimeChanging(System.DateTime value);
    partial void OnAddtimeChanged();
    partial void OnPathChanging(string value);
    partial void OnPathChanged();
    partial void OnOrderChanging(long value);
    partial void OnOrderChanged();
    partial void OnCommentCountChanging(long value);
    partial void OnCommentCountChanged();
    #endregion
		
		public Photos()
		{
			OnCreated();
		}
		
		[Column(Storage="_trueid", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long trueid
		{
			get
			{
				return this._trueid;
			}
			set
			{
				if ((this._trueid != value))
				{
					this.OntrueidChanging(value);
					this.SendPropertyChanging();
					this._trueid = value;
					this.SendPropertyChanged("trueid");
					this.OntrueidChanged();
				}
			}
		}
		
		[Column(Storage="_id", DbType="BigInt")]
		public System.Nullable<long> id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[Column(Storage="_Albumid", DbType="BigInt NOT NULL")]
		public long Albumid
		{
			get
			{
				return this._Albumid;
			}
			set
			{
				if ((this._Albumid != value))
				{
					this.OnAlbumidChanging(value);
					this.SendPropertyChanging();
					this._Albumid = value;
					this.SendPropertyChanged("Albumid");
					this.OnAlbumidChanged();
				}
			}
		}
		
		[Column(Storage="_userid", DbType="BigInt NOT NULL")]
		public long userid
		{
			get
			{
				return this._userid;
			}
			set
			{
				if ((this._userid != value))
				{
					this.OnuseridChanging(value);
					this.SendPropertyChanging();
					this._userid = value;
					this.SendPropertyChanged("userid");
					this.OnuseridChanged();
				}
			}
		}
		
		[Column(Storage="_Addtime", DbType="SmallDateTime NOT NULL")]
		public System.DateTime Addtime
		{
			get
			{
				return this._Addtime;
			}
			set
			{
				if ((this._Addtime != value))
				{
					this.OnAddtimeChanging(value);
					this.SendPropertyChanging();
					this._Addtime = value;
					this.SendPropertyChanged("Addtime");
					this.OnAddtimeChanged();
				}
			}
		}
		
		[Column(Storage="_Path", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				if ((this._Path != value))
				{
					this.OnPathChanging(value);
					this.SendPropertyChanging();
					this._Path = value;
					this.SendPropertyChanged("Path");
					this.OnPathChanged();
				}
			}
		}
		
		[Column(Name="[Order]", Storage="_Order", DbType="BigInt NOT NULL")]
		public long Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[Column(Storage="_CommentCount", DbType="BigInt NOT NULL")]
		public long CommentCount
		{
			get
			{
				return this._CommentCount;
			}
			set
			{
				if ((this._CommentCount != value))
				{
					this.OnCommentCountChanging(value);
					this.SendPropertyChanging();
					this._CommentCount = value;
					this.SendPropertyChanged("CommentCount");
					this.OnCommentCountChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Profile")]
	public partial class Profile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _UserId;
		
		private string _ShowText;
		
		private System.Nullable<System.DateTime> _ShowTextTime;
		
		private long _Score;
		
		private long _ShowScore;
		
		private long _DelScore;
		
		private string _MagicBox;
		
		private byte _FaceShowLevel;
		
		private byte _BasicInfoShowLevel;
		
		private byte _SchoolInfoShowLevel;
		
		private byte _ContactInfoShowLevel;
		
		private byte _PersonalInfoShowLevel;
		
		private byte _AllShowLevel;
		
		private long _MessageAll;
		
		private long _MessageCount;
		
		private long _FileSizeAll;
		
		private long _FileSizeCount;
		
		private long _FriendAll;
		
		private long _FriendCount;
		
		private long _LogCount;
		
		private long _CommentCount;
		
		private int _GroupCount;
		
		private bool _IsMagicBox;
		
		private long _ViewCount;
		
		private System.DateTime _CreateTime;
		
		private bool _IsStar;
		
		private bool _IsUpdate;
		
		private string _Applications;
		
		private string _Applicationlist;
		
		private long _AlbumCount;
		
		private System.Nullable<byte> _field;
		
		private bool _InField;
		
		private EntityRef<BasicInformation> _BasicInformation;
		
		private EntityRef<ContactInformation> _ContactInformation;
		
		private EntityRef<FieldInformation> _FieldInformation;
		
		private EntityRef<PersonalInformation> _PersonalInformation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(long value);
    partial void OnUserIdChanged();
    partial void OnShowTextChanging(string value);
    partial void OnShowTextChanged();
    partial void OnShowTextTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnShowTextTimeChanged();
    partial void OnScoreChanging(long value);
    partial void OnScoreChanged();
    partial void OnShowScoreChanging(long value);
    partial void OnShowScoreChanged();
    partial void OnDelScoreChanging(long value);
    partial void OnDelScoreChanged();
    partial void OnMagicBoxChanging(string value);
    partial void OnMagicBoxChanged();
    partial void OnFaceShowLevelChanging(byte value);
    partial void OnFaceShowLevelChanged();
    partial void OnBasicInfoShowLevelChanging(byte value);
    partial void OnBasicInfoShowLevelChanged();
    partial void OnSchoolInfoShowLevelChanging(byte value);
    partial void OnSchoolInfoShowLevelChanged();
    partial void OnContactInfoShowLevelChanging(byte value);
    partial void OnContactInfoShowLevelChanged();
    partial void OnPersonalInfoShowLevelChanging(byte value);
    partial void OnPersonalInfoShowLevelChanged();
    partial void OnAllShowLevelChanging(byte value);
    partial void OnAllShowLevelChanged();
    partial void OnMessageAllChanging(long value);
    partial void OnMessageAllChanged();
    partial void OnMessageCountChanging(long value);
    partial void OnMessageCountChanged();
    partial void OnFileSizeAllChanging(long value);
    partial void OnFileSizeAllChanged();
    partial void OnFileSizeCountChanging(long value);
    partial void OnFileSizeCountChanged();
    partial void OnFriendAllChanging(long value);
    partial void OnFriendAllChanged();
    partial void OnFriendCountChanging(long value);
    partial void OnFriendCountChanged();
    partial void OnLogCountChanging(long value);
    partial void OnLogCountChanged();
    partial void OnCommentCountChanging(long value);
    partial void OnCommentCountChanged();
    partial void OnGroupCountChanging(int value);
    partial void OnGroupCountChanged();
    partial void OnIsMagicBoxChanging(bool value);
    partial void OnIsMagicBoxChanged();
    partial void OnViewCountChanging(long value);
    partial void OnViewCountChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    partial void OnIsStarChanging(bool value);
    partial void OnIsStarChanged();
    partial void OnIsUpdateChanging(bool value);
    partial void OnIsUpdateChanged();
    partial void OnApplicationsChanging(string value);
    partial void OnApplicationsChanged();
    partial void OnApplicationlistChanging(string value);
    partial void OnApplicationlistChanged();
    partial void OnAlbumCountChanging(long value);
    partial void OnAlbumCountChanged();
    partial void OnfieldChanging(System.Nullable<byte> value);
    partial void OnfieldChanged();
    partial void OnInFieldChanging(bool value);
    partial void OnInFieldChanged();
    #endregion
		
		public Profile()
		{
			this._BasicInformation = default(EntityRef<BasicInformation>);
			this._ContactInformation = default(EntityRef<ContactInformation>);
			this._FieldInformation = default(EntityRef<FieldInformation>);
			this._PersonalInformation = default(EntityRef<PersonalInformation>);
			OnCreated();
		}
		
		[Column(Storage="_UserId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_ShowText", DbType="NVarChar(20)")]
		public string ShowText
		{
			get
			{
				return this._ShowText;
			}
			set
			{
				if ((this._ShowText != value))
				{
					this.OnShowTextChanging(value);
					this.SendPropertyChanging();
					this._ShowText = value;
					this.SendPropertyChanged("ShowText");
					this.OnShowTextChanged();
				}
			}
		}
		
		[Column(Storage="_ShowTextTime", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> ShowTextTime
		{
			get
			{
				return this._ShowTextTime;
			}
			set
			{
				if ((this._ShowTextTime != value))
				{
					this.OnShowTextTimeChanging(value);
					this.SendPropertyChanging();
					this._ShowTextTime = value;
					this.SendPropertyChanged("ShowTextTime");
					this.OnShowTextTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Score", DbType="BigInt NOT NULL")]
		public long Score
		{
			get
			{
				return this._Score;
			}
			set
			{
				if ((this._Score != value))
				{
					this.OnScoreChanging(value);
					this.SendPropertyChanging();
					this._Score = value;
					this.SendPropertyChanged("Score");
					this.OnScoreChanged();
				}
			}
		}
		
		[Column(Storage="_ShowScore", DbType="BigInt NOT NULL")]
		public long ShowScore
		{
			get
			{
				return this._ShowScore;
			}
			set
			{
				if ((this._ShowScore != value))
				{
					this.OnShowScoreChanging(value);
					this.SendPropertyChanging();
					this._ShowScore = value;
					this.SendPropertyChanged("ShowScore");
					this.OnShowScoreChanged();
				}
			}
		}
		
		[Column(Storage="_DelScore", DbType="BigInt NOT NULL")]
		public long DelScore
		{
			get
			{
				return this._DelScore;
			}
			set
			{
				if ((this._DelScore != value))
				{
					this.OnDelScoreChanging(value);
					this.SendPropertyChanging();
					this._DelScore = value;
					this.SendPropertyChanged("DelScore");
					this.OnDelScoreChanged();
				}
			}
		}
		
		[Column(Storage="_MagicBox", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string MagicBox
		{
			get
			{
				return this._MagicBox;
			}
			set
			{
				if ((this._MagicBox != value))
				{
					this.OnMagicBoxChanging(value);
					this.SendPropertyChanging();
					this._MagicBox = value;
					this.SendPropertyChanged("MagicBox");
					this.OnMagicBoxChanged();
				}
			}
		}
		
		[Column(Storage="_FaceShowLevel", DbType="TinyInt NOT NULL")]
		public byte FaceShowLevel
		{
			get
			{
				return this._FaceShowLevel;
			}
			set
			{
				if ((this._FaceShowLevel != value))
				{
					this.OnFaceShowLevelChanging(value);
					this.SendPropertyChanging();
					this._FaceShowLevel = value;
					this.SendPropertyChanged("FaceShowLevel");
					this.OnFaceShowLevelChanged();
				}
			}
		}
		
		[Column(Storage="_BasicInfoShowLevel", DbType="TinyInt NOT NULL")]
		public byte BasicInfoShowLevel
		{
			get
			{
				return this._BasicInfoShowLevel;
			}
			set
			{
				if ((this._BasicInfoShowLevel != value))
				{
					this.OnBasicInfoShowLevelChanging(value);
					this.SendPropertyChanging();
					this._BasicInfoShowLevel = value;
					this.SendPropertyChanged("BasicInfoShowLevel");
					this.OnBasicInfoShowLevelChanged();
				}
			}
		}
		
		[Column(Storage="_SchoolInfoShowLevel", DbType="TinyInt NOT NULL")]
		public byte SchoolInfoShowLevel
		{
			get
			{
				return this._SchoolInfoShowLevel;
			}
			set
			{
				if ((this._SchoolInfoShowLevel != value))
				{
					this.OnSchoolInfoShowLevelChanging(value);
					this.SendPropertyChanging();
					this._SchoolInfoShowLevel = value;
					this.SendPropertyChanged("SchoolInfoShowLevel");
					this.OnSchoolInfoShowLevelChanged();
				}
			}
		}
		
		[Column(Storage="_ContactInfoShowLevel", DbType="TinyInt NOT NULL")]
		public byte ContactInfoShowLevel
		{
			get
			{
				return this._ContactInfoShowLevel;
			}
			set
			{
				if ((this._ContactInfoShowLevel != value))
				{
					this.OnContactInfoShowLevelChanging(value);
					this.SendPropertyChanging();
					this._ContactInfoShowLevel = value;
					this.SendPropertyChanged("ContactInfoShowLevel");
					this.OnContactInfoShowLevelChanged();
				}
			}
		}
		
		[Column(Storage="_PersonalInfoShowLevel", DbType="TinyInt NOT NULL")]
		public byte PersonalInfoShowLevel
		{
			get
			{
				return this._PersonalInfoShowLevel;
			}
			set
			{
				if ((this._PersonalInfoShowLevel != value))
				{
					this.OnPersonalInfoShowLevelChanging(value);
					this.SendPropertyChanging();
					this._PersonalInfoShowLevel = value;
					this.SendPropertyChanged("PersonalInfoShowLevel");
					this.OnPersonalInfoShowLevelChanged();
				}
			}
		}
		
		[Column(Storage="_AllShowLevel", DbType="TinyInt NOT NULL")]
		public byte AllShowLevel
		{
			get
			{
				return this._AllShowLevel;
			}
			set
			{
				if ((this._AllShowLevel != value))
				{
					this.OnAllShowLevelChanging(value);
					this.SendPropertyChanging();
					this._AllShowLevel = value;
					this.SendPropertyChanged("AllShowLevel");
					this.OnAllShowLevelChanged();
				}
			}
		}
		
		[Column(Storage="_MessageAll", DbType="BigInt NOT NULL")]
		public long MessageAll
		{
			get
			{
				return this._MessageAll;
			}
			set
			{
				if ((this._MessageAll != value))
				{
					this.OnMessageAllChanging(value);
					this.SendPropertyChanging();
					this._MessageAll = value;
					this.SendPropertyChanged("MessageAll");
					this.OnMessageAllChanged();
				}
			}
		}
		
		[Column(Storage="_MessageCount", DbType="BigInt NOT NULL")]
		public long MessageCount
		{
			get
			{
				return this._MessageCount;
			}
			set
			{
				if ((this._MessageCount != value))
				{
					this.OnMessageCountChanging(value);
					this.SendPropertyChanging();
					this._MessageCount = value;
					this.SendPropertyChanged("MessageCount");
					this.OnMessageCountChanged();
				}
			}
		}
		
		[Column(Storage="_FileSizeAll", DbType="BigInt NOT NULL")]
		public long FileSizeAll
		{
			get
			{
				return this._FileSizeAll;
			}
			set
			{
				if ((this._FileSizeAll != value))
				{
					this.OnFileSizeAllChanging(value);
					this.SendPropertyChanging();
					this._FileSizeAll = value;
					this.SendPropertyChanged("FileSizeAll");
					this.OnFileSizeAllChanged();
				}
			}
		}
		
		[Column(Storage="_FileSizeCount", DbType="BigInt NOT NULL")]
		public long FileSizeCount
		{
			get
			{
				return this._FileSizeCount;
			}
			set
			{
				if ((this._FileSizeCount != value))
				{
					this.OnFileSizeCountChanging(value);
					this.SendPropertyChanging();
					this._FileSizeCount = value;
					this.SendPropertyChanged("FileSizeCount");
					this.OnFileSizeCountChanged();
				}
			}
		}
		
		[Column(Storage="_FriendAll", DbType="BigInt NOT NULL")]
		public long FriendAll
		{
			get
			{
				return this._FriendAll;
			}
			set
			{
				if ((this._FriendAll != value))
				{
					this.OnFriendAllChanging(value);
					this.SendPropertyChanging();
					this._FriendAll = value;
					this.SendPropertyChanged("FriendAll");
					this.OnFriendAllChanged();
				}
			}
		}
		
		[Column(Storage="_FriendCount", DbType="BigInt NOT NULL")]
		public long FriendCount
		{
			get
			{
				return this._FriendCount;
			}
			set
			{
				if ((this._FriendCount != value))
				{
					this.OnFriendCountChanging(value);
					this.SendPropertyChanging();
					this._FriendCount = value;
					this.SendPropertyChanged("FriendCount");
					this.OnFriendCountChanged();
				}
			}
		}
		
		[Column(Storage="_LogCount", DbType="BigInt NOT NULL")]
		public long LogCount
		{
			get
			{
				return this._LogCount;
			}
			set
			{
				if ((this._LogCount != value))
				{
					this.OnLogCountChanging(value);
					this.SendPropertyChanging();
					this._LogCount = value;
					this.SendPropertyChanged("LogCount");
					this.OnLogCountChanged();
				}
			}
		}
		
		[Column(Storage="_CommentCount", DbType="BigInt NOT NULL")]
		public long CommentCount
		{
			get
			{
				return this._CommentCount;
			}
			set
			{
				if ((this._CommentCount != value))
				{
					this.OnCommentCountChanging(value);
					this.SendPropertyChanging();
					this._CommentCount = value;
					this.SendPropertyChanged("CommentCount");
					this.OnCommentCountChanged();
				}
			}
		}
		
		[Column(Storage="_GroupCount", DbType="Int NOT NULL")]
		public int GroupCount
		{
			get
			{
				return this._GroupCount;
			}
			set
			{
				if ((this._GroupCount != value))
				{
					this.OnGroupCountChanging(value);
					this.SendPropertyChanging();
					this._GroupCount = value;
					this.SendPropertyChanged("GroupCount");
					this.OnGroupCountChanged();
				}
			}
		}
		
		[Column(Storage="_IsMagicBox", DbType="Bit NOT NULL")]
		public bool IsMagicBox
		{
			get
			{
				return this._IsMagicBox;
			}
			set
			{
				if ((this._IsMagicBox != value))
				{
					this.OnIsMagicBoxChanging(value);
					this.SendPropertyChanging();
					this._IsMagicBox = value;
					this.SendPropertyChanged("IsMagicBox");
					this.OnIsMagicBoxChanged();
				}
			}
		}
		
		[Column(Storage="_ViewCount", DbType="BigInt NOT NULL")]
		public long ViewCount
		{
			get
			{
				return this._ViewCount;
			}
			set
			{
				if ((this._ViewCount != value))
				{
					this.OnViewCountChanging(value);
					this.SendPropertyChanging();
					this._ViewCount = value;
					this.SendPropertyChanged("ViewCount");
					this.OnViewCountChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="SmallDateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_IsStar", DbType="Bit NOT NULL")]
		public bool IsStar
		{
			get
			{
				return this._IsStar;
			}
			set
			{
				if ((this._IsStar != value))
				{
					this.OnIsStarChanging(value);
					this.SendPropertyChanging();
					this._IsStar = value;
					this.SendPropertyChanged("IsStar");
					this.OnIsStarChanged();
				}
			}
		}
		
		[Column(Storage="_IsUpdate", DbType="Bit NOT NULL")]
		public bool IsUpdate
		{
			get
			{
				return this._IsUpdate;
			}
			set
			{
				if ((this._IsUpdate != value))
				{
					this.OnIsUpdateChanging(value);
					this.SendPropertyChanging();
					this._IsUpdate = value;
					this.SendPropertyChanged("IsUpdate");
					this.OnIsUpdateChanged();
				}
			}
		}
		
		[Column(Storage="_Applications", DbType="VarChar(4000)")]
		public string Applications
		{
			get
			{
				return this._Applications;
			}
			set
			{
				if ((this._Applications != value))
				{
					this.OnApplicationsChanging(value);
					this.SendPropertyChanging();
					this._Applications = value;
					this.SendPropertyChanged("Applications");
					this.OnApplicationsChanged();
				}
			}
		}
		
		[Column(Storage="_Applicationlist", DbType="VarChar(4000)")]
		public string Applicationlist
		{
			get
			{
				return this._Applicationlist;
			}
			set
			{
				if ((this._Applicationlist != value))
				{
					this.OnApplicationlistChanging(value);
					this.SendPropertyChanging();
					this._Applicationlist = value;
					this.SendPropertyChanged("Applicationlist");
					this.OnApplicationlistChanged();
				}
			}
		}
		
		[Column(Storage="_AlbumCount", DbType="BigInt NOT NULL")]
		public long AlbumCount
		{
			get
			{
				return this._AlbumCount;
			}
			set
			{
				if ((this._AlbumCount != value))
				{
					this.OnAlbumCountChanging(value);
					this.SendPropertyChanging();
					this._AlbumCount = value;
					this.SendPropertyChanged("AlbumCount");
					this.OnAlbumCountChanged();
				}
			}
		}
		
		[Column(Storage="_field", DbType="TinyInt")]
		public System.Nullable<byte> field
		{
			get
			{
				return this._field;
			}
			set
			{
				if ((this._field != value))
				{
					this.OnfieldChanging(value);
					this.SendPropertyChanging();
					this._field = value;
					this.SendPropertyChanged("field");
					this.OnfieldChanged();
				}
			}
		}
		
		[Column(Storage="_InField", DbType="Bit NOT NULL")]
		public bool InField
		{
			get
			{
				return this._InField;
			}
			set
			{
				if ((this._InField != value))
				{
					this.OnInFieldChanging(value);
					this.SendPropertyChanging();
					this._InField = value;
					this.SendPropertyChanged("InField");
					this.OnInFieldChanged();
				}
			}
		}
		
		[Association(Name="Profile_BasicInformation", Storage="_BasicInformation", ThisKey="UserId", IsUnique=true, IsForeignKey=false)]
		public BasicInformation BasicInformation
		{
			get
			{
				return this._BasicInformation.Entity;
			}
			set
			{
				BasicInformation previousValue = this._BasicInformation.Entity;
				if (((previousValue != value) 
							|| (this._BasicInformation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BasicInformation.Entity = null;
						previousValue.Profile = null;
					}
					this._BasicInformation.Entity = value;
					if ((value != null))
					{
						value.Profile = this;
					}
					this.SendPropertyChanged("BasicInformation");
				}
			}
		}
		
		[Association(Name="Profile_ContactInformation", Storage="_ContactInformation", ThisKey="UserId", IsUnique=true, IsForeignKey=false)]
		public ContactInformation ContactInformation
		{
			get
			{
				return this._ContactInformation.Entity;
			}
			set
			{
				ContactInformation previousValue = this._ContactInformation.Entity;
				if (((previousValue != value) 
							|| (this._ContactInformation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContactInformation.Entity = null;
						previousValue.Profile = null;
					}
					this._ContactInformation.Entity = value;
					if ((value != null))
					{
						value.Profile = this;
					}
					this.SendPropertyChanged("ContactInformation");
				}
			}
		}
		
		[Association(Name="Profile_FieldInformation", Storage="_FieldInformation", ThisKey="UserId", IsUnique=true, IsForeignKey=false)]
		public FieldInformation FieldInformation
		{
			get
			{
				return this._FieldInformation.Entity;
			}
			set
			{
				FieldInformation previousValue = this._FieldInformation.Entity;
				if (((previousValue != value) 
							|| (this._FieldInformation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FieldInformation.Entity = null;
						previousValue.Profile = null;
					}
					this._FieldInformation.Entity = value;
					if ((value != null))
					{
						value.Profile = this;
					}
					this.SendPropertyChanged("FieldInformation");
				}
			}
		}
		
		[Association(Name="Profile_PersonalInformation", Storage="_PersonalInformation", ThisKey="UserId", IsUnique=true, IsForeignKey=false)]
		public PersonalInformation PersonalInformation
		{
			get
			{
				return this._PersonalInformation.Entity;
			}
			set
			{
				PersonalInformation previousValue = this._PersonalInformation.Entity;
				if (((previousValue != value) 
							|| (this._PersonalInformation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PersonalInformation.Entity = null;
						previousValue.Profile = null;
					}
					this._PersonalInformation.Entity = value;
					if ((value != null))
					{
						value.Profile = this;
					}
					this.SendPropertyChanged("PersonalInformation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Province")]
	public partial class Province : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _trueid;
		
		private System.Nullable<int> _id;
		
		private string _name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntrueidChanging(long value);
    partial void OntrueidChanged();
    partial void OnidChanging(System.Nullable<int> value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Province()
		{
			OnCreated();
		}
		
		[Column(Storage="_trueid", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long trueid
		{
			get
			{
				return this._trueid;
			}
			set
			{
				if ((this._trueid != value))
				{
					this.OntrueidChanging(value);
					this.SendPropertyChanging();
					this._trueid = value;
					this.SendPropertyChanged("trueid");
					this.OntrueidChanged();
				}
			}
		}
		
		[Column(Storage="_id", DbType="Int")]
		public System.Nullable<int> id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Push")]
	public partial class Push : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private long _Logid;
		
		private long _userid;
		
		private System.DateTime _PushTime;
		
		private EntityRef<Note> _Note;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnLogidChanging(long value);
    partial void OnLogidChanged();
    partial void OnuseridChanging(long value);
    partial void OnuseridChanged();
    partial void OnPushTimeChanging(System.DateTime value);
    partial void OnPushTimeChanged();
    #endregion
		
		public Push()
		{
			this._Note = default(EntityRef<Note>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_Logid", DbType="BigInt NOT NULL")]
		public long Logid
		{
			get
			{
				return this._Logid;
			}
			set
			{
				if ((this._Logid != value))
				{
					if (this._Note.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLogidChanging(value);
					this.SendPropertyChanging();
					this._Logid = value;
					this.SendPropertyChanged("Logid");
					this.OnLogidChanged();
				}
			}
		}
		
		[Column(Storage="_userid", DbType="BigInt NOT NULL")]
		public long userid
		{
			get
			{
				return this._userid;
			}
			set
			{
				if ((this._userid != value))
				{
					this.OnuseridChanging(value);
					this.SendPropertyChanging();
					this._userid = value;
					this.SendPropertyChanged("userid");
					this.OnuseridChanged();
				}
			}
		}
		
		[Column(Storage="_PushTime", DbType="SmallDateTime NOT NULL")]
		public System.DateTime PushTime
		{
			get
			{
				return this._PushTime;
			}
			set
			{
				if ((this._PushTime != value))
				{
					this.OnPushTimeChanging(value);
					this.SendPropertyChanging();
					this._PushTime = value;
					this.SendPropertyChanged("PushTime");
					this.OnPushTimeChanged();
				}
			}
		}
		
		[Association(Name="Log_Push", Storage="_Note", ThisKey="Logid", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Note Note
		{
			get
			{
				return this._Note.Entity;
			}
			set
			{
				Note previousValue = this._Note.Entity;
				if (((previousValue != value) 
							|| (this._Note.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Note.Entity = null;
						previousValue.Push.Remove(this);
					}
					this._Note.Entity = value;
					if ((value != null))
					{
						value.Push.Add(this);
						this._Logid = value.id;
					}
					else
					{
						this._Logid = default(long);
					}
					this.SendPropertyChanged("Note");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.QinShi")]
	public partial class QinShi : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _trueid;
		
		private System.Nullable<long> _id;
		
		private string _QinShi1;
		
		private long _School;
		
		private int _SchoolClass;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntrueidChanging(long value);
    partial void OntrueidChanged();
    partial void OnidChanging(System.Nullable<long> value);
    partial void OnidChanged();
    partial void OnQinShi1Changing(string value);
    partial void OnQinShi1Changed();
    partial void OnSchoolChanging(long value);
    partial void OnSchoolChanged();
    partial void OnSchoolClassChanging(int value);
    partial void OnSchoolClassChanged();
    #endregion
		
		public QinShi()
		{
			OnCreated();
		}
		
		[Column(Storage="_trueid", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long trueid
		{
			get
			{
				return this._trueid;
			}
			set
			{
				if ((this._trueid != value))
				{
					this.OntrueidChanging(value);
					this.SendPropertyChanging();
					this._trueid = value;
					this.SendPropertyChanged("trueid");
					this.OntrueidChanged();
				}
			}
		}
		
		[Column(Storage="_id", DbType="BigInt")]
		public System.Nullable<long> id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Name="QinShi", Storage="_QinShi1", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string QinShi1
		{
			get
			{
				return this._QinShi1;
			}
			set
			{
				if ((this._QinShi1 != value))
				{
					this.OnQinShi1Changing(value);
					this.SendPropertyChanging();
					this._QinShi1 = value;
					this.SendPropertyChanged("QinShi1");
					this.OnQinShi1Changed();
				}
			}
		}
		
		[Column(Storage="_School", DbType="BigInt NOT NULL")]
		public long School
		{
			get
			{
				return this._School;
			}
			set
			{
				if ((this._School != value))
				{
					this.OnSchoolChanging(value);
					this.SendPropertyChanging();
					this._School = value;
					this.SendPropertyChanged("School");
					this.OnSchoolChanged();
				}
			}
		}
		
		[Column(Storage="_SchoolClass", DbType="Int NOT NULL")]
		public int SchoolClass
		{
			get
			{
				return this._SchoolClass;
			}
			set
			{
				if ((this._SchoolClass != value))
				{
					this.OnSchoolClassChanging(value);
					this.SendPropertyChanging();
					this._SchoolClass = value;
					this.SendPropertyChanged("SchoolClass");
					this.OnSchoolClassChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Services")]
	public partial class Services : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _body;
		
		private string _Answer;
		
		private byte _status;
		
		private System.DateTime _sendtime;
		
		private System.DateTime _Answertime;
		
		private long _userid;
		
		private string _Email;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnbodyChanging(string value);
    partial void OnbodyChanged();
    partial void OnAnswerChanging(string value);
    partial void OnAnswerChanged();
    partial void OnstatusChanging(byte value);
    partial void OnstatusChanged();
    partial void OnsendtimeChanging(System.DateTime value);
    partial void OnsendtimeChanged();
    partial void OnAnswertimeChanging(System.DateTime value);
    partial void OnAnswertimeChanged();
    partial void OnuseridChanging(long value);
    partial void OnuseridChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public Services()
		{
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_body", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string body
		{
			get
			{
				return this._body;
			}
			set
			{
				if ((this._body != value))
				{
					this.OnbodyChanging(value);
					this.SendPropertyChanging();
					this._body = value;
					this.SendPropertyChanged("body");
					this.OnbodyChanged();
				}
			}
		}
		
		[Column(Storage="_Answer", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string Answer
		{
			get
			{
				return this._Answer;
			}
			set
			{
				if ((this._Answer != value))
				{
					this.OnAnswerChanging(value);
					this.SendPropertyChanging();
					this._Answer = value;
					this.SendPropertyChanged("Answer");
					this.OnAnswerChanged();
				}
			}
		}
		
		[Column(Storage="_status", DbType="TinyInt NOT NULL")]
		public byte status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[Column(Storage="_sendtime", DbType="SmallDateTime NOT NULL")]
		public System.DateTime sendtime
		{
			get
			{
				return this._sendtime;
			}
			set
			{
				if ((this._sendtime != value))
				{
					this.OnsendtimeChanging(value);
					this.SendPropertyChanging();
					this._sendtime = value;
					this.SendPropertyChanged("sendtime");
					this.OnsendtimeChanged();
				}
			}
		}
		
		[Column(Storage="_Answertime", DbType="SmallDateTime NOT NULL")]
		public System.DateTime Answertime
		{
			get
			{
				return this._Answertime;
			}
			set
			{
				if ((this._Answertime != value))
				{
					this.OnAnswertimeChanging(value);
					this.SendPropertyChanging();
					this._Answertime = value;
					this.SendPropertyChanged("Answertime");
					this.OnAnswertimeChanged();
				}
			}
		}
		
		[Column(Storage="_userid", DbType="BigInt NOT NULL")]
		public long userid
		{
			get
			{
				return this._userid;
			}
			set
			{
				if ((this._userid != value))
				{
					this.OnuseridChanging(value);
					this.SendPropertyChanging();
					this._userid = value;
					this.SendPropertyChanged("userid");
					this.OnuseridChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.SuperNote")]
	public partial class SuperNote : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _trueid;
		
		private System.Nullable<long> _id;
		
		private string _title;
		
		private string _faceurl;
		
		private string _url;
		
		private string _description;
		
		private long _userid;
		
		private long _ViewCount;
		
		private System.DateTime _AddTime;
		
		private byte _showlevel;
		
		private System.Nullable<long> _systemcategory;
		
		private System.Nullable<long> _category;
		
		private byte _type;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntrueidChanging(long value);
    partial void OntrueidChanged();
    partial void OnidChanging(System.Nullable<long> value);
    partial void OnidChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnfaceurlChanging(string value);
    partial void OnfaceurlChanged();
    partial void OnurlChanging(string value);
    partial void OnurlChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnuseridChanging(long value);
    partial void OnuseridChanged();
    partial void OnViewCountChanging(long value);
    partial void OnViewCountChanged();
    partial void OnAddTimeChanging(System.DateTime value);
    partial void OnAddTimeChanged();
    partial void OnshowlevelChanging(byte value);
    partial void OnshowlevelChanged();
    partial void OnsystemcategoryChanging(System.Nullable<long> value);
    partial void OnsystemcategoryChanged();
    partial void OncategoryChanging(System.Nullable<long> value);
    partial void OncategoryChanged();
    partial void OntypeChanging(byte value);
    partial void OntypeChanged();
    #endregion
		
		public SuperNote()
		{
			OnCreated();
		}
		
		[Column(Storage="_trueid", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long trueid
		{
			get
			{
				return this._trueid;
			}
			set
			{
				if ((this._trueid != value))
				{
					this.OntrueidChanging(value);
					this.SendPropertyChanging();
					this._trueid = value;
					this.SendPropertyChanged("trueid");
					this.OntrueidChanged();
				}
			}
		}
		
		[Column(Storage="_id", DbType="BigInt")]
		public System.Nullable<long> id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_title", DbType="NVarChar(50)")]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[Column(Storage="_faceurl", DbType="NVarChar(500)")]
		public string faceurl
		{
			get
			{
				return this._faceurl;
			}
			set
			{
				if ((this._faceurl != value))
				{
					this.OnfaceurlChanging(value);
					this.SendPropertyChanging();
					this._faceurl = value;
					this.SendPropertyChanged("faceurl");
					this.OnfaceurlChanged();
				}
			}
		}
		
		[Column(Storage="_url", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string url
		{
			get
			{
				return this._url;
			}
			set
			{
				if ((this._url != value))
				{
					this.OnurlChanging(value);
					this.SendPropertyChanging();
					this._url = value;
					this.SendPropertyChanged("url");
					this.OnurlChanged();
				}
			}
		}
		
		[Column(Storage="_description", DbType="NVarChar(50)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_userid", DbType="BigInt NOT NULL")]
		public long userid
		{
			get
			{
				return this._userid;
			}
			set
			{
				if ((this._userid != value))
				{
					this.OnuseridChanging(value);
					this.SendPropertyChanging();
					this._userid = value;
					this.SendPropertyChanged("userid");
					this.OnuseridChanged();
				}
			}
		}
		
		[Column(Storage="_ViewCount", DbType="BigInt NOT NULL")]
		public long ViewCount
		{
			get
			{
				return this._ViewCount;
			}
			set
			{
				if ((this._ViewCount != value))
				{
					this.OnViewCountChanging(value);
					this.SendPropertyChanging();
					this._ViewCount = value;
					this.SendPropertyChanged("ViewCount");
					this.OnViewCountChanged();
				}
			}
		}
		
		[Column(Storage="_AddTime", DbType="SmallDateTime NOT NULL")]
		public System.DateTime AddTime
		{
			get
			{
				return this._AddTime;
			}
			set
			{
				if ((this._AddTime != value))
				{
					this.OnAddTimeChanging(value);
					this.SendPropertyChanging();
					this._AddTime = value;
					this.SendPropertyChanged("AddTime");
					this.OnAddTimeChanged();
				}
			}
		}
		
		[Column(Storage="_showlevel", DbType="TinyInt NOT NULL")]
		public byte showlevel
		{
			get
			{
				return this._showlevel;
			}
			set
			{
				if ((this._showlevel != value))
				{
					this.OnshowlevelChanging(value);
					this.SendPropertyChanging();
					this._showlevel = value;
					this.SendPropertyChanged("showlevel");
					this.OnshowlevelChanged();
				}
			}
		}
		
		[Column(Storage="_systemcategory", DbType="BigInt")]
		public System.Nullable<long> systemcategory
		{
			get
			{
				return this._systemcategory;
			}
			set
			{
				if ((this._systemcategory != value))
				{
					this.OnsystemcategoryChanging(value);
					this.SendPropertyChanging();
					this._systemcategory = value;
					this.SendPropertyChanged("systemcategory");
					this.OnsystemcategoryChanged();
				}
			}
		}
		
		[Column(Storage="_category", DbType="BigInt")]
		public System.Nullable<long> category
		{
			get
			{
				return this._category;
			}
			set
			{
				if ((this._category != value))
				{
					this.OncategoryChanging(value);
					this.SendPropertyChanging();
					this._category = value;
					this.SendPropertyChanged("category");
					this.OncategoryChanged();
				}
			}
		}
		
		[Column(Storage="_type", DbType="TinyInt NOT NULL")]
		public byte type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Tags")]
	public partial class Tags : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _title;
		
		private long _Count;
		
		private byte _type;
		
		private System.DateTime _ReachTime;
		
		private EntitySet<LogTag> _LogTag;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnCountChanging(long value);
    partial void OnCountChanged();
    partial void OntypeChanging(byte value);
    partial void OntypeChanged();
    partial void OnReachTimeChanging(System.DateTime value);
    partial void OnReachTimeChanged();
    #endregion
		
		public Tags()
		{
			this._LogTag = new EntitySet<LogTag>(new Action<LogTag>(this.attach_LogTag), new Action<LogTag>(this.detach_LogTag));
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[Column(Storage="_Count", DbType="BigInt NOT NULL")]
		public long Count
		{
			get
			{
				return this._Count;
			}
			set
			{
				if ((this._Count != value))
				{
					this.OnCountChanging(value);
					this.SendPropertyChanging();
					this._Count = value;
					this.SendPropertyChanged("Count");
					this.OnCountChanged();
				}
			}
		}
		
		[Column(Storage="_type", DbType="TinyInt NOT NULL")]
		public byte type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[Column(Storage="_ReachTime", DbType="SmallDateTime NOT NULL")]
		public System.DateTime ReachTime
		{
			get
			{
				return this._ReachTime;
			}
			set
			{
				if ((this._ReachTime != value))
				{
					this.OnReachTimeChanging(value);
					this.SendPropertyChanging();
					this._ReachTime = value;
					this.SendPropertyChanged("ReachTime");
					this.OnReachTimeChanged();
				}
			}
		}
		
		[Association(Name="Tags_LogTag", Storage="_LogTag", OtherKey="tagid")]
		public EntitySet<LogTag> LogTag
		{
			get
			{
				return this._LogTag;
			}
			set
			{
				this._LogTag.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LogTag(LogTag entity)
		{
			this.SendPropertyChanging();
			entity.Tags = this;
		}
		
		private void detach_LogTag(LogTag entity)
		{
			this.SendPropertyChanging();
			entity.Tags = null;
		}
	}
}
#pragma warning restore 1591
