
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Diagnostics;

namespace CHSNS.Models
{
    /// <summary>
    /// The class representing the dbo.BasicInformation table.
    /// </summary>
    [Table(Name="dbo.BasicInformation")]
    public partial class BasicInformation
        : LinqEntityBase
    {
        
        #region Default Constructor
        /// <summary>
        /// Initializes a new instance of the <see cref="BasicInformation"/> class.
        /// </summary>
        [DebuggerNonUserCodeAttribute()]
        public BasicInformation()
        {
            OnCreated();
            _profile = default(EntityRef<Profile>);
        }
        #endregion
        
        #region Column Mapped Properties
        
        private Nullable<bool> _sex;

        /// <summary>
        /// Gets or sets the Sex column value.
        /// </summary>
        [Column(Name="Sex", Storage="_sex", DbType="bit")]
        public Nullable<bool> Sex
        {
            get { return _sex; }
            set
            {
                if (_sex != value)
                {
                    OnSexChanging(value);
                    OnPropertyChanging("Sex");
                    _sex = value;
                    OnPropertyChanged("Sex");
                    OnSexChanged();
                }
            }
        }
        
        private long _userID;

        /// <summary>
        /// Gets or sets the UserID column value.
        /// </summary>
        [Column(Name="UserID", Storage="_userID", DbType="bigint NOT NULL", IsPrimaryKey=true, CanBeNull=false)]
        public long UserID
        {
            get { return _userID; }
            set
            {
                if (_userID != value)
                {
                    if (_profile.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnUserIDChanging(value);
                    OnPropertyChanging("UserID");
                    _userID = value;
                    OnPropertyChanged("UserID");
                    OnUserIDChanged();
                }
            }
        }
        
        private string _name;

        /// <summary>
        /// Gets or sets the Name column value.
        /// </summary>
        [Column(Name="Name", Storage="_name", DbType="nvarchar(20)")]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    OnNameChanging(value);
                    OnPropertyChanging("Name");
                    _name = value;
                    OnPropertyChanged("Name");
                    OnNameChanged();
                }
            }
        }
        
        private byte _showLevel;

        /// <summary>
        /// Gets or sets the ShowLevel column value.
        /// </summary>
        [Column(Name="ShowLevel", Storage="_showLevel", DbType="tinyint NOT NULL", CanBeNull=false)]
        public byte ShowLevel
        {
            get { return _showLevel; }
            set
            {
                if (_showLevel != value)
                {
                    OnShowLevelChanging(value);
                    OnPropertyChanging("ShowLevel");
                    _showLevel = value;
                    OnPropertyChanged("ShowLevel");
                    OnShowLevelChanged();
                }
            }
        }
        
        private Nullable<System.DateTime> _birthday;

        /// <summary>
        /// Gets or sets the Birthday column value.
        /// </summary>
        [Column(Name="Birthday", Storage="_birthday", DbType="smalldatetime")]
        public Nullable<System.DateTime> Birthday
        {
            get { return _birthday; }
            set
            {
                if (_birthday != value)
                {
                    OnBirthdayChanging(value);
                    OnPropertyChanging("Birthday");
                    _birthday = value;
                    OnPropertyChanged("Birthday");
                    OnBirthdayChanged();
                }
            }
        }
        
        private int _provinceID;

        /// <summary>
        /// Gets or sets the ProvinceID column value.
        /// </summary>
        [Column(Name="ProvinceID", Storage="_provinceID", DbType="int NOT NULL", CanBeNull=false)]
        public int ProvinceID
        {
            get { return _provinceID; }
            set
            {
                if (_provinceID != value)
                {
                    OnProvinceIDChanging(value);
                    OnPropertyChanging("ProvinceID");
                    _provinceID = value;
                    OnPropertyChanged("ProvinceID");
                    OnProvinceIDChanged();
                }
            }
        }
        
        private long _cityID;

        /// <summary>
        /// Gets or sets the CityID column value.
        /// </summary>
        [Column(Name="CityID", Storage="_cityID", DbType="bigint NOT NULL", CanBeNull=false)]
        public long CityID
        {
            get { return _cityID; }
            set
            {
                if (_cityID != value)
                {
                    OnCityIDChanging(value);
                    OnPropertyChanging("CityID");
                    _cityID = value;
                    OnPropertyChanged("CityID");
                    OnCityIDChanged();
                }
            }
        }
        #endregion
        
        #region Association Mapped Properties
        
        private EntityRef<Profile> _profile;

        /// <summary>
        /// Gets or sets the Profile association.
        /// </summary>
        [Association(Name="FK_BasicInformation_Profile", Storage="_profile", ThisKey="UserID", OtherKey="UserId", IsForeignKey=true)]
        public Profile Profile
        {
            get { return _profile.Entity; }
            set
            {
                Profile previousValue = _profile.Entity;
                if (previousValue != value || _profile.HasLoadedOrAssignedValue == false)
                {
                    OnPropertyChanging("Profile");
                    if (previousValue != null)
                    {
                        _profile.Entity = null;
                        previousValue.BasicInformation = null;
                    }
                    _profile.Entity = value;
                    if (value != null)
                    {
                        value.BasicInformation = this;
                        _userID = value.UserId;
                    }
                    else
                    {
                        _userID = default(long);
                    }
                    OnPropertyChanged("Profile");
                }
            }
        }
        #endregion
        
        #region Extensibility Method Definitions
        /// <summary>Called when this instance is loaded.</summary>
        partial void OnLoaded();
        /// <summary>Called when this instance is being saved.</summary>
        partial void OnValidate(ChangeAction action);
        /// <summary>Called when this instance is created.</summary>
        partial void OnCreated();
        /// <summary>Called when Sex is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnSexChanging(Nullable<bool> value);
        /// <summary>Called after Sex has Changed.</summary>
        partial void OnSexChanged();
        /// <summary>Called when UserID is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnUserIDChanging(long value);
        /// <summary>Called after UserID has Changed.</summary>
        partial void OnUserIDChanged();
        /// <summary>Called when Name is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnNameChanging(string value);
        /// <summary>Called after Name has Changed.</summary>
        partial void OnNameChanged();
        /// <summary>Called when ShowLevel is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnShowLevelChanging(byte value);
        /// <summary>Called after ShowLevel has Changed.</summary>
        partial void OnShowLevelChanged();
        /// <summary>Called when Birthday is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnBirthdayChanging(Nullable<System.DateTime> value);
        /// <summary>Called after Birthday has Changed.</summary>
        partial void OnBirthdayChanged();
        /// <summary>Called when ProvinceID is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnProvinceIDChanging(int value);
        /// <summary>Called after ProvinceID has Changed.</summary>
        partial void OnProvinceIDChanged();
        /// <summary>Called when CityID is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnCityIDChanging(long value);
        /// <summary>Called after CityID has Changed.</summary>
        partial void OnCityIDChanged();
        #endregion
        
    }
}

