
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Diagnostics;

namespace CHSNS.Models
{
    /// <summary>
    /// The class representing the dbo.BasicInformation table.
    /// </summary>
    [Table(Name="dbo.BasicInformation")]
    public partial class BasicInformation
        : LinqEntityBase
    {
        
        #region Default Constructor
        /// <summary>
        /// Initializes a new instance of the <see cref="BasicInformation"/> class.
        /// </summary>
        [DebuggerNonUserCodeAttribute()]
        public BasicInformation()
        {
            OnCreated();
            _profile = default(EntityRef<Profile>);
        }
        #endregion
        
        #region Column Mapped Properties
        
        private long _userid;

        /// <summary>
        /// Gets or sets the userid column value.
        /// </summary>
        [Column(Name="userid", Storage="_userid", DbType="bigint NOT NULL", IsPrimaryKey=true, CanBeNull=false)]
        public long Userid
        {
            get { return _userid; }
            set
            {
                if (_userid != value)
                {
                    if (_profile.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnUseridChanging(value);
                    OnPropertyChanging("Userid");
                    _userid = value;
                    OnPropertyChanged("Userid");
                    OnUseridChanged();
                }
            }
        }
        
        private Nullable<bool> _sex;

        /// <summary>
        /// Gets or sets the Sex column value.
        /// </summary>
        [Column(Name="Sex", Storage="_sex", DbType="bit")]
        public Nullable<bool> Sex
        {
            get { return _sex; }
            set
            {
                if (_sex != value)
                {
                    OnSexChanging(value);
                    OnPropertyChanging("Sex");
                    _sex = value;
                    OnPropertyChanged("Sex");
                    OnSexChanged();
                }
            }
        }
        
        private Nullable<System.DateTime> _birthDay;

        /// <summary>
        /// Gets or sets the BirthDay column value.
        /// </summary>
        [Column(Name="BirthDay", Storage="_birthDay", DbType="smalldatetime")]
        public Nullable<System.DateTime> BirthDay
        {
            get { return _birthDay; }
            set
            {
                if (_birthDay != value)
                {
                    OnBirthDayChanging(value);
                    OnPropertyChanging("BirthDay");
                    _birthDay = value;
                    OnPropertyChanged("BirthDay");
                    OnBirthDayChanged();
                }
            }
        }
        
        private int _province;

        /// <summary>
        /// Gets or sets the Province column value.
        /// </summary>
        [Column(Name="Province", Storage="_province", DbType="int NOT NULL", CanBeNull=false)]
        public int Province
        {
            get { return _province; }
            set
            {
                if (_province != value)
                {
                    OnProvinceChanging(value);
                    OnPropertyChanging("Province");
                    _province = value;
                    OnPropertyChanged("Province");
                    OnProvinceChanged();
                }
            }
        }
        
        private long _city;

        /// <summary>
        /// Gets or sets the City column value.
        /// </summary>
        [Column(Name="City", Storage="_city", DbType="bigint NOT NULL", CanBeNull=false)]
        public long City
        {
            get { return _city; }
            set
            {
                if (_city != value)
                {
                    OnCityChanging(value);
                    OnPropertyChanging("City");
                    _city = value;
                    OnPropertyChanged("City");
                    OnCityChanged();
                }
            }
        }
        #endregion
        
        #region Association Mapped Properties
        
        private EntityRef<Profile> _profile;

        /// <summary>
        /// Gets or sets the Profile association.
        /// </summary>
        [Association(Name="FK_BasicInformation_Profile", Storage="_profile", ThisKey="Userid", OtherKey="UserId", IsForeignKey=true)]
        public Profile Profile
        {
            get { return _profile.Entity; }
            set
            {
                Profile previousValue = _profile.Entity;
                if (previousValue != value || _profile.HasLoadedOrAssignedValue == false)
                {
                    OnPropertyChanging("Profile");
                    if (previousValue != null)
                    {
                        _profile.Entity = null;
                        previousValue.BasicInformation = null;
                    }
                    _profile.Entity = value;
                    if (value != null)
                    {
                        value.BasicInformation = this;
                        _userid = value.UserId;
                    }
                    else
                    {
                        _userid = default(long);
                    }
                    OnPropertyChanged("Profile");
                }
            }
        }
        #endregion
        
        #region Extensibility Method Definitions
        /// <summary>Called when this instance is loaded.</summary>
        partial void OnLoaded();
        /// <summary>Called when this instance is being saved.</summary>
        partial void OnValidate(ChangeAction action);
        /// <summary>Called when this instance is created.</summary>
        partial void OnCreated();
        /// <summary>Called when Userid is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnUseridChanging(long value);
        /// <summary>Called after Userid has Changed.</summary>
        partial void OnUseridChanged();
        /// <summary>Called when Sex is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnSexChanging(Nullable<bool> value);
        /// <summary>Called after Sex has Changed.</summary>
        partial void OnSexChanged();
        /// <summary>Called when BirthDay is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnBirthDayChanging(Nullable<System.DateTime> value);
        /// <summary>Called after BirthDay has Changed.</summary>
        partial void OnBirthDayChanged();
        /// <summary>Called when Province is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnProvinceChanging(int value);
        /// <summary>Called after Province has Changed.</summary>
        partial void OnProvinceChanged();
        /// <summary>Called when City is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnCityChanging(long value);
        /// <summary>Called after City has Changed.</summary>
        partial void OnCityChanged();
        #endregion
        
    }
}

