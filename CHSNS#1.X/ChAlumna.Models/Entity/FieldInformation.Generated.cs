
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Diagnostics;

namespace CHSNS.Models
{
    /// <summary>
    /// The class representing the dbo.FieldInformation table.
    /// </summary>
    [Table(Name="dbo.FieldInformation")]
    public partial class FieldInformation
        : LinqEntityBase
    {
        
        #region Default Constructor
        /// <summary>
        /// Initializes a new instance of the <see cref="FieldInformation"/> class.
        /// </summary>
        [DebuggerNonUserCodeAttribute()]
        public FieldInformation()
        {
            OnCreated();
            _profile = default(EntityRef<Profile>);
        }
        #endregion
        
        #region Column Mapped Properties
        
        private long _userid;

        /// <summary>
        /// Gets or sets the userid column value.
        /// </summary>
        [Column(Name="userid", Storage="_userid", DbType="bigint NOT NULL", IsPrimaryKey=true, CanBeNull=false)]
        public long UserID
        {
            get { return _userid; }
            set
            {
                if (_userid != value)
                {
                    if (_profile.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnUseridChanging(value);
                    OnPropertyChanging("Userid");
                    _userid = value;
                    OnPropertyChanged("Userid");
                    OnUseridChanged();
                }
            }
        }
        
        private long _field;

        /// <summary>
        /// Gets or sets the Field column value.
        /// </summary>
        [Column(Name="Field", Storage="_field", DbType="bigint NOT NULL", CanBeNull=false)]
        public long Field
        {
            get { return _field; }
            set
            {
                if (_field != value)
                {
                    OnFieldChanging(value);
                    OnPropertyChanging("Field");
                    _field = value;
                    OnPropertyChanged("Field");
                    OnFieldChanged();
                }
            }
        }
        
        private Nullable<short> _year;

        /// <summary>
        /// Gets or sets the Year column value.
        /// </summary>
        [Column(Name="Year", Storage="_year", DbType="smallint")]
        public Nullable<short> Year
        {
            get { return _year; }
            set
            {
                if (_year != value)
                {
                    OnYearChanging(value);
                    OnPropertyChanging("Year");
                    _year = value;
                    OnPropertyChanged("Year");
                    OnYearChanged();
                }
            }
        }
        
        private Nullable<long> _miniField;

        /// <summary>
        /// Gets or sets the MiniField column value.
        /// </summary>
        [Column(Name="MiniField", Storage="_miniField", DbType="bigint")]
        public Nullable<long> MiniField
        {
            get { return _miniField; }
            set
            {
                if (_miniField != value)
                {
                    OnMiniFieldChanging(value);
                    OnPropertyChanging("MiniField");
                    _miniField = value;
                    OnPropertyChanged("MiniField");
                    OnMiniFieldChanged();
                }
            }
        }
        
        private Nullable<long> _qinShi;

        /// <summary>
        /// Gets or sets the QinShi column value.
        /// </summary>
        [Column(Name="QinShi", Storage="_qinShi", DbType="bigint")]
        public Nullable<long> QinShi
        {
            get { return _qinShi; }
            set
            {
                if (_qinShi != value)
                {
                    OnQinShiChanging(value);
                    OnPropertyChanging("QinShi");
                    _qinShi = value;
                    OnPropertyChanged("QinShi");
                    OnQinShiChanged();
                }
            }
        }
        
        private Nullable<long> _field1;

        /// <summary>
        /// Gets or sets the Field1 column value.
        /// </summary>
        [Column(Name="Field1", Storage="_field1", DbType="bigint")]
        public Nullable<long> Field1
        {
            get { return _field1; }
            set
            {
                if (_field1 != value)
                {
                    OnField1Changing(value);
                    OnPropertyChanging("Field1");
                    _field1 = value;
                    OnPropertyChanged("Field1");
                    OnField1Changed();
                }
            }
        }
        
        private Nullable<long> _field2;

        /// <summary>
        /// Gets or sets the Field2 column value.
        /// </summary>
        [Column(Name="Field2", Storage="_field2", DbType="bigint")]
        public Nullable<long> Field2
        {
            get { return _field2; }
            set
            {
                if (_field2 != value)
                {
                    OnField2Changing(value);
                    OnPropertyChanging("Field2");
                    _field2 = value;
                    OnPropertyChanged("Field2");
                    OnField2Changed();
                }
            }
        }
        #endregion
        
        #region Association Mapped Properties
        
        private EntityRef<Profile> _profile;

        /// <summary>
        /// Gets or sets the Profile association.
        /// </summary>
        [Association(Name="FK_FieldInformation_Profile", Storage="_profile", ThisKey="Userid", OtherKey="UserId", IsForeignKey=true)]
        public Profile Profile
        {
            get { return _profile.Entity; }
            set
            {
                Profile previousValue = _profile.Entity;
                if (previousValue != value || _profile.HasLoadedOrAssignedValue == false)
                {
                    OnPropertyChanging("Profile");
                    if (previousValue != null)
                    {
                        _profile.Entity = null;
                        previousValue.FieldInformation = null;
                    }
                    _profile.Entity = value;
                    if (value != null)
                    {
                        value.FieldInformation = this;
                        _userid = value.UserId;
                    }
                    else
                    {
                        _userid = default(long);
                    }
                    OnPropertyChanged("Profile");
                }
            }
        }
        #endregion
        
        #region Extensibility Method Definitions
        /// <summary>Called when this instance is loaded.</summary>
        partial void OnLoaded();
        /// <summary>Called when this instance is being saved.</summary>
        partial void OnValidate(ChangeAction action);
        /// <summary>Called when this instance is created.</summary>
        partial void OnCreated();
        /// <summary>Called when Userid is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnUseridChanging(long value);
        /// <summary>Called after Userid has Changed.</summary>
        partial void OnUseridChanged();
        /// <summary>Called when Field is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnFieldChanging(long value);
        /// <summary>Called after Field has Changed.</summary>
        partial void OnFieldChanged();
        /// <summary>Called when Year is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnYearChanging(Nullable<short> value);
        /// <summary>Called after Year has Changed.</summary>
        partial void OnYearChanged();
        /// <summary>Called when MiniField is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnMiniFieldChanging(Nullable<long> value);
        /// <summary>Called after MiniField has Changed.</summary>
        partial void OnMiniFieldChanged();
        /// <summary>Called when QinShi is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnQinShiChanging(Nullable<long> value);
        /// <summary>Called after QinShi has Changed.</summary>
        partial void OnQinShiChanged();
        /// <summary>Called when Field1 is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnField1Changing(Nullable<long> value);
        /// <summary>Called after Field1 has Changed.</summary>
        partial void OnField1Changed();
        /// <summary>Called when Field2 is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnField2Changing(Nullable<long> value);
        /// <summary>Called after Field2 has Changed.</summary>
        partial void OnField2Changed();
        #endregion
        
    }
}

