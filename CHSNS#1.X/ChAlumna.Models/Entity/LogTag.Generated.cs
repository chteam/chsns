
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Diagnostics;

namespace CHSNS.Models
{
    /// <summary>
    /// The class representing the dbo.LogTag table.
    /// </summary>
    [Table(Name="dbo.LogTag")]
    public partial class LogTag
        : LinqEntityBase
    {
        
        #region Default Constructor
        /// <summary>
        /// Initializes a new instance of the <see cref="LogTag"/> class.
        /// </summary>
        [DebuggerNonUserCodeAttribute()]
        public LogTag()
        {
            OnCreated();
            _log = default(EntityRef<Note>);
            _tagidTags = default(EntityRef<Tags>);
        }
        #endregion
        
        #region Column Mapped Properties
        
        private long _id = default(long);

        /// <summary>
        /// Gets the id column value.
        /// </summary>
        [Column(Name="id", Storage="_id", DbType="bigint NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, CanBeNull=false)]
        public long ID
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    OnIdChanging(value);
                    OnPropertyChanging("Id");
                    _id = value;
                    OnPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        
        private long _tagid;

        /// <summary>
        /// Gets or sets the tagid column value.
        /// </summary>
        [Column(Name="tagid", Storage="_tagid", DbType="bigint NOT NULL", CanBeNull=false)]
        public long TagID
        {
            get { return _tagid; }
            set
            {
                if (_tagid != value)
                {
                    if (_tagidTags.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnTagidChanging(value);
                    OnPropertyChanging("Tagid");
                    _tagid = value;
                    OnPropertyChanged("Tagid");
                    OnTagidChanged();
                }
            }
        }
        
        private long _logid;

        /// <summary>
        /// Gets or sets the logid column value.
        /// </summary>
        [Column(Name="logid", Storage="_logid", DbType="bigint NOT NULL", CanBeNull=false)]
        public long LogID
        {
            get { return _logid; }
            set
            {
                if (_logid != value)
                {
                    if (_log.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnLogidChanging(value);
                    OnPropertyChanging("Logid");
                    _logid = value;
                    OnPropertyChanged("Logid");
                    OnLogidChanged();
                }
            }
        }
        #endregion
        
        #region Association Mapped Properties
        
        private EntityRef<Note> _log;

        /// <summary>
        /// Gets or sets the Log association.
        /// </summary>
        [Association(Name="FK_LogTag_Log", Storage="_log", ThisKey="Logid", OtherKey="Id", IsForeignKey=true)]
        public Note Log
        {
            get { return _log.Entity; }
            set
            {
                Note previousValue = _log.Entity;
                if (previousValue != value || _log.HasLoadedOrAssignedValue == false)
                {
                    OnPropertyChanging("Log");
                    if (previousValue != null)
                    {
                        _log.Entity = null;
                        previousValue.LogTagList.Remove(this);
                    }
                    _log.Entity = value;
                    if (value != null)
                    {
                        value.LogTagList.Add(this);
                        _logid = value.ID;
                    }
                    else
                    {
                        _logid = default(long);
                    }
                    OnPropertyChanged("Log");
                }
            }
        }
        
        private EntityRef<Tags> _tagidTags;

        /// <summary>
        /// Gets or sets the Tags association.
        /// </summary>
        [Association(Name="FK_LogTag_Tags", Storage="_tagidTags", ThisKey="Tagid", OtherKey="Id", IsForeignKey=true)]
        public Tags TagidTags
        {
            get { return _tagidTags.Entity; }
            set
            {
                Tags previousValue = _tagidTags.Entity;
                if (previousValue != value || _tagidTags.HasLoadedOrAssignedValue == false)
                {
                    OnPropertyChanging("TagidTags");
                    if (previousValue != null)
                    {
                        _tagidTags.Entity = null;
                        previousValue.TagidLogTagList.Remove(this);
                    }
                    _tagidTags.Entity = value;
                    if (value != null)
                    {
                        value.TagidLogTagList.Add(this);
                        _tagid = value.Id;
                    }
                    else
                    {
                        _tagid = default(long);
                    }
                    OnPropertyChanged("TagidTags");
                }
            }
        }
        #endregion
        
        #region Extensibility Method Definitions
        /// <summary>Called when this instance is loaded.</summary>
        partial void OnLoaded();
        /// <summary>Called when this instance is being saved.</summary>
        partial void OnValidate(ChangeAction action);
        /// <summary>Called when this instance is created.</summary>
        partial void OnCreated();
        /// <summary>Called when Id is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnIdChanging(long value);
        /// <summary>Called after Id has Changed.</summary>
        partial void OnIdChanged();
        /// <summary>Called when Tagid is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnTagidChanging(long value);
        /// <summary>Called after Tagid has Changed.</summary>
        partial void OnTagidChanged();
        /// <summary>Called when Logid is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnLogidChanging(long value);
        /// <summary>Called after Logid has Changed.</summary>
        partial void OnLogidChanged();
        #endregion
        
    }
}

